PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_INT_OFFR_HIST" 
(IN IP_EFF_DT DATE, 
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_INT_OFFR_HIST
-- Created By      : BC_EZ08930 (Rakesh)       
-- Create Date     : 03-18-2017
-- Description     : Data Inserted using Calculation View - CA_INT_OFFR_HIST
--                   to NDB Table - INT_OFFR_HIST Using this stored procedure.
--                   Internet OFFER HISTORY includes data from table INT_OFFR_HIST.			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG        INTEGER := 0;
DECLARE LV_PREV_RECORD		      NVARCHAR(100) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
  
DECLARE CURSOR INT_OFFR_HIST FOR
			SELECT
				  "ODS_SYST_CD",
				  "OFFER_CODE",
				  "BAN",
			      "OFH_SEQ_NO",
				  "SUBSCRIBER_NO",
				  "EFFECTIVE_DATE",
				  "EXPIRATION_DATE",
				  "PRODUCT_TYPE",
				  "OFFER_TYPE",
				  "REFERENCE_EFFECTIVE_DT",
				  "REFERENCE_EXPIRY_DT",
				  "EFFECTIVE_DATE_PREV_DAY",
				  "CYCL_ID",
				  "FLAG_EXISTING_RECORD",
				  "ERROR_STATUS",
				  "ERROR_CODE",
				  "CONCAT_PK"
			 FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_INT_OFFR_HIST"
			      (PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
		 ORDER BY "OFFER_CODE", "BAN", "OFH_SEQ_NO", "SUBSCRIBER_NO", "PRODUCT_TYPE", "REFERENCE_EFFECTIVE_DT";	 
			
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_INT_OFFR_HIST (OFFER_CODE NVARCHAR(30),BAN NVARCHAR(9),OFH_SEQ_NO INTEGER, SUBSCRIBER_NO NVARCHAR(20),PRODUCT_TYPE NVARCHAR(1),EFF_DT DATE ,EXPY_DT DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (OFFER_CODE NVARCHAR(100),BAN NVARCHAR(100),OFH_SEQ_NO NVARCHAR(100), SUBSCRIBER_NO NVARCHAR(100),PRODUCT_TYPE NVARCHAR(100),REFERENCE_EFFECTIVE_DT NVARCHAR(100));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------  

FOR OFFR_HIST AS INT_OFFR_HIST DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
	--    Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION 	
		
		  END;	
		
		 -- Insert record into error table
	   	    INSERT INTO  "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_HIST_EH"(
						 "BAN",
						 "EFFECTIVE_DATE",
						 "EXPIRATION_DATE",
						 "ODS_SYST_CD",
						 "OFFER_CODE",
						 "OFFER_TYPE",
						 "OFH_SEQ_NO",
						 "PRODUCT_TYPE",
						 "REFERENCE_EFFECTIVE_DT",
						 "REFERENCE_EXPIRY_DT",
						 "SUBSCRIBER_NO",
						 "ERROR_CODE",
						 "TECHNICAL_MESSAGE",
						 "ERROR_CREATE_TS")
				 VALUES  (OFFR_HIST."BAN",
						  OFFR_HIST."EFFECTIVE_DATE",
						  OFFR_HIST."EXPIRATION_DATE",
						  OFFR_HIST."ODS_SYST_CD",
						  OFFR_HIST."OFFER_CODE",
						  OFFR_HIST."OFFER_TYPE",
						  OFFR_HIST."OFH_SEQ_NO",
						  OFFR_HIST."PRODUCT_TYPE",
						  OFFR_HIST."REFERENCE_EFFECTIVE_DT",
						  OFFR_HIST."REFERENCE_EXPIRY_DT",
						  OFFR_HIST."SUBSCRIBER_NO",
						  ::SQL_ERROR_CODE,
			              ::SQL_ERROR_MESSAGE,
			              LV_CUR_UTC);					 
	
		  	LV_ERROR_FLAG := 'Y';
		  	LV_LOOP_ERROR_FLAG = 1;
		  	
       
      END;    
          -- FOR CLEARING THE VARIABLES

	IF ((LV_PREV_RECORD IS NULL ) OR (OFFR_HIST."CONCAT_PK" != LV_PREV_RECORD)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "OFFR_HIST"."CONCAT_PK";
					 	   
    END IF;
    
   
    --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF OFFR_HIST.ERROR_STATUS = '1'  THEN
	
	
	 --  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(OFFR_HIST."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
         -- Insert into the Error Table
            INSERT INTO  "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_HIST_EH"(
						 "BAN",
						 "EFFECTIVE_DATE",
						 "EXPIRATION_DATE",
						 "ODS_SYST_CD",
						 "OFFER_CODE",
						 "OFFER_TYPE",
						 "OFH_SEQ_NO",
						 "PRODUCT_TYPE",
						 "REFERENCE_EFFECTIVE_DT",
						 "REFERENCE_EXPIRY_DT",
						 "SUBSCRIBER_NO",
						 "INSRT_TS",
						 "ERROR_CODE",
						 "ERROR_CREATE_TS")
				 VALUES  (OFFR_HIST."BAN",
						  OFFR_HIST."EFFECTIVE_DATE",
						  OFFR_HIST."EXPIRATION_DATE",
						  OFFR_HIST."ODS_SYST_CD",
						  OFFR_HIST."OFFER_CODE",
						  OFFR_HIST."OFFER_TYPE",
						  OFFR_HIST."OFH_SEQ_NO",
						  OFFR_HIST."PRODUCT_TYPE",
						  OFFR_HIST."REFERENCE_EFFECTIVE_DT",
						  OFFR_HIST."REFERENCE_EXPIRY_DT",
						  OFFR_HIST."SUBSCRIBER_NO",
						  LV_CUR_UTC,
						  :CURRENT_ERROR,
			              LV_CUR_UTC);
			              
	END FOR;
	
	    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
	    
    
    ELSE 
         IF OFFR_HIST.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
             -- Insert into the Error Table	
             INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_HIST_EH"(
						 "BAN",
						 "EFFECTIVE_DATE",
						 "EXPIRATION_DATE",
						 "ODS_SYST_CD",
						 "OFFER_CODE",
						 "OFFER_TYPE",
						 "OFH_SEQ_NO",
						 "PRODUCT_TYPE",
						 "REFERENCE_EFFECTIVE_DT",
						 "REFERENCE_EXPIRY_DT",
						 "SUBSCRIBER_NO",
						 "INSRT_TS",
						 "ERROR_CODE",
						 "ERROR_CREATE_TS")
				 VALUES  (OFFR_HIST."BAN",
						  OFFR_HIST."EFFECTIVE_DATE",
						  OFFR_HIST."EXPIRATION_DATE",
						  OFFR_HIST."ODS_SYST_CD",
						  OFFR_HIST."OFFER_CODE",
						  OFFR_HIST."OFFER_TYPE",
						  OFFR_HIST."OFH_SEQ_NO",
						  OFFR_HIST."PRODUCT_TYPE",
						  OFFR_HIST."REFERENCE_EFFECTIVE_DT",
						  OFFR_HIST."REFERENCE_EXPIRY_DT",
						  OFFR_HIST."SUBSCRIBER_NO",
						  LV_CUR_UTC,
						  'PREVIOUS VERSION IN ERROR',
			              LV_CUR_UTC);
			              
	 ELSE		                            
       --   If Record exists in the Target NDB Table
      IF OFFR_HIST.FLAG_EXISTING_RECORD = 'U' THEN
     
		BEGIN AUTONOMOUS TRANSACTION
	        
	--      Update the target NDB table
		    UPDATE  "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_HIST" NDB 
		   		SET  NDB.REFERENCE_EXPIRY_DT = OFFR_HIST.EFFECTIVE_DATE_PREV_DAY,
		 		     NDB."MODIFIED_TS"       = LV_CUR_UTC
		       WHERE NDB."OFFER_CODE"        = OFFR_HIST."OFFER_CODE"
	             AND NDB."PRODUCT_TYPE"      = OFFR_HIST."PRODUCT_TYPE"
	             AND NDB."SUBSCRIBER_NO"     = OFFR_HIST."SUBSCRIBER_NO"
	             AND NDB."OFH_SEQ_NO"        = OFFR_HIST."OFH_SEQ_NO"
	             AND NDB."BAN"               = OFFR_HIST."BAN"          
			     AND NDB.REFERENCE_EXPIRY_DT = '99991231';
			     
	--      Insert the Incoming new record
	        INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_HIST"( 
						"ODS_SYST_CD",
						"OFFER_CODE",
						"BAN",
						"OFH_SEQ_NO",
						"SUBSCRIBER_NO",
						"EFFECTIVE_DATE",
						"EXPIRATION_DATE",
						"PRODUCT_TYPE",
						"OFFER_TYPE",
						"REFERENCE_EFFECTIVE_DT",
						"REFERENCE_EXPIRY_DT",
						"INSRT_TS")
	             VALUES (OFFR_HIST."ODS_SYST_CD",
						 OFFR_HIST."OFFER_CODE",
						 OFFR_HIST."BAN",
						 OFFR_HIST."OFH_SEQ_NO",
						 OFFR_HIST."SUBSCRIBER_NO",
						 OFFR_HIST."EFFECTIVE_DATE",
						 OFFR_HIST."EXPIRATION_DATE",
						 OFFR_HIST."PRODUCT_TYPE",
						 OFFR_HIST."OFFER_TYPE",
						 OFFR_HIST."REFERENCE_EFFECTIVE_DT",
						 OFFR_HIST."REFERENCE_EXPIRY_DT",
						 LV_CUR_UTC);		
						 
		END;				 
						 
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	
		   INSERT INTO #UPDATE_INT_OFFR_HIST
					   (OFFER_CODE, 
					    BAN, 
					   	SUBSCRIBER_NO,
					   	PRODUCT_TYPE,
					   	EFF_DT) 
			    VALUES (OFFR_HIST."OFFER_CODE", 
				 		OFFR_HIST."BAN", 
					   	OFFR_HIST."SUBSCRIBER_NO",
					   	OFFR_HIST."PRODUCT_TYPE",
					   	OFFR_HIST.REFERENCE_EFFECTIVE_DT);
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   (OFFER_CODE, 
					    BAN, 
					   	OFH_SEQ_NO,
					   	SUBSCRIBER_NO,
					   	PRODUCT_TYPE,
					   	REFERENCE_EFFECTIVE_DT) 
			    VALUES (OFFR_HIST."OFFER_CODE", 
				 		OFFR_HIST."BAN", 
					   	OFFR_HIST."OFH_SEQ_NO",
					   	OFFR_HIST."SUBSCRIBER_NO",
					   	OFFR_HIST."PRODUCT_TYPE",
					   	OFFR_HIST.REFERENCE_EFFECTIVE_DT);	   	
					   	 

    ELSEIF OFFR_HIST.FLAG_EXISTING_RECORD = 'I' THEN 
    
      BEGIN AUTONOMOUS TRANSACTION
	--    Insert Records into the target NDB table
	      INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_HIST"( 
					  "ODS_SYST_CD",
					  "OFFER_CODE",
					  "BAN",
					  "OFH_SEQ_NO",
					  "SUBSCRIBER_NO",
					  "EFFECTIVE_DATE",
					  "EXPIRATION_DATE",
					  "PRODUCT_TYPE",
					  "OFFER_TYPE",
					  "REFERENCE_EFFECTIVE_DT",
					  "REFERENCE_EXPIRY_DT",
					  "INSRT_TS")
	           VALUES (OFFR_HIST."ODS_SYST_CD",
					   OFFR_HIST."OFFER_CODE",
					   OFFR_HIST."BAN",
					   OFFR_HIST."OFH_SEQ_NO",
					   OFFR_HIST."SUBSCRIBER_NO",
					   OFFR_HIST."EFFECTIVE_DATE",
					   OFFR_HIST."EXPIRATION_DATE",
					   OFFR_HIST."PRODUCT_TYPE",
					   OFFR_HIST."OFFER_TYPE",
					   OFFR_HIST."REFERENCE_EFFECTIVE_DT",
					   OFFR_HIST."REFERENCE_EXPIRY_DT",
					   LV_CUR_UTC);
					   
		END;			   						 
							 
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	 
		   INSERT INTO #UPDATE_INT_OFFR_HIST
					   (OFFER_CODE, 
					    BAN, 
					   	SUBSCRIBER_NO,
					   	PRODUCT_TYPE,
					   	EFF_DT) 
			    VALUES (OFFR_HIST."OFFER_CODE", 
				 		OFFR_HIST."BAN", 
					   	OFFR_HIST."SUBSCRIBER_NO",
					   	OFFR_HIST."PRODUCT_TYPE",
					   	OFFR_HIST.REFERENCE_EFFECTIVE_DT);
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   (OFFER_CODE, 
					    BAN, 
					   	OFH_SEQ_NO,
					   	SUBSCRIBER_NO,
					   	PRODUCT_TYPE,
					   	REFERENCE_EFFECTIVE_DT) 
			    VALUES (OFFR_HIST."OFFER_CODE", 
				 		OFFR_HIST."BAN", 
					   	OFFR_HIST."OFH_SEQ_NO",
					   	OFFR_HIST."SUBSCRIBER_NO",
					   	OFFR_HIST."PRODUCT_TYPE",
					   	OFFR_HIST.REFERENCE_EFFECTIVE_DT);	   	

        END IF;

      END IF;
    
    END IF;
  
  END IF;      

END FOR;					   			    

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::INT_OFFR_HIST
UPDATE "LAND"."IFRS_R1.LAND::INT_OFFR_HIST" A
  FROM "LAND"."IFRS_R1.LAND::INT_OFFR_HIST" A 
 INNER JOIN #UPDATE_INT_OFFR_HIST B 
    ON A."OFFER_CODE"     = B."OFFER_CODE"
   AND A."BAN"            = B."BAN"
   AND A.SUBSCRIBER_NO    = B.SUBSCRIBER_NO
   AND A.PRODUCT_TYPE     = B.PRODUCT_TYPE
   AND A.EFF_DT           = B.EFF_DT
   SET NDB_TS             = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_HIST_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_HIST_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."OFFER_CODE"                   = B."OFFER_CODE"
   AND A."BAN"                          = B."BAN"
   AND A.SUBSCRIBER_NO                  = B.SUBSCRIBER_NO
   AND A.PRODUCT_TYPE                   = B.PRODUCT_TYPE
   AND A.REFERENCE_EFFECTIVE_DT         = B.REFERENCE_EFFECTIVE_DT
   SET (DELETE_DATE, DELETED)           = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE
 
  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;
