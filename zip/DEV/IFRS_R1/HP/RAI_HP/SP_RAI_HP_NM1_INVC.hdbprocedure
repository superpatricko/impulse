PROCEDURE "RAI_HP"."IFRS_R1.HP.RAI_HP::SP_RAI_HP_NM1_INVC"
(IN IP_DATE DATE,
IN IP_BAN NVARCHAR(1000),
OUT OP_STATUS NVARCHAR(1000)) 
    LANGUAGE SQLSCRIPT 
    SQL SECURITY INVOKER 
    AS

BEGIN
----------------------------------------------------------------------------------------------------
-- Procedure Title : IFRS_R1.HP.RAI_HP::SP_RAI_HP_NM1_INVC
-- Created By      : BC_EY99601(Alagar)    
-- Date            : 08/04/2017

-- Description     : This Procedure will create the RAI order Items and invoice items based on 
--	                 HP NM1 NDB order data and HP NM1 NDB billing data
--                   If the Batch ID is blank in the NDB billing, then it will create 
--                   Invoice RAI item .
--                   Contract is created based on billing
--                   Billing item with adjustments, overages services will be added as seperate POBs in the contract 
--                   which is created for the Base services and the equipments   
--                   if the contracts gets modified in between the billing cycle, the SSP and TP for the contract
--                   modifiction will be calculated based on the pro-rated.

                           
--                   This Procedure has one parameter:
--                   1. The  OP_STATUS parametere : This parameter give the status of the Procedure whether it is 
--                   success or failure

--                   HP_NM1_INVC_MAIN_EH and HP_NM1_INVC_COND_EH Table : Will be used to trace the errors/exceptions

--                   FREQUENCY OF PROCEDURE EXECUTION: Daily

-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
-- M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
 
----------------------------------------------------------------------------------------------------
--11/07/2017    BC_EZ18725        Modified in NDB INVC table update section as part of defect#2536 to handle NULL SOC
--08/08/2017    BC_EZ23103        CR 283 - Update to process the records based on input parameter as IP_BAN
----------------------------------------------------------------------------------------------------
-- Description Of the changes 
----------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>        
----------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

	DECLARE LV_BATCH_ID           NVARCHAR(10);
	DECLARE LV_ORDR_MAIN_COUNT    INTEGER;
	DECLARE LV_ORDR_COND_COUNT    INTEGER;
	DECLARE LV_INVC_MAIN_COUNT    INTEGER;
	DECLARE LV_INVC_COND_COUNT    INTEGER;
	DECLARE LV_CUR_UTC            TIMESTAMP := CURRENT_TIMESTAMP;
	--DECLARE LV_CUR_UTC_TIME       DECIMAL(15,2) 
	--                              := TO_DECIMAL(TO_CHAR(CURRENT_UTCTIMESTAMP,'YYYYMMDDHHMISS'),15,2);
	DECLARE LV_CUR_DATE           DATE := CURRENT_DATE;
	DECLARE CURRENT_ERROR		  NVARCHAR(100);	
	DECLARE ERROR_TAB 			  TABLE (ERROR_CODE NVARCHAR(100));
	DECLARE RECORD_COUNT		  INTEGER;
	DECLARE i					  INTEGER;
	DECLARE IP_BAN_LIST           NVARCHAR(1000);
--------------------------------------------------------------------------------------------------
--  Global Constants Declaration
--------------------------------------------------------------------------------------------------
	DECLARE LV_ERROR_FLAG 		  NVARCHAR(1) := 'N';
	DECLARE LC_SQL_ERROR          NVARCHAR(40) DEFAULT 'SQL_EXCEPTION : SIBLING ERROR'; 
	DECLARE LC_ERROR_TEXT         NVARCHAR(120) 
	DEFAULT 'OUT STATUS IS 1 : PROCEDURE IFRS_R1.HP.RAI_HP::SP_RAI_HP_NM1_INVC INSERT EXECUTION FAILED';
	
	DECLARE LC_SUCCESS_TEXT       NVARCHAR(120)
	DEFAULT 'OUT STATUS IS 0 : PROCEDURE IFRS_R1.HP.RAI_HP::SP_RAI_HP_NM1_INVC EXECUTION SUCCESSFULL';
	
--------------------------------------------------------------------------------------------------
--  Creating Temporary table to hold Order records
--------------------------------------------------------------------------------------------------
    TEMP_RAI_TABLE_ORDR_TEMP = 
                 SELECT  "BAN",
						 "SUBSCRIBER_NO",
						 "SOC",
						 "FEATURE_CODE",
						 "PRD_CVRG_STRT_DATE",
						 "PRD_CVRG_END_DATE",
						 "AMOUNT",
						 "CC_REF_ID",
						 "SRCDOC_COMP",
						 "SRCDOC_LOGSYS",
						 "SRCDOC_TYPE",
						 "REFERENCE_TYPE",
						 "BUKRS",
						 "WAERS",
						 "RECEIV_ACCOUNT",
						 "KUNNR_SID",
						 "CC_RAI_ITEM_ID",
						 "CC_SRCDOC_ID",
						 "CC_ZZ_BRANDACT",
						 "CC_ZZBILLER",
						 "CC_ZZBUVIEW",
						 "CC_ZZ_TXJCD",
						 "CC_ZZ_BKTXT",
						 "CC_ZZ_XBLNR",
						 "GL_ACCOUNT_NUMBER",
						 "CC_PL_ACCOUNT",
						 "CC_ZZ_MWSKZ",
						 "CC_ZZ_AUFNR",
						 "CC_ZZ_ZUONR",
						 "CC_ZZ_ICHKONT",
						 "CC_ZZ_KOSTL",
						 "CC_ZZ_SGTXT",
						 "CC_ZZ_LEGACY",
						 "CC_ZZ_BUKRS",
						 "CC_ZZ_VBUND",
						 "JOURNALIZATION_DATE",
						 "GL_JURISDICTION_CODE",
						 "CC_GL_ACCOUNT_NUMBER",
						 "CC_ZZ_PAOBJNR",
						 "CC_ZZ_ADJ_RSN_CD",
						 "ENTITY_SEQ_NO",
						 "CC_HEADER",
						 "CC_XNEGATIVE",
						 "CHARGE_TYPE",
						 "POB_TYPE",
						 "VALUE_RELEVANT",
						 "ERROR_CODE",
						 "ERROR_STATUS",
						 "CC_LC_SSP",
						 "CC_LC_TP",
						 "CC_MAIN_COND_TYPE",
						 "CC_CATEGORY",
						 "CC_BILREL",
						 "CC_QUANTITY",
						 "CC_QUANTITY_UNIT",
						 "BAN_RIGHT",
						 "TRANSACTION_TYPE",
						 "CR_DR_IND",
						 "CC_SIBLING_ERROR" ,
						 to_decimal(to_char("JOURNALIZATION_DATE",'YYYYMMDD')||substr(to_char(current_timestamp,'YYYYMMDDHHMISS'),9,6),15,0) "JRNL_DT"				 
						FROM "_SYS_BIC"."IFRS_R1.HP.RAI_HP/CA_HP_NM1_INVC_ORDR_SIBLING_CHECK"
						(PLACEHOLDER."$$IP_BILL_DATE$$" => :IP_DATE);
                 
--------------------------------------------------------------------------------------------------
--  Creating Temporary table to hold Invoice records
--------------------------------------------------------------------------------------------------
   TEMP_RAI_TABLE_INVC_TEMP = 
				 SELECT  "AMOUNT",
						 "SOC",
						 "FEATURE_CODE",
						 "PRD_CVRG_STRT_DATE",
						 "PRD_CVRG_END_DATE",
						 "CHARGE_TYPE",
						 "BATCH_ID",
						 "EFFECTIVE_DATE",
						 "BUKRS",
						 "WAERS",
						 "ADJ_REASON_CODE",
						 "ACTV_RSN_CODE",
						 "ACTV_CODE",
						 "KUNNR_SID",
						 "CC_JOIN",
						 "CC_REFID",
						 "CC_LOB",
						 "ORIGDOC_LOGSYS",
						 "ORIGDOC_TYPE",
						 "ORIGDOC_COMP",
						 "SRCDOC_TYPE",
						 "SRCDOC_LOGSYS",
						 "SRCDOC_COMP",
						 "CC_SRCDOC_TMP",
						 "SUBSCRIBER_NO",
						 "BAN",
						 "CC_ZZ_BRANDACT",
						 "CC_ZZBILLER",
						 "CC_ZZBUVIEW",
						 "CC_ZZ_TXJCD",
						 "CC_ZZ_BKTXT",
						 "CC_ZZ_XBLNR",
						 "CC_PL_ACCOUNT",
						 "CC_ZZ_MWSKZ",
						 "CC_ZZ_AUFNR",
						 "CC_ZZ_ZUONR",
						 "CC_ZZ_ICHKONT",
						 "CC_ZZ_KOSTL",
						 "CC_ZZ_SGTXT",
						 "CC_ZZ_LEGACY",
						 "CC_ZZ_BUKRS",
						 "CC_ZZ_BLDAT",
						 "CC_ZZ_BUDAT",
						 "CC_ZZ_VBUND",
						 "GL_JURISDICTION_CODE",
						 "GL_ACCOUNT_NUMBER",
						 "JOURNALIZATION_DATE",
						 "SRCDOC_ID_INVC_ORDR",
						 "ENTITY_SEQ_NO",
						 --"RAI_ITEM_ID_ORDER",
						 "RAI_ITEM_ID_INVC_ORDER",
						 "CC_RAI_ITEM_ID",
						 "CC_SRCDOCID",
						 "CC_ORIGDOCID",
						 "ERROR_STATUS",
						 "ERROR_CODE",
						 "CC_QUANTITY",
						 "CC_QUANTITY_UNIT",
						 "CC_QUANTITY_REL",
						 "CC_EXCHANGE_RATE",
						 "CC_CATEGORY",
						 "CC_MAIN_COND_TYPE",
						 "CC_FINAL_INVOICE",
						 "CC_LC_SSP",
						 "CC_LC_TP",
						 "CC_INVOICE_TYPE",
						 "TRANSACTION_TYPE",
						 "CR_DR_IND",
						 "CC_SIBLING_CHECK",
						  to_decimal(to_char("JOURNALIZATION_DATE",'YYYYMMDD')||substr(to_char(current_timestamp,'YYYYMMDDHHMISS'),9,6),15,0) "JRNL_DT",
						  "HP_NM1_BILLING_PK"
		            FROM "_SYS_BIC"."IFRS_R1.HP.RAI_HP/CA_HP_NM1_INVC_SIBLING_CHECK"
		            (PLACEHOLDER."$$IP_BILL_DATE$$" => :IP_DATE);

     --------------------------------------------------------------------------------------------------
--      FILTER BANs as per CR_283
--------------------------------------------------------------------------------------------------	                
	IF IP_BAN IS NULL THEN
	 	IP_BAN_LIST := '1=1';
	ELSE
	 IP_BAN_LIST := 'BAN IN('||:IP_BAN||')';
	END IF;
	
	TEMP_RAI_TABLE_ORDR = APPLY_FILTER (:TEMP_RAI_TABLE_ORDR_TEMP,:IP_BAN_LIST);	     
	TEMP_RAI_TABLE_INVC = APPLY_FILTER (:TEMP_RAI_TABLE_INVC_TEMP,:IP_BAN_LIST);	          
			 
	BEGIN
	-------------------------------------------------------------------------------------------------
	-- Cursors Declaration for Invoice Order
	--------------------------------------------------------------------------------------------------	
		DECLARE CURSOR C_RAI_ORDR
		    FOR SELECT * 
		          FROM :TEMP_RAI_TABLE_ORDR;
		
		DECLARE CURSOR C_PARENT_RAI_ORDR 
		    FOR SELECT "CC_REF_ID" 
		          FROM :TEMP_RAI_TABLE_ORDR	    
		         WHERE "CC_SIBLING_ERROR" = '0' 
		           AND "ERROR_STATUS" = '0' 
		      GROUP BY "CC_REF_ID";
	--------------------------------------------------------------------------------------------------
	-- Cursors Declaration for Invoice
	--------------------------------------------------------------------------------------------------
	
		DECLARE CURSOR C_RAI_INVC 
		    FOR SELECT * 
		          FROM :TEMP_RAI_TABLE_INVC;
	
		DECLARE CURSOR C_PARENT_RAI_INVC  
		    FOR SELECT "BAN" 
		          FROM :TEMP_RAI_TABLE_INVC	    
		         WHERE "CC_SIBLING_CHECK" = '0' 
		           OR "ERROR_STATUS" = '0'
		      GROUP BY "BAN";
		           		     
/* Create a Batch ID for RAI processing*/ 
	
		SELECT "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::RAI_BATCH_ID".NEXTVAL 
		  INTO LV_BATCH_ID 
		  FROM DUMMY;	 
		  
		 	 
--------------------------------------------------------------------------------------------------
--      Declaring Local tables
--------------------------------------------------------------------------------------------------
		
		CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_MAIN (SRCDOC_ID NVARCHAR(35));
		
		CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_COND (SRCDOC_ID NVARCHAR(35));
			
--------------------------------------------------------------------------------------------------
--      Order Cursors Loop
-------------------------------------------------------------------------------------------------- 
	
	    FOR CUR_ORDER AS C_RAI_ORDR DO
	
--        Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION 
	
--          Define Exit Handler
			DECLARE EXIT HANDLER FOR SQLEXCEPTION 
			BEGIN AUTONOMOUS TRANSACTION	
			
--            Do Nothing. Exception Handled to ensure SP does not get terminated			 			     
		    END;
		    
--          Insert record into HP NM1 ORDER main error table    		                      
		    INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_MAIN_EH"(
		                "SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"HWAER",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP", 
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
						"ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
			    VALUES (CUR_ORDER."SRCDOC_COMP",
						CUR_ORDER."SRCDOC_LOGSYS",
						CUR_ORDER."SRCDOC_TYPE",
						CUR_ORDER."CC_SRCDOC_ID",
						CUR_ORDER."JRNL_DT",
						CUR_ORDER."CC_HEADER",
						CUR_ORDER."CC_RAI_ITEM_ID",
						CUR_ORDER."REFERENCE_TYPE",
						CUR_ORDER."CC_REF_ID",
						CUR_ORDER."KUNNR_SID",
						CUR_ORDER."BUKRS",
						CUR_ORDER."WAERS",
						CUR_ORDER."WAERS",
						CUR_ORDER."CC_QUANTITY",
						CUR_ORDER."CC_QUANTITY_UNIT",
						CUR_ORDER."CC_BILREL",
						CUR_ORDER. "PRD_CVRG_STRT_DATE",
						CUR_ORDER."PRD_CVRG_END_DATE",
						CUR_ORDER."RECEIV_ACCOUNT", 
						CUR_ORDER. "PRD_CVRG_STRT_DATE",
						CUR_ORDER."CC_ZZ_AUFNR",
						:LV_BATCH_ID,
						CUR_ORDER."CC_ZZBILLER",
						CUR_ORDER."CC_ZZ_BKTXT",
						CUR_ORDER."CC_ZZ_BRANDACT",
						CUR_ORDER."CC_ZZ_BUKRS",
						CUR_ORDER."CC_ZZBUVIEW",
						CUR_ORDER."CC_ZZ_KOSTL",
						CUR_ORDER."CC_ZZ_LEGACY",
						CUR_ORDER."CHARGE_TYPE",
						CUR_ORDER."POB_TYPE",
						CUR_ORDER."CC_ZZ_MWSKZ",
						CUR_ORDER."CC_ZZ_PAOBJNR",
						CUR_ORDER."CC_ZZ_SGTXT",
						CUR_ORDER."CC_ZZ_TXJCD",
						CUR_ORDER."CC_ZZ_VBUND",
						CUR_ORDER."CC_ZZ_XBLNR",
						CUR_ORDER."CC_ZZ_ZUONR",
						CUR_ORDER."VALUE_RELEVANT",
						::SQL_ERROR_CODE,
						::SQL_ERROR_MESSAGE,
						:LV_CUR_UTC);								
						         
--   	    Insert record into ORDER Condition error table for SSP(Standalone Selling Price)           
			INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_COND_EH"(
				     	"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"WAERS",						
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				VALUES (CUR_ORDER."SRCDOC_COMP",
					    CUR_ORDER."SRCDOC_LOGSYS",
					    CUR_ORDER."SRCDOC_TYPE",
					    CUR_ORDER."CC_SRCDOC_ID",
					    CUR_ORDER."JRNL_DT",--:LV_CUR_UTC_TIME,
					    CUR_ORDER."CC_LC_SSP",
					    CUR_ORDER."CC_PL_ACCOUNT",
					    CUR_ORDER."AMOUNT",  
					    CUR_ORDER."WAERS",
					    CUR_ORDER."CC_CATEGORY",
					    CUR_ORDER."CC_MAIN_COND_TYPE",
					    ::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
					    :LV_CUR_UTC);
					        
--          Insert into Order Condition Table for TP(Transaction Selling Price) */
			INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_COND_EH"(
			       	    "SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"WAERS",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				VALUES(	CUR_ORDER."SRCDOC_COMP",
						CUR_ORDER."SRCDOC_LOGSYS",
						CUR_ORDER."SRCDOC_TYPE",
						CUR_ORDER."CC_SRCDOC_ID",
						CUR_ORDER."JRNL_DT",--:LV_CUR_UTC_TIME,
						CUR_ORDER."CC_LC_TP",
						CUR_ORDER."CC_PL_ACCOUNT",
						CUR_ORDER."AMOUNT",  
						CUR_ORDER."WAERS",
						CUR_ORDER."CC_CATEGORY",
						CUR_ORDER."CC_MAIN_COND_TYPE",
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
					    :LV_CUR_UTC);
        
	        LV_ERROR_FLAG := 'Y';
			
	    END;		
			                 			 				 
--      Check the Error Status of the Record. If Record is with Error, then send to Error Table
		IF CUR_ORDER.CC_SIBLING_ERROR ='1'
	    OR CUR_ORDER.ERROR_STATUS = '1'
	    THEN
		
--    	    Call the Stored Procedure to split the concatenated Error Messages into Error Rows
			CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_ORDER."ERROR_CODE", 
																		   ERROR_TAB, 
				                                                           RECORD_COUNT);
	
--          Loop through the Error Records
			FOR i IN 1 .. :RECORD_COUNT DO
				
--      	    Fetch the Error Code
				CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
				
-- 	            All erroneous records are inserted into Order Main EH table 
	            INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_MAIN_EH"(
		                  	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"HWAER",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP", 
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT",
							"ERROR_CODE",
							"ERROR_CREATE_TS")
		            VALUES(	CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							CUR_ORDER."JRNL_DT",--:LV_CUR_UTC_TIME,
							CUR_ORDER."CC_HEADER",
							CUR_ORDER."CC_RAI_ITEM_ID",
							CUR_ORDER."REFERENCE_TYPE",
							CUR_ORDER."CC_REF_ID",
							CUR_ORDER."KUNNR_SID",
							CUR_ORDER."BUKRS",
							CUR_ORDER."WAERS",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_QUANTITY",
							CUR_ORDER."CC_QUANTITY_UNIT",
							CUR_ORDER."CC_BILREL",
							CUR_ORDER. "PRD_CVRG_STRT_DATE",
							CUR_ORDER."PRD_CVRG_END_DATE",
							CUR_ORDER."RECEIV_ACCOUNT", 
							CUR_ORDER. "PRD_CVRG_STRT_DATE",
							CUR_ORDER."CC_ZZ_AUFNR",
							:LV_BATCH_ID,
							CUR_ORDER."CC_ZZBILLER",
							CUR_ORDER."CC_ZZ_BKTXT",
							CUR_ORDER."CC_ZZ_BRANDACT",
							CUR_ORDER."CC_ZZ_BUKRS",
							CUR_ORDER."CC_ZZBUVIEW",
							CUR_ORDER."CC_ZZ_KOSTL",
							CUR_ORDER."CC_ZZ_LEGACY",
							CUR_ORDER."CHARGE_TYPE",
							CUR_ORDER."POB_TYPE",
							CUR_ORDER."CC_ZZ_MWSKZ",
							CUR_ORDER."CC_ZZ_PAOBJNR",
							CUR_ORDER."CC_ZZ_SGTXT",
							CUR_ORDER."CC_ZZ_TXJCD",
							CUR_ORDER."CC_ZZ_VBUND",
							CUR_ORDER."CC_ZZ_XBLNR",
							CUR_ORDER."CC_ZZ_ZUONR",
							CUR_ORDER."VALUE_RELEVANT",
							:CURRENT_ERROR,
							:LV_CUR_UTC);		         
	
--              Insert record into ORDER Condition error table for SSP(Standalone Selling Price)           
			    INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_COND_EH"(
				        	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",							
							"CATEGORY",
							"MAIN_COND_TYPE",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							CUR_ORDER."JRNL_DT",--:LV_CUR_UTC_TIME,
							CUR_ORDER."CC_LC_SSP",
							CUR_ORDER."CC_PL_ACCOUNT",
							CUR_ORDER."AMOUNT", 
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							:CURRENT_ERROR,
							:LV_CUR_UTC);
				       
--              Insert into Order Condition Table for TP(Transaction Price) */
			    INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_COND_EH"(
				         	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",							
							"CATEGORY",
							"MAIN_COND_TYPE",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")		
					VALUES( CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							CUR_ORDER."JRNL_DT",--:LV_CUR_UTC_TIME,
							CUR_ORDER."CC_LC_TP",
							CUR_ORDER."CC_PL_ACCOUNT",
							CUR_ORDER."AMOUNT",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							:CURRENT_ERROR,
						    LV_CUR_UTC);
			       					
			END FOR;		       
--  	    Set Error Flag
				        
			LV_ERROR_FLAG := 'Y';
					
--          Processing for Successful Records
	    ELSEIF CUR_ORDER.CC_SIBLING_ERROR ='0'
	       AND CUR_ORDER.ERROR_STATUS = '0'
	    THEN
	    
	    	BEGIN AUTONOMOUS TRANSACTION
	   
--      	    All valid records are inserted into Order Main temporary table 
	            INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_MAIN_TT"(
		            	    "SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"HWAER",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_KOSTL",
					 		"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_SGTXT",
							"ZZ_TXJCD",					 
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT")
					VALUES(	CUR_ORDER."SRCDOC_COMP",  
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							CUR_ORDER."JRNL_DT",--:LV_CUR_UTC_TIME,
							CUR_ORDER."CC_HEADER",
							CUR_ORDER."CC_RAI_ITEM_ID",
							CUR_ORDER."REFERENCE_TYPE",
							CUR_ORDER."CC_REF_ID",
							CUR_ORDER."KUNNR_SID",
							CUR_ORDER."BUKRS",
							CUR_ORDER."WAERS",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_QUANTITY",
							CUR_ORDER."CC_QUANTITY_UNIT",
							CUR_ORDER."CC_BILREL",
							CUR_ORDER."PRD_CVRG_STRT_DATE",
							CUR_ORDER."PRD_CVRG_END_DATE",
							CUR_ORDER."RECEIV_ACCOUNT", 
							CUR_ORDER."PRD_CVRG_STRT_DATE",
							CUR_ORDER."CC_ZZ_AUFNR",
							:LV_BATCH_ID,
							CUR_ORDER."CC_ZZBILLER",
							CUR_ORDER."CC_ZZ_BKTXT",
							CUR_ORDER."CC_ZZ_BRANDACT",
							CUR_ORDER."CC_ZZ_BUKRS",
							CUR_ORDER."CC_ZZBUVIEW",
							CUR_ORDER."CC_ZZ_KOSTL",
							CUR_ORDER."CC_ZZ_LEGACY",
							CUR_ORDER."CHARGE_TYPE",
							CUR_ORDER."POB_TYPE",
							CUR_ORDER."CC_ZZ_MWSKZ",
							CUR_ORDER."CC_ZZ_PAOBJNR",
							CUR_ORDER."CC_ZZ_SGTXT",
							CUR_ORDER."CC_ZZ_TXJCD",
							CUR_ORDER."CC_ZZ_VBUND",
							CUR_ORDER."CC_ZZ_XBLNR",
							CUR_ORDER."CC_ZZ_ZUONR",
							CUR_ORDER."VALUE_RELEVANT");		         
	
	--          Insert record into ORDER Condition TEMPORARY table for SSP(Standalone Selling Price)           
			    INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_COND_TT"(
				          	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",							
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
					VALUES(	CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							CUR_ORDER."JRNL_DT",--:LV_CUR_UTC_TIME,
							CUR_ORDER."CC_LC_SSP",
							CUR_ORDER."CC_PL_ACCOUNT",
							CUR_ORDER."AMOUNT", 
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							:LV_BATCH_ID);
			       
--              Insert into Order Condition TEMPORARY Table for TP(Transaction Price) */
			    INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_COND_TT"(
				        	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
					   		"BATCH_ID")
					 VALUES(CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							CUR_ORDER."JRNL_DT",--:LV_CUR_UTC_TIME,
							CUR_ORDER."CC_LC_TP",
							CUR_ORDER."CC_PL_ACCOUNT",
							CUR_ORDER."AMOUNT", 
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							:LV_BATCH_ID);
			       		
		    END;
		    	 
		END IF;
		
	END FOR;		     		
	
		
	FOR CUR_PARENT AS C_PARENT_RAI_ORDR DO
	
--      Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
--        Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION 
		
--          Do Nothing. Exception Handled to ensure SP does not get terminated
	      
	      END;
--          Insert records into HP NM1 order Error tables
	      INSERT INTO   "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_MAIN_EH"(
	                    "SRCDOC_COMP",
					    "SRCDOC_LOGSYS",
					    "SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"HWAER",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
				    	"ZZ_ADJ_RSN_CD",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CONVERSION",
						"ZZ_ICHKONT",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE", 
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
					    "ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
			   SELECT	"SRCDOC_COMP",  
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"ZZ_BUKRS",
						"WAERS",
						"HWAER",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"RECEIV_ACCOUNT", 
						"START_DATE",
						"ZZ_ADJ_RSN_CD",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CONVERSION",
						"ZZ_ICHKONT",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
						::SQL_ERROR_CODE,
						::SQL_ERROR_MESSAGE,
						:LV_CUR_UTC						
				   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_MAIN_TT" 
				  WHERE "REFERENCE_ID" = CUR_PARENT."CC_REF_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
						    	 		         
	
--              Insert record into ORDER ConditiON Error table           
			    INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_COND_EH"(
				        	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
						    "ERROR_CODE",
						    "TECHNICAL_MESSAGE",
						    "ERROR_CREATE_TS"							)
					SELECT  "SRCDOC_COMP",
						    "SRCDOC_LOGSYS",
						    "SRCDOC_TYPE",
						    COND."SRCDOC_ID",
						    "TIMESTAMP_UTC",
						    "CONDITION_TYPE",
						    "PL_ACCOUNT",
						    "BETRW", 
						    "WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",							
						     ::SQL_ERROR_CODE,
						     ::SQL_ERROR_MESSAGE,
						     :LV_CUR_UTC
					   FROM (SELECT * 
					           FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_COND_TT" 
					          WHERE "BATCH_ID" = LV_BATCH_ID)COND,
					        (SELECT "SRCDOC_ID" 
					           FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_MAIN_TT"
					          WHERE "REFERENCE_ID"   = CUR_PARENT."CC_REF_ID"
					            AND "ZZ_BATCH_ID"     = LV_BATCH_ID ) MAIN
				     	  	  WHERE MAIN."SRCDOC_ID" = COND."SRCDOC_ID";
					  
  
		        LV_ERROR_FLAG := 'Y';
	    
	        END;
	 		
			SELECT COUNT("SRCDOC_ID") 
			  INTO LV_ORDR_MAIN_COUNT 
			  FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_MAIN_EH"
			 WHERE REFERENCE_ID = CUR_PARENT."CC_REF_ID"
			   AND "ZZ_BATCH_ID" = LV_BATCH_ID;
		 		    	 		
--          All valid records are inserted into HP NM1 Order Main table
			IF :LV_ORDR_MAIN_COUNT > 0 THEN
--          There's an error move all RAI MAIN to EH
--          Insert records into HP NM1 order Error tables
	            INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_MAIN_EH"(
		                	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"HWAER",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
					    	"ZZ_ADJ_RSN_CD",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CONVERSION",
							"ZZ_ICHKONT",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MINPRICE",
							"ZZ_MOD_TYPE", 
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT",
						    "ERROR_CODE",
						    "ERROR_CREATE_TS")
					SELECT	"SRCDOC_COMP",  
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"ZZ_BUKRS",
							"WAERS",
							"HWAER",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"RECEIV_ACCOUNT", 
							"START_DATE",
							"ZZ_ADJ_RSN_CD",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CONVERSION",
							"ZZ_ICHKONT",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MINPRICE",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT",
							LC_SQL_ERROR,
						    LV_CUR_UTC
					   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_MAIN_TT"					   
					  WHERE "REFERENCE_ID" = CUR_PARENT."CC_REF_ID"
						AND "ZZ_BATCH_ID"   = LV_BATCH_ID;	 		         
	
--              Insert record into ORDER Condition TEMPORARY table for SSP(Standalone Selling Price)           
			    INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_COND_EH"(
				        	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")
					SELECT  "SRCDOC_COMP",
						    "SRCDOC_LOGSYS",
						    "SRCDOC_TYPE",
						    COND."SRCDOC_ID",
						    "TIMESTAMP_UTC",
						    "CONDITION_TYPE",
						    "PL_ACCOUNT",
						    "BETRW", 
						    "WAERS",
						    "CATEGORY",
						    "MAIN_COND_TYPE",
							LC_SQL_ERROR,
						    LV_CUR_UTC						    
				       FROM (SELECT *
				               FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_COND_TT"
				              WHERE "BATCH_ID" = LV_BATCH_ID) COND,
				            (SELECT "SRCDOC_ID" FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_MAIN_TT"
				              WHERE "REFERENCE_ID" = CUR_PARENT."CC_REF_ID"
				                AND "ZZ_BATCH_ID" = LV_BATCH_ID ) MAIN
			     	  	      WHERE MAIN."SRCDOC_ID" = COND."SRCDOC_ID";	 		         	 
			     	  	
			     	   				  
--              Set Error Flag	
		        
				LV_ERROR_FLAG := 'Y';	 
			ELSEIF :LV_ORDR_MAIN_COUNT = 0
			  THEN
						  
			    BEGIN AUTONOMOUS TRANSACTION
--              Insert records into  order Error tables
	            	INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_MAIN"(
			            		"SRCDOC_COMP",
								"SRCDOC_LOGSYS",
								"SRCDOC_TYPE",
								"SRCDOC_ID",
								"TIMESTAMP_UTC",
								"HEADER_ID",
								"ITEM_ID",
								"REFERENCE_TYPE",
								"REFERENCE_ID",
								"KUNNR",
								"BUKRS",
								"WAERS",
								"HWAER",
								"QUANTITY",
								"QUANTITY_UNIT",
								"BILREL",
								"START_DATE",
								"END_DATE",
								"RECEIV_ACCOUNT",
								"INCEPTION_DATE",
						    	"ZZ_ADJ_RSN_CD",
								"ZZ_AUFNR",
								"ZZ_BATCH_ID",
								"ZZ_BILLER",
								"ZZ_BKTXT",
								"ZZ_BRANDACT",
								"ZZ_BUKRS",
								"ZZ_BU_VIEW",
								"ZZ_CONVERSION",
								"ZZ_ICHKONT",
								"ZZ_KOSTL",
								"ZZ_LEGACY",
								"ZZ_MATNR",
								"ZZ_MATNR_GRP",
								"ZZ_MINPRICE",
								"ZZ_MOD_TYPE", 
								"ZZ_MWSKZ",
								"ZZ_PAOBJNR",
								"ZZ_PRE_POST",
								"ZZ_SGTXT",
								"ZZ_TXJCD",
								"ZZ_UPFFLG",
								"ZZ_VBUND",
								"ZZ_XBLNR",
								"ZZ_ZUONR",
								"VALUE_RELEVANT")
					     SELECT "SRCDOC_COMP",  
								"SRCDOC_LOGSYS",
								"SRCDOC_TYPE",
								"SRCDOC_ID",
								"TIMESTAMP_UTC",
								"HEADER_ID",
								"ITEM_ID",
								"REFERENCE_TYPE",
								"REFERENCE_ID",
								"KUNNR",
								"ZZ_BUKRS",
								"WAERS",
								"HWAER",
								"QUANTITY",
								"QUANTITY_UNIT",
								"BILREL",
								"START_DATE",
								"END_DATE",
								"RECEIV_ACCOUNT", 
								"START_DATE",
								"ZZ_ADJ_RSN_CD",
								"ZZ_AUFNR",
								"ZZ_BATCH_ID",
								"ZZ_BILLER",
								"ZZ_BKTXT",
								"ZZ_BRANDACT",
								"ZZ_BUKRS",
								"ZZ_BU_VIEW",
								"ZZ_CONVERSION",
								"ZZ_ICHKONT",
								"ZZ_KOSTL",
								"ZZ_LEGACY",
								"ZZ_MATNR",
								"ZZ_MATNR_GRP",
								"ZZ_MINPRICE",
								"ZZ_MOD_TYPE",
								"ZZ_MWSKZ",
								"ZZ_PAOBJNR",
								"ZZ_PRE_POST",
								"ZZ_SGTXT",
								"ZZ_TXJCD",
								"ZZ_UPFFLG",
								"ZZ_VBUND",
								"ZZ_XBLNR",
								"ZZ_ZUONR",
								"VALUE_RELEVANT"
						   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_MAIN_TT" 
						  WHERE "REFERENCE_ID" = CUR_PARENT."CC_REF_ID"
						    AND "ZZ_BATCH_ID"   = LV_BATCH_ID;
	
--              	Insert record into ORDER Condition TEMPORARY table for SSP(Standalone Selling Price)           
			    	INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_COND"(
					    		"SRCDOC_COMP",
								"SRCDOC_LOGSYS",
								"SRCDOC_TYPE",
								"SRCDOC_ID",
								"TIMESTAMP_UTC",
								"CONDITION_TYPE",
								"PL_ACCOUNT",			
								"BETRW",
								"WAERS",
								"CATEGORY",
								"MAIN_COND_TYPE")
					     SELECT "SRCDOC_COMP",
							    "SRCDOC_LOGSYS",
							    "SRCDOC_TYPE",
							    COND."SRCDOC_ID",
							    "TIMESTAMP_UTC",
							    "CONDITION_TYPE",
							    "PL_ACCOUNT",
							    "BETRW", 
							    "WAERS",
							    "CATEGORY",
							    "MAIN_COND_TYPE"
				           FROM (SELECT * 
				                   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_COND_TT"
				                  WHERE "BATCH_ID" = LV_BATCH_ID) COND,
				                (SELECT "SRCDOC_ID"
				                   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_MAIN_TT"
				                  WHERE "REFERENCE_ID" = CUR_PARENT."CC_REF_ID"
				                    AND "ZZ_BATCH_ID" = LV_BATCH_ID ) MAIN
			     	  	          WHERE MAIN."SRCDOC_ID" = COND."SRCDOC_ID";	  		         	 
			     	  	 		         	 			       
	            END; -- END Autonomous transaction
	
	--      Insert PK of successfully processed Records into Local Temp Tables 
	--      for Updating the deleted flag in corresponding Error Tables records
				   		      
			INSERT INTO	#UPDATE_EH_DELETION_MAIN (SRCDOC_ID) 
				 SELECT "SRCDOC_ID" 
				   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_MAIN"
				  WHERE "REFERENCE_ID" = CUR_PARENT."CC_REF_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
			   		
			INSERT INTO	#UPDATE_EH_DELETION_COND (SRCDOC_ID) 
				 SELECT COND."SRCDOC_ID" 
				   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_COND" COND,
	                	(SELECT "SRCDOC_ID" 
	                	   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_ORDR_MAIN"
					  	  WHERE "REFERENCE_ID" = CUR_PARENT."CC_REF_ID") MAIN 
				  WHERE MAIN."SRCDOC_ID"=COND."SRCDOC_ID";
							          								        		     	  	 					    		 		     								          												 		   		        		   	   
	        END IF;
	  
	    END FOR;				
	
--      Update Order Main Error Table
		UPDATE "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_MAIN_EH" A
		  FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_MAIN_EH" A
		 INNER JOIN #UPDATE_EH_DELETION_MAIN B
		    ON A.SRCDOC_ID=B.SRCDOC_ID
		   SET DELETE_DATE 			= LV_CUR_DATE ,
	   		   DELETED 				= 1;
	
--      Update Order Cond Error Table
	    UPDATE "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_COND_EH" A
		  FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_COND_EH" A
		 INNER JOIN #UPDATE_EH_DELETION_COND B
			ON A.SRCDOC_ID=B.SRCDOC_ID
		   SET DELETE_DATE 			= LV_CUR_DATE ,
	   		   DELETED 				= 1;

-------------------------------------------------------------------------------------------			
--  INVOICE CREATION			
-------------------------------------------------------------------------------------------
		     	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_HP_NM1_INVC
		(	BAN                      NVARCHAR(16),
	        SRCDOC_ID                NVARCHAR(35),
	        REFERENCE_ID             NVARCHAR(30),
	        RAI_ITEM_ID              NVARCHAR(15),
	        ORIGDOC_ID               NVARCHAR(35),
		    BATCH_ID                 INTEGER,
		    HP_NM1_BILLING_PK	     NVARCHAR(1000)
		);
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_MAIN_INVC ( SRCDOC_ID NVARCHAR(35) );
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_COND_INVC ( SRCDOC_ID NVARCHAR(35) );
							       	
--------------------------------------------------------------------------------------------------
-- Invoice Cursors Loop
-------------------------------------------------------------------------------------------------- 
	
	FOR CUR_INVC AS C_RAI_INVC DO
	
--      Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
--	        Define Exit Handler
			DECLARE EXIT HANDLER FOR SQLEXCEPTION 
			BEGIN AUTONOMOUS TRANSACTION	
					 			 
		    END;
	    
--          Insert record into INVC main error table
	        INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_EH"(
		        	    "SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"HWAER",
						"QUANTITY",
						"QUANTITY_UNIT",
						"ORIGDOC_COMP",
						"ORIGDOC_LOGSYS",
						"ORIGDOC_TYPE",
						"ORIGDOC_ID",
						"DUE_DATE",
						"FINAL_INVOICE",						
						"EXCHANGE_RATE",
						"BLDAT",
						"ZZ_BATCH_ID",
						"ZZ_BKTXT",
						"ZZ_BUKRS",
						"ZZ_BLDAT",
						"ZZ_BUDAT",
						"ZZ_ICHKONT",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MWSKZ",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_ZUONR",
					    "ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS",
					    "POSTING_DATE",
					    "QUANTITY_REL")
				VALUES(	CUR_INVC."SRCDOC_COMP",
						CUR_INVC."SRCDOC_LOGSYS",
						CUR_INVC."SRCDOC_TYPE",
						CUR_INVC."CC_SRCDOCID",
						CUR_INVC."JRNL_DT",--:LV_CUR_UTC_TIME,
						CUR_INVC."BAN",
						CUR_INVC."CC_RAI_ITEM_ID",
						CUR_INVC."KUNNR_SID",
						CUR_INVC."CC_ZZ_BUKRS",
						CUR_INVC."WAERS",
						CUR_INVC."WAERS",
						CUR_INVC."CC_QUANTITY",
						CUR_INVC."CC_QUANTITY_UNIT",
						CUR_INVC."ORIGDOC_COMP",
						CUR_INVC."ORIGDOC_LOGSYS",
						CUR_INVC."ORIGDOC_TYPE",
						CUR_INVC."CC_ORIGDOCID",
						CUR_INVC."CC_ZZ_BUDAT",
						CUR_INVC."CC_FINAL_INVOICE",
						CUR_INVC."CC_EXCHANGE_RATE",
						CUR_INVC."CC_ZZ_BLDAT",
						:LV_BATCH_ID,
						CUR_INVC."CC_ZZ_BKTXT",
						CUR_INVC."CC_ZZ_BUKRS",
						CUR_INVC."CC_ZZ_BLDAT",
						CUR_INVC."CC_ZZ_BUDAT",
						CUR_INVC."CC_ZZ_ICHKONT",
						CUR_INVC."CC_ZZ_KOSTL",
						CUR_INVC."CC_ZZ_LEGACY",
						CUR_INVC."CC_ZZ_MWSKZ",
						CUR_INVC."CC_ZZ_SGTXT",
						CUR_INVC."CC_ZZ_TXJCD",
						CUR_INVC."CC_ZZ_ZUONR",
						::SQL_ERROR_CODE,
			            ::SQL_ERROR_MESSAGE,
			            :LV_CUR_UTC,
			            :LV_CUR_DATE,
			            CUR_INVC."CC_QUANTITY_REL");
	
--          Insert into Order Condition Table for TP(Transaction Price) */
	 		INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND_EH"(
		 		  	    "SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",
						"BETRW",
						"BETRH",
						"WAERS",
						"HWAER", 
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS")
				VALUES (CUR_INVC."SRCDOC_COMP",
						CUR_INVC."SRCDOC_LOGSYS",
						CUR_INVC."SRCDOC_TYPE",
						CUR_INVC."CC_SRCDOCID",
						CUR_INVC."JRNL_DT",--:LV_CUR_UTC_TIME,
						CUR_INVC."CC_LC_TP",
						CUR_INVC."CC_PL_ACCOUNT",
						CUR_INVC."AMOUNT",
						CUR_INVC."AMOUNT",  
						CUR_INVC."WAERS",
						CUR_INVC."WAERS", 
						CUR_INVC."CC_CATEGORY",
						CUR_INVC."CC_MAIN_COND_TYPE",
						::SQL_ERROR_CODE,
				    	::SQL_ERROR_MESSAGE,
				        :LV_CUR_UTC);

		    LV_ERROR_FLAG := 'Y';
	 
	    END;
	
--  	Check the Error Status of the Record. If Record is with Error, then send to Error Table
		IF CUR_INVC.CC_SIBLING_CHECK = '1' 
		OR CUR_INVC.ERROR_STATUS     = '1'  
		THEN
		
--  	Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"	( CUR_INVC."ERROR_CODE",
																		  ERROR_TAB, 
				                                                          RECORD_COUNT
				                                                         );
	
--  		Loop through the Error Records
			FOR i IN 1 .. :RECORD_COUNT DO
				
-- 	    		Fetch the Error Code
				CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];			
	  
--              All erroneous records are inserted into Invc Main EH table 
	            INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_EH"(
		               	    "SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"HWAER",
							"QUANTITY",
							"QUANTITY_UNIT",
							"ORIGDOC_COMP",
							"ORIGDOC_LOGSYS",
							"ORIGDOC_TYPE",
							"ORIGDOC_ID",
							"DUE_DATE",
							"FINAL_INVOICE",
							"EXCHANGE_RATE",
							"BLDAT",
							"ZZ_BATCH_ID",
							"ZZ_BUKRS",
							"ZZ_BKTXT",
							"ZZ_BLDAT",
							"ZZ_BUDAT",
							"ZZ_ICHKONT",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MWSKZ",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_ZUONR",
						    "ERROR_CODE",		    
						    "ERROR_CREATE_TS",
						    "POSTING_DATE",
						    "QUANTITY_REL"						    )		     
				    VALUES(	CUR_INVC."SRCDOC_COMP",
							CUR_INVC."SRCDOC_LOGSYS",
							CUR_INVC."SRCDOC_TYPE",
							CUR_INVC."CC_SRCDOCID",
							CUR_INVC."JRNL_DT",--:LV_CUR_UTC_TIME,
							CUR_INVC."BAN",
							CUR_INVC."CC_RAI_ITEM_ID",
							CUR_INVC."KUNNR_SID",
							CUR_INVC."CC_ZZ_BUKRS",
							CUR_INVC."WAERS",CUR_INVC."WAERS",
							CUR_INVC."CC_QUANTITY",
							CUR_INVC."CC_QUANTITY_UNIT",
							CUR_INVC."ORIGDOC_COMP",
							CUR_INVC."ORIGDOC_LOGSYS",
							CUR_INVC."ORIGDOC_TYPE",
							CUR_INVC."CC_ORIGDOCID",
							CUR_INVC."CC_ZZ_BUDAT",
							CUR_INVC."CC_FINAL_INVOICE",
							CUR_INVC."CC_EXCHANGE_RATE",
							CUR_INVC."CC_ZZ_BLDAT",
							:LV_BATCH_ID,
							CUR_INVC."CC_ZZ_BKTXT",
							CUR_INVC."CC_ZZ_BUKRS",
							CUR_INVC."CC_ZZ_BLDAT",
							CUR_INVC."CC_ZZ_BUDAT",
							CUR_INVC."CC_ZZ_ICHKONT",
							CUR_INVC."CC_ZZ_KOSTL",
							CUR_INVC."CC_ZZ_LEGACY",
							CUR_INVC."CC_ZZ_MWSKZ",
							CUR_INVC."CC_ZZ_SGTXT",
							CUR_INVC."CC_ZZ_TXJCD",
							CUR_INVC."CC_ZZ_ZUONR",
						    :CURRENT_ERROR,
				 			:LV_CUR_UTC,
				 			:LV_CUR_DATE,
				 			CUR_INVC."CC_QUANTITY_REL"			 			);
	
	--          Insert into Order Condition Table for TP(Transaction Price) */
	 		    INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND_EH"(
		 		        	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
							"BETRW",
							"BETRH",
							"WAERS",
							"HWAER", 
							"CATEGORY",
							"MAIN_COND_TYPE",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")
				    VALUES(	CUR_INVC."SRCDOC_COMP",
							CUR_INVC."SRCDOC_LOGSYS",
							CUR_INVC."SRCDOC_TYPE",
							CUR_INVC."CC_SRCDOCID",
							CUR_INVC."JRNL_DT",--:LV_CUR_UTC_TIME,
							CUR_INVC."CC_LC_TP",
							CUR_INVC."CC_PL_ACCOUNT",
							CUR_INVC."AMOUNT", 
							CUR_INVC."AMOUNT",  
							CUR_INVC."WAERS",
							CUR_INVC."WAERS", 
							CUR_INVC."CC_CATEGORY",
							CUR_INVC."CC_MAIN_COND_TYPE",
							:CURRENT_ERROR,
					        :LV_CUR_UTC);
	
--          	Set Error Flag	
				LV_ERROR_FLAG := 'Y';
				
			END FOR;		

--  Processing for Successful Records
	    ELSEIF CUR_INVC.CC_SIBLING_CHECK = '0'
		   AND CUR_INVC.ERROR_STATUS     = '0' 
		  THEN
	   
	   	    BEGIN AUTONOMOUS TRANSACTION
--      	All valid records are inserted into Invoice Main table
	        	INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_TT"(
		        		    "SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"HWAER",
							"QUANTITY",
							"QUANTITY_UNIT",
							"ORIGDOC_COMP",
							"ORIGDOC_LOGSYS",
							"ORIGDOC_TYPE",
							"ORIGDOC_ID",
							"DUE_DATE",
							"FINAL_INVOICE",
							"EXCHANGE_RATE",
							"BLDAT",
							"ZZ_BATCH_ID",
							"ZZ_BKTXT",
							"ZZ_BUKRS",
							"ZZ_BLDAT",
							"ZZ_BUDAT",
							"ZZ_ICHKONT",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MWSKZ",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_ZUONR",
							"POSTING_DATE",
							"QUANTITY_REL",
							"INVOICE_TYPE")	----- As pat of defect 2013		    
					VALUES(	CUR_INVC."SRCDOC_COMP",
							CUR_INVC."SRCDOC_LOGSYS",
							CUR_INVC."SRCDOC_TYPE",
							CUR_INVC."CC_SRCDOCID",
							CUR_INVC."JRNL_DT",--:LV_CUR_UTC_TIME,
							CUR_INVC."BAN",
							CUR_INVC."CC_RAI_ITEM_ID",
							CUR_INVC."KUNNR_SID",
							CUR_INVC."CC_ZZ_BUKRS",
							CUR_INVC."WAERS",CUR_INVC."WAERS",
							CUR_INVC."CC_QUANTITY",
							CUR_INVC."CC_QUANTITY_UNIT",
							CUR_INVC."ORIGDOC_COMP",
							CUR_INVC."ORIGDOC_LOGSYS",
							CUR_INVC."ORIGDOC_TYPE",
							CUR_INVC."CC_ORIGDOCID",
							CUR_INVC."CC_ZZ_BUDAT",
							CUR_INVC."CC_FINAL_INVOICE",
							CUR_INVC."CC_EXCHANGE_RATE",
							CUR_INVC."CC_ZZ_BLDAT",
							:LV_BATCH_ID,
							CUR_INVC."CC_ZZ_BKTXT",
							CUR_INVC."CC_ZZ_BUKRS",
							CUR_INVC."CC_ZZ_BLDAT",
							CUR_INVC."CC_ZZ_BUDAT",
							CUR_INVC."CC_ZZ_ICHKONT",
							CUR_INVC."CC_ZZ_KOSTL",
							CUR_INVC."CC_ZZ_LEGACY",
							CUR_INVC."CC_ZZ_MWSKZ",
							CUR_INVC."CC_ZZ_SGTXT",
							CUR_INVC."CC_ZZ_TXJCD",
							CUR_INVC."CC_ZZ_ZUONR",
							:LV_CUR_DATE,
							CUR_INVC."CC_QUANTITY_REL",
							CUR_INVC."CC_INVOICE_TYPE");
	
--              Insert into Order Condition Table for TP(Transaction Price) */
	 		    INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND_TT"(
		 		        	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
							"BETRW",
							"BETRH",
							"WAERS",
							"HWAER", 
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
				    VALUES(	CUR_INVC."SRCDOC_COMP",
							CUR_INVC."SRCDOC_LOGSYS",
							CUR_INVC."SRCDOC_TYPE",
							CUR_INVC."CC_SRCDOCID",
							CUR_INVC."JRNL_DT",--:LV_CUR_UTC_TIME,
							CUR_INVC."CC_LC_TP",
							CUR_INVC."CC_PL_ACCOUNT",
							CUR_INVC."AMOUNT", 
							CUR_INVC."AMOUNT", 
							CUR_INVC."WAERS",
							CUR_INVC."WAERS", 
							CUR_INVC."CC_CATEGORY",
							CUR_INVC."CC_MAIN_COND_TYPE",
							:LV_BATCH_ID);
			             
		    END;		           
			
		END IF;
		
	END FOR;	

	FOR CUR_PARENT_INVC AS C_PARENT_RAI_INVC DO
		
--      Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
--    	  Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION 
		
--          Do Nothing. Exception Handled to ensure SP does not get terminated
	      
	      END;

	 	    INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_EH"(
	 	    		    "SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"HWAER",
						"QUANTITY",
						"QUANTITY_UNIT",
						"ORIGDOC_COMP",
						"ORIGDOC_LOGSYS",
						"ORIGDOC_TYPE",
						"ORIGDOC_ID",
						"DUE_DATE",
						"FINAL_INVOICE",
						"EXCHANGE_RATE",
						"BLDAT",
						"ZZ_BATCH_ID",
						"ZZ_BKTXT",
						"ZZ_BUKRS",
						"ZZ_BLDAT",
						"ZZ_BUDAT",
						"ZZ_ICHKONT",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MWSKZ",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_ZUONR",
					    "ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS",
					    "POSTING_DATE",
					    "QUANTITY_REL"
					    )		    
				SELECT  "SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"KUNNR",
						"ZZ_BUKRS",
						"WAERS",
						"HWAER",
						"QUANTITY",
						"QUANTITY_UNIT",
						"ORIGDOC_COMP",
						"ORIGDOC_LOGSYS",
						"ORIGDOC_TYPE",
						"ORIGDOC_ID",
						"ZZ_BUDAT",
						"FINAL_INVOICE",
						"EXCHANGE_RATE",
						"ZZ_BLDAT",
						"ZZ_BATCH_ID",
						"ZZ_BKTXT",
						"ZZ_BUKRS",
						"ZZ_BLDAT",
					    "ZZ_BUDAT",
						"ZZ_ICHKONT",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MWSKZ",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_ZUONR",
	                    ::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
					    :LV_CUR_UTC,
					    :LV_CUR_DATE,
					    "QUANTITY_REL"
				   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_TT" 
				  WHERE "HEADER_ID"  = CUR_PARENT_INVC."BAN"
					AND "ZZ_BATCH_ID" = LV_BATCH_ID;
	    	
--              Insert into Order Condition Table for TP(Transaction Price) */
	 		    INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND_EH"(
		 		        	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
							"BETRW",
							"BETRH",
							"WAERS",
							"HWAER", 
							"CATEGORY",
							"MAIN_COND_TYPE",
			                "ERROR_CODE",
						    "TECHNICAL_MESSAGE",
						    "ERROR_CREATE_TS")
				    SELECT  "SRCDOC_COMP",
						    "SRCDOC_LOGSYS",
						    "SRCDOC_TYPE",
						    COND."SRCDOC_ID",
					        "TIMESTAMP_UTC",
						    "CONDITION_TYPE",
						    "PL_ACCOUNT",
						    "BETRW", 
						    "BETRW", 
						    "WAERS",						    
						    "HWAER", 
						    "CATEGORY",
						    "MAIN_COND_TYPE",
						    ::SQL_ERROR_CODE,
						    ::SQL_ERROR_MESSAGE,
						    :LV_CUR_UTC
					  FROM (SELECT * 
					          FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND_TT"
					         WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					       (SELECT "SRCDOC_ID"
					          FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_TT" 
					         WHERE "HEADER_ID" = CUR_PARENT_INVC."BAN"
					           AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
					         WHERE MAIN."SRCDOC_ID" = COND."SRCDOC_ID";
		       
		        LV_ERROR_FLAG := 'Y';	
		    
	    END;
	    	    
	    LV_ORDR_MAIN_COUNT := 0;
   
	    SELECT COUNT("SRCDOC_ID") 
	      INTO LV_INVC_MAIN_COUNT 
	      FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_EH"
		 WHERE HEADER_ID = CUR_PARENT_INVC.BAN
		   AND "ZZ_BATCH_ID" = LV_BATCH_ID;
	
	    SELECT COUNT("SRCDOC_ID") 
	      INTO LV_ORDR_MAIN_COUNT 
	      FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_ORDR_MAIN_EH"
		 WHERE HEADER_ID     = CUR_PARENT_INVC.BAN
		   AND "ZZ_BATCH_ID" = LV_BATCH_ID;
		    		

--      All valid records are inserted into  Order Main table
		IF :LV_INVC_MAIN_COUNT > 0
		OR :LV_ORDR_MAIN_COUNT > 0 
		THEN

			INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_EH"(
			        	"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"HWAER",
						"QUANTITY",
						"QUANTITY_UNIT",
						"ORIGDOC_COMP",
						"ORIGDOC_LOGSYS",
						"ORIGDOC_TYPE",
						"ORIGDOC_ID",
						"DUE_DATE",
						"FINAL_INVOICE",
						"EXCHANGE_RATE",
						"BLDAT",
						"ZZ_BATCH_ID",
						"ZZ_BKTXT",
						"ZZ_BUKRS",
						"ZZ_BLDAT",
						"ZZ_BUDAT",
						"ZZ_ICHKONT",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MWSKZ",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_ZUONR",
						"ERROR_CODE",
					    "ERROR_CREATE_TS",
					    "POSTING_DATE",
					    "QUANTITY_REL")		    
				SELECT  "SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"KUNNR",
						"ZZ_BUKRS",
						"WAERS",
						"HWAER",
						"QUANTITY",
						"QUANTITY_UNIT",
						"ORIGDOC_COMP",
						"ORIGDOC_LOGSYS",
						"ORIGDOC_TYPE",
						"ORIGDOC_ID",
						"ZZ_BUDAT",
						"FINAL_INVOICE",
						"EXCHANGE_RATE",
						"ZZ_BLDAT",
						"ZZ_BATCH_ID",
						"ZZ_BKTXT",
						"ZZ_BUKRS",
					    "ZZ_BLDAT",
						"ZZ_BUDAT",
						"ZZ_ICHKONT",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MWSKZ",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_ZUONR",
						LC_SQL_ERROR,
					    :LV_CUR_UTC,
					    :LV_CUR_DATE,
					    "QUANTITY_REL"
				   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_TT" 
				  WHERE "HEADER_ID" = CUR_PARENT_INVC."BAN"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
							    						   
		--  Insert into Order Condition Table for TP(Transaction Price) */
		 	INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND_EH"
		 		    (	"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",
						"BETRW",
						"BETRH",
						"WAERS",
						"HWAER", 
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
					    "ERROR_CREATE_TS")
			     SELECT "SRCDOC_COMP",
					    "SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						COND."SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",
						"BETRW",
						"BETRW", 
						"WAERS",
						"HWAER", 
						"CATEGORY",
						"MAIN_COND_TYPE",
						LC_SQL_ERROR,
		                :LV_CUR_UTC
				   FROM (SELECT * 
				           FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND_TT"
						  WHERE "BATCH_ID" = LV_BATCH_ID) COND,
						(SELECT "SRCDOC_ID" 
						   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_TT" 
						  WHERE "HEADER_ID" = CUR_PARENT_INVC."BAN"
						    AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
						  WHERE MAIN."SRCDOC_ID" = COND."SRCDOC_ID";
			
--      	Set Error Flag	
		        
			LV_ERROR_FLAG := 'Y';	  
			
--	    	Processing of successful records(none of the siblings of a corresponding parent are in error)
					       
	    ELSEIF :LV_INVC_MAIN_COUNT = 0
		   AND :LV_ORDR_MAIN_COUNT = 0 
		  THEN
	    	BEGIN AUTONOMOUS TRANSACTION
	
				INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN"(
						    "SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"HWAER",
							"QUANTITY",
							"QUANTITY_UNIT",
							"ORIGDOC_COMP",
							"ORIGDOC_LOGSYS",
							"ORIGDOC_TYPE",
							"ORIGDOC_ID",
							"DUE_DATE",
							"FINAL_INVOICE",
							"EXCHANGE_RATE",
							"BLDAT",
							"ZZ_BATCH_ID",
							"ZZ_BKTXT",
							"ZZ_BUKRS",
							"ZZ_BLDAT",
							"ZZ_BUDAT",
							"ZZ_ICHKONT",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MWSKZ",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_ZUONR",
							"POSTING_DATE",
							"QUANTITY_REL",
							"INVOICE_TYPE")		    
			         SELECT "SRCDOC_COMP",
							"SRCDOC_LOGSYS",
					     	"SRCDOC_TYPE",
						    "SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"KUNNR",
							"ZZ_BUKRS",
							"WAERS",
							"HWAER",
							"QUANTITY",
							"QUANTITY_UNIT",
							"ORIGDOC_COMP",
							"ORIGDOC_LOGSYS",
							"ORIGDOC_TYPE",
							"ORIGDOC_ID",
							"ZZ_BUDAT",
							"FINAL_INVOICE",
							"EXCHANGE_RATE",
							"ZZ_BLDAT",
							"ZZ_BATCH_ID",
							"ZZ_BKTXT",
							"ZZ_BUKRS",
							"ZZ_BLDAT",
							"ZZ_BUDAT",
							"ZZ_ICHKONT",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MWSKZ",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_ZUONR",
							:LV_CUR_DATE,
							"QUANTITY_REL",
							"INVOICE_TYPE"
				 	   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_TT" 
					  WHERE "HEADER_ID"  = CUR_PARENT_INVC."BAN"
						AND "ZZ_BATCH_ID" = LV_BATCH_ID;
							    	
	--          Insert into Order Condition Table for TP(Transaction Price) */
		 		INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND"(
		 		          	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
							"BETRW",
							"BETRH",
							"WAERS",
							"HWAER", 
							"CATEGORY",
							"MAIN_COND_TYPE")
					 SELECT "SRCDOC_COMP",
					 	    "SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							COND."SRCDOC_ID",
						    "TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
							"BETRW",
							"BETRW", 
							"WAERS",
							"HWAER", 
							"CATEGORY",
							"MAIN_COND_TYPE"
					   FROM (SELECT * 
					           FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND_TT"				           
						      WHERE "BATCH_ID" = LV_BATCH_ID) COND,
						    (SELECT "SRCDOC_ID" 
						       FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_TT" 
						      WHERE "HEADER_ID"      = CUR_PARENT_INVC."BAN"
						        AND "ZZ_BATCH_ID"    = LV_BATCH_ID) MAIN 
						      WHERE MAIN."SRCDOC_ID" = COND."SRCDOC_ID";
			
			
			END; -- END Autonomous transaction		
		  		  
--          Insert PK of successfully processed Records into Local Temp Tables 
--          for Updating NDB_TS in corresponding Landing Tables records
		    INSERT INTO #UPDATE_HP_NM1_INVC(
		       	         BAN,
		                 ORIGDOC_ID,
		                 SRCDOC_ID,
		                 REFERENCE_ID,
		                 RAI_ITEM_ID,
						 HP_NM1_BILLING_PK,
		                 BATCH_ID)
				 SELECT  A."BAN",		   		        
				   		 A."CC_ORIGDOCID",		   		        
				   		 A."CC_SRCDOCID",
				   		 A."CC_REFID",
				   		 A."CC_RAI_ITEM_ID",
						 A.HP_NM1_BILLING_PK,
				   		 B."ZZ_BATCH_ID"	   		        		   		        
				   	FROM :TEMP_RAI_TABLE_INVC A,
		                 (SELECT "HEADER_ID","ZZ_BATCH_ID" 
		                  FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN"  
		                  WHERE "HEADER_ID"   = CUR_PARENT_INVC."BAN"
		                    AND "ZZ_BATCH_ID" = LV_BATCH_ID)B  
		                  WHERE A."BAN"       = B."HEADER_ID";                                                       		   		  
			           			   		    		   		       
	    	INSERT INTO #UPDATE_EH_DELETION_MAIN_INVC (SRCDOC_ID)
	             SELECT "SRCDOC_ID" 
	               FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN"
	              WHERE "HEADER_ID"   = CUR_PARENT_INVC."BAN"
	                AND "ZZ_BATCH_ID" = LV_BATCH_ID;		
	
	        INSERT INTO #UPDATE_EH_DELETION_COND_INVC (SRCDOC_ID)
	             SELECT COND."SRCDOC_ID" 
	               FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND" COND,
		        (SELECT "SRCDOC_ID" 
		           FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN"  
				  WHERE "HEADER_ID"      = CUR_PARENT_INVC."BAN"
				    AND "ZZ_BATCH_ID"    = LV_BATCH_ID) MAIN 
			      WHERE MAIN."SRCDOC_ID" = COND."SRCDOC_ID";
							          												 		   		        		   	   
	    END IF;
	  
	END FOR;
	
--------------------------------------------------------------------------------------------------
--  Update NDB Tables
-------------------------------------------------------------------------------------------------- 
				
--  Updating the Source document Id, Reference Id, Header Id, RAI Item ID,Batch id 
--  and RAI Timestamp in NDB INVOICE table for M2M Contracts
		          
	UPDATE "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_NM1_BILLING" A
	  FROM "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_NM1_BILLING" A
	 INNER JOIN #UPDATE_HP_NM1_INVC B
	    ON A."HP_NM1_BILLING_PK"    = B."HP_NM1_BILLING_PK"
  	   SET "SRCDOC_ID"              = B."SRCDOC_ID",
		   "ORIG_SRCDOC_ID"         = B."ORIGDOC_ID",
		   "REFERENCE_ID"           = B."REFERENCE_ID",            
		   "HEADER_ID"              = B."BAN",            
		   "RAI_ITEM_ID"            = B."RAI_ITEM_ID",
		   "BATCH_ID"               = B."BATCH_ID",             
		   "RAI_TS"                 = LV_CUR_UTC;
									 
--  Update Invoice Main Error Table
	
	UPDATE "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_EH" A
	  FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_MAIN_EH" A
	 INNER JOIN #UPDATE_EH_DELETION_MAIN_INVC B
		ON A.SRCDOC_ID=B.SRCDOC_ID
	   SET  DELETE_DATE 			= LV_CUR_DATE ,
	   		DELETED 				= 1;
	
--  Update Invoice Cond Error Table
	
	UPDATE "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND_EH" A
	  FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_NM1_INVC_COND_EH" A
	 INNER JOIN #UPDATE_EH_DELETION_COND_INVC B
		ON A.SRCDOC_ID = B.SRCDOC_ID
	   SET  DELETE_DATE 			= LV_CUR_DATE ,
	   		DELETED 				= 1;
			   		    
-------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 
	
--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
	IF(LV_ERROR_FLAG = 'Y') THEN		
	
	    OP_STATUS := LC_ERROR_TEXT; 
				
	ELSE
	
	   	OP_STATUS := LC_SUCCESS_TEXT; 	
					
	END IF; 
	
END ;		
	
END ;
