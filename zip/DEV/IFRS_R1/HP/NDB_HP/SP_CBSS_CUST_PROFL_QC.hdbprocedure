PROCEDURE "NDB_HP"."IFRS_R1.HP.NDB_HP::SP_CBSS_CUST_PROFL_QC" 
(IN IP_CYCL_ID NVARCHAR(3),
OUT OP_STATUS  NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_CBSS_CUST_PROFL_QC
-- Created By      : BC_EY94115(Prakhar)       
-- Create Date     : 03-17-2017
-- Description     : Data Inserted using Calculation View - CA_CBSS_CUST_PROFL_QC
--                   To NDB Table - HP_CUSTOMER Using this stored procedure.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE LV_PREV_DAY         DATE;
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);  
-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG  INTEGER := 0;
DECLARE LV_PREV_UNIQUE_IDENTIFIER  NVARCHAR(34) := NULL;
  
--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------
DECLARE CURSOR C_CUST_PROFL FOR 
     	SELECT "ACC_TERM_DATE",
			   "ACC_INIT_DATE",
			   "INV_DATE",
			   "CYCL_ID",
			   "CBSS_CAN",
			   "BILL_SYS_CODE",
			   "CUST_PROV",
			   "TO_BE_REBILL_IND",
			   "ACC_TYPE",
			   "CBSS_ACC_STATUS",
			   "INV_NO",
			   "SUBSCRIBER_NUMBER",
			  -- "FLAG_EXISTING_RECORD",
			   "CONTRACT_UNIQUE_IDENTIFIER",
			   "REF_EFFECTIVE_DATE",
			   "SEQ_ID",
			   "ERROR_STATUS",
		       "ERROR_CODE",
		   	   "CC_CONCAT_PK" 
	 	  FROM "_SYS_BIC"."IFRS_R1.HP.NDB_HP/CA_CBSS_CUST_PROFL_QC"
		       (PLACEHOLDER."$$IP_CYCL_ID$$" => :IP_CYCL_ID)
		       ORDER BY CONTRACT_UNIQUE_IDENTIFIER, SUBSCRIBER_NUMBER, INV_DATE, CYCL_ID, SEQ_ID;
		 
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_CBSS_CUST_PROFL_QC (INV_DATE DATE, INV_NO NVARCHAR(16), CAN NVARCHAR(10), CYCL_ID NVARCHAR(3));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (CONTRACT_UNIQUE_IDENTIFIER NVARCHAR(16), SUBSCRIBER_NUMBER NVARCHAR(14), REF_EFFECTIVE_DATE DATE);
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 

FOR CUR_CUST_PROFL AS C_CUST_PROFL DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 
	
      -- Do Nothing. Exception Handled to ensure SP does not get terminated
	
	  END; 
	  		
   -- Insert record into error table
   	  INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER_EH"(
				  CBSS_ACC_STATUS,
				  TO_BE_REBILL_IND,
				  BILL_SYS_CODE,
				  ACC_TYPE,
				  CBSS_CAN,
				  SUBSCRIBER_NUMBER,
				  ERROR_CODE,
			      TECHNICAL_MESSAGE,
		          ERROR_CREATE_TS)
		  VALUES (CUR_CUST_PROFL.CBSS_ACC_STATUS,
				  CUR_CUST_PROFL.TO_BE_REBILL_IND,
				  CUR_CUST_PROFL.BILL_SYS_CODE,
				  CUR_CUST_PROFL.ACC_TYPE,
				  CUR_CUST_PROFL.CBSS_CAN,
				  CUR_CUST_PROFL.SUBSCRIBER_NUMBER,
			      ::SQL_ERROR_CODE,
	              ::SQL_ERROR_MESSAGE,
	              LV_CUR_UTC);
			           
	  	LV_ERROR_FLAG := 'Y';
		LV_LOOP_ERROR_FLAG := 1;
   END;

	--------------------------------------------------------------------------------------------------------	
	-- FOR CLEARING THE VARIABLES
	IF (LV_PREV_UNIQUE_IDENTIFIER IS NULL OR CUR_CUST_PROFL."CC_CONCAT_PK" != LV_PREV_UNIQUE_IDENTIFIER) THEN
		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_UNIQUE_IDENTIFIER := CUR_CUST_PROFL."CC_CONCAT_PK";			 	   
    END IF;    
	--------------------------------------------------------------------------------------------------------
	
--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_CUST_PROFL."ERROR_STATUS" = 1 THEN
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_CUST_PROFL."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		 -- Insert into the Error Table
			INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER_EH"
						("CBSS_ACC_STATUS",
				         "TO_BE_REBILL_IND",
				         "BILL_SYS_CODE",
				         "ACC_TYPE",
				         "CBSS_CAN",
						 "INSERT_TS",
						 "SUBSCRIBER_NUMBER",
				         "ERROR_CODE",
				         "ERROR_CREATE_TS")
				VALUES ( CUR_CUST_PROFL.CBSS_ACC_STATUS,
				         CUR_CUST_PROFL.TO_BE_REBILL_IND,
				         CUR_CUST_PROFL.BILL_SYS_CODE,
				         CUR_CUST_PROFL.ACC_TYPE,
				         CUR_CUST_PROFL.CBSS_CAN,
						 LV_CUR_UTC,
						 CUR_CUST_PROFL.SUBSCRIBER_NUMBER,
						:CURRENT_ERROR,
				        LV_CUR_UTC);
			
		END FOR;	
		
		    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
			LV_LOOP_ERROR_FLAG := 1;
-- Processing for Successful Records
   ELSE 
         IF CUR_CUST_PROFL.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        -- Insert into the Error Table
			INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER_EH"
						("CBSS_ACC_STATUS",
				         "TO_BE_REBILL_IND",
				         "BILL_SYS_CODE",
				         "ACC_TYPE",
				         "CBSS_CAN",
						 "INSERT_TS",
						 "SUBSCRIBER_NUMBER",
				         "ERROR_CODE",
				         "ERROR_CREATE_TS")
				VALUES ( CUR_CUST_PROFL.CBSS_ACC_STATUS,
				         CUR_CUST_PROFL.TO_BE_REBILL_IND,
				         CUR_CUST_PROFL.BILL_SYS_CODE,
				         CUR_CUST_PROFL.ACC_TYPE,
				         CUR_CUST_PROFL.CBSS_CAN,
						 LV_CUR_UTC,
						 CUR_CUST_PROFL.SUBSCRIBER_NUMBER,
						:CURRENT_ERROR,
				        LV_CUR_UTC);					
 	ELSE

--  If Record exists in the Target NDB Table
   -- IF CUR_CUST_PROFL.FLAG_EXISTING_RECORD = 'U' THEN
    
	    UPDATE "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER" A
		   SET (CBSS_ACC_STATUS,
				TO_BE_REBILL_IND,
				BILL_SYS_CODE,
				ACC_TYPE,
				CBSS_CAN,
				MODIFIED_TS)=
				(CUR_CUST_PROFL.CBSS_ACC_STATUS,
				CUR_CUST_PROFL.TO_BE_REBILL_IND,
				CUR_CUST_PROFL.BILL_SYS_CODE,
				CUR_CUST_PROFL.ACC_TYPE,
				CUR_CUST_PROFL.CBSS_CAN,
				LV_CUR_UTC) 
		WHERE A.CONTRACT_UNIQUE_IDENTIFIER = CUR_CUST_PROFL.CONTRACT_UNIQUE_IDENTIFIER
		  AND A.SUBSCRIBER_NUMBER          = CUR_CUST_PROFL.SUBSCRIBER_NUMBER
		  AND A.REF_EXPIRY_DATE            = TO_DATE('99991231','YYYYMMDD');
            
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_CBSS_CUST_PROFL_QC
		   			   (INV_DATE, 
		   			    INV_NO,
		   			    CAN, 
		   			    CYCL_ID) 
		   		VALUES (CUR_CUST_PROFL."INV_DATE", 
		   				CUR_CUST_PROFL."INV_NO", 
		   				CUR_CUST_PROFL."CBSS_CAN", 
		   				CUR_CUST_PROFL."CYCL_ID");			
		   					              
--         Add record to Delete the error from the error table if it exists			              
		   INSERT INTO #UPDATE_EH_DELETION
		   			   (CONTRACT_UNIQUE_IDENTIFIER, 
		   				SUBSCRIBER_NUMBER,
		   				REF_EFFECTIVE_DATE) 
		   		VALUES (CUR_CUST_PROFL."CONTRACT_UNIQUE_IDENTIFIER", 
		   			    CUR_CUST_PROFL."SUBSCRIBER_NUMBER",
		   			    CUR_CUST_PROFL."REF_EFFECTIVE_DATE");           	   			   
	       		END IF ;
			END IF;
	    END IF;
	END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::CBSS_CUST_PROFL_QC
UPDATE "LAND"."IFRS_R1.LAND::CBSS_CUST_PROFL_QC" A
  FROM "LAND"."IFRS_R1.LAND::CBSS_CUST_PROFL_QC" A 
 INNER JOIN #UPDATE_CBSS_CUST_PROFL_QC B 
    ON A."INV_DATE"    = B."INV_DATE"
   AND A."INV_NO"      = B."INV_NO"
   AND A."CAN"         = B."CAN"   
   AND A."CYCL_ID"     = B."CYCL_ID"
   SET NDB_TS = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER_EH" A
  FROM "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."CONTRACT_UNIQUE_IDENTIFIER"    = B."CONTRACT_UNIQUE_IDENTIFIER"
   AND A."SUBSCRIBER_NUMBER"             = B."SUBSCRIBER_NUMBER"
   AND A."REF_EFFECTIVE_DATE"            = B."REF_EFFECTIVE_DATE"   
   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;		   			   
   	    			              
