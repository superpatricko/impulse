PROCEDURE "NDB_HP"."IFRS_R1.HP.NDB_HP::SP_HP_NM1_ORDER" 
    (IN  IP_EFF_DT DATE,
    OUT OP_STATUS NVARCHAR(1000)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_HP_NM1_ORDER
-- Created By      : BC_EZ03139(Jamilish)       
-- Create Date     : 06-02-2017
-- Description     : Data Inserted using Calculation View - CA_HP_NM1_ORDER_PREBL
--                   To NDB Table - HP_NM1_ORDER Using this stored procedure.		
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);
DECLARE LV_PREV_DAY         DATE;
DECLARE LV_LOOP_ERROR_FLAG  INTEGER := 0;
DECLARE LV_PREV_UNIQUE_KEY	NVARCHAR(50) := NULL;

  
--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
  
 DECLARE CURSOR C_ORDER FOR
      SELECT "BAN",
			 "POB_END_DATE",
			 "POB_EFFV_DATE",
			 "SYSTEM_REGION",
			 "SUBSCRIBER_NUMBER",
			 "TERM_M2M",
			 "BUSINESS_ID",
			 "SOC_CODE",
			 "FEATURE_CODE",
			 "ITEM_RATE",
			 "ITEM_INCEPTION_DT",
			 "ITEM_END_DT",
			 "M2M_SERVICE_INDICATOR",
			 "GL_ACCOUNT_NUMBER",
			 "SUBSCRIBER_STATUS",
			 "SOURCE_SYSTEM_CODE",
			 "KUNNR_SID",
			 "CONTRACT_INCEPTION_DT",
			 "PRODUCT_TYPE",
			 "COST_CENTRE",
			 "TAX_CODE",
			 "PROMO_CD",
			 "PROV",
			 "TRANS_DT",
			 "PREV_BAN",
			 "PREV_CTN",
			 "PREV_SUBS",
			 "SUBS_TYPE",
			 "SUB_MKT_CODE",
			 "SOC_SEQ_NUM",
			 "SERV_FTR_SEQ_NO",
			 "BASE_OPT_SERV_IND",
			 "SERV_TY",
			 "CYCLE_ID",
			 "BUSINESS_ENTITY",
			 "LEGAL_ENTITY",
			 "ERROR_CODE",
			 "ERROR_STATUS",
			 "FLAG_EXISTING_RECORD",
			 "EFF_DT",
			 "EXPY_DT",
			 "CONT_TREAT_CODE",
			 "EFF_DT_SRC",
			 "CC_UNIQUE_KEY"
	  FROM "_SYS_BIC"."IFRS_R1.HP.NDB_HP/CA_HP_NM1_ORDER_PREBL" 
	         (PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT )
	         ORDER BY BAN, SUBSCRIBER_NUMBER, EFF_DT, EXPY_DT;

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------  

CREATE LOCAL TEMPORARY TABLE #UPDATE_NM1_EDW_AG(BAN NVARCHAR(9), EFF_DT DAYDATE,  	 
		 	 	 	 	 	 SUBSCRIBER_NUMBER NVARCHAR(30), SOC_CODE NVARCHAR(9), 
		 	 	 	 	 	 SOC_SEQ_NUM DECIMAL(11,0), SERV_FTR_SEQ_NO DECIMAL(11,0)); 	 	 	 	 	 
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(BAN NVARCHAR(9), POB_EFFV_DATE DATE, SUBSCRIBER_NUMBER NVARCHAR(30), 
		 	 	 	 	      TRANS_DT DATE, SOC_CODE NVARCHAR(9), FEATURE_CODE NVARCHAR(6),   
		 	 	 	 	 	  ITEM_INCEPTION_DT DATE, SUBSCRIBER_STATUS NVARCHAR(1), SOC_SEQ_NUM DECIMAL(11,0), 	
                              SERV_FTR_SEQ_NO DECIMAL(11,0));
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 
FOR CURR_ORDER AS C_ORDER DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION
	
--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION  
		
      -- Do Nothing. Exception Handled to ensure SP does not get terminated
	
	END; 

   -- Insert into the Error Table
      INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_NM1_ORDER_EH"(
      	 	 	  "BAN",
				  "POB_END_DATE",
				  "POB_EFFV_DATE",
				  "SYSTEM_REGION",
				  "SUBSCRIBER_NUMBER",
				  "TERM_M2M",
				  "BUSINESS_ID",
				  "SOC_CODE",
				  "FEATURE_CODE",
				  "ITEM_RATE",
				  "ITEM_INCEPTION_DT",
				  "ITEM_END_DT",
				  "M2M_SERVICE_INDICATOR",
				  "GL_ACCOUNT_NUMBER",
				  "SUBSCRIBER_STATUS",
				  "DISCOUNT_TYPE",
				  "DISCOUNT_PRICE",
				  "SOURCE_SYSTEM_CODE",
				  "KUNNR_SID",
				  "CONTRACT_INCEPTION_DT",
				  "PRODUCT_TYPE",
				  "COST_CENTRE",
				  "TAX_CODE",
				  "PROMO_CD",
				  "PROV",
				  "TRANS_DT",
				  "PREV_BAN",
				  "PREV_CTN",
				  "PREV_SUBS",
				  "SUBS_TYPE",
				  "SUB_MKT_CODE",
				  "SOC_SEQ_NUM",
				  "SERV_FTR_SEQ_NO",
				  "BASE_OPT_SERV_IND",
				  "CONT_TREAT_CODE",
				  "SERV_TY",
				  "INSERT_TS",
				  "CYCLE_ID",
				  "BUSINESS_ENTITY",
				  "LEGAL_ENTITY",
				  "ERROR_CODE",
		          "TECHNICAL_MESSAGE",
		          "ERROR_CREATE_TS")
		    VALUES (CURR_ORDER.BAN,
					CURR_ORDER.POB_END_DATE,
					CURR_ORDER.EFF_DT_SRC,
					CURR_ORDER.SYSTEM_REGION,
					CURR_ORDER.SUBSCRIBER_NUMBER,
					CURR_ORDER.TERM_M2M,
					CURR_ORDER.BUSINESS_ID,
					CURR_ORDER.SOC_CODE,
					CURR_ORDER.FEATURE_CODE,
					CURR_ORDER.ITEM_RATE,
					CURR_ORDER.ITEM_INCEPTION_DT,
					CURR_ORDER.ITEM_END_DT,
					CURR_ORDER.M2M_SERVICE_INDICATOR,
					CURR_ORDER.GL_ACCOUNT_NUMBER,
					CURR_ORDER.SUBSCRIBER_STATUS,
					NULL,--DISCOUNT_TYPE,
					NULL,--DISCOUNT_PRICE,
					CURR_ORDER.SOURCE_SYSTEM_CODE,
					CURR_ORDER.KUNNR_SID,
					CURR_ORDER.CONTRACT_INCEPTION_DT,
					CURR_ORDER.PRODUCT_TYPE,
					CURR_ORDER.COST_CENTRE,
					CURR_ORDER.TAX_CODE,
					CURR_ORDER.PROMO_CD,
					CURR_ORDER.PROV,
					CURR_ORDER.TRANS_DT,
					CURR_ORDER.PREV_BAN,
					CURR_ORDER.PREV_CTN,
					CURR_ORDER.PREV_SUBS,
					CURR_ORDER.SUBS_TYPE,
					CURR_ORDER.SUB_MKT_CODE,
					CURR_ORDER.SOC_SEQ_NUM,
					CURR_ORDER.SERV_FTR_SEQ_NO,
					CURR_ORDER.BASE_OPT_SERV_IND,
					CURR_ORDER."CONT_TREAT_CODE",
					CURR_ORDER.SERV_TY,
					LV_CUR_UTC,
					CURR_ORDER.CYCLE_ID,
					CURR_ORDER.BUSINESS_ENTITY,
					CURR_ORDER.LEGAL_ENTITY,
				  	::SQL_ERROR_CODE,
		         	::SQL_ERROR_MESSAGE,
		          	LV_CUR_UTC);   
   
	  	LV_ERROR_FLAG := 'Y';
	    LV_LOOP_ERROR_FLAG := 1;
    
   END; 
 -----------------------------------------------------------------------------------------------   
    
-- FOR CLEARING THE VARIABLES

	IF (LV_PREV_UNIQUE_KEY IS NULL OR CURR_ORDER."CC_UNIQUE_KEY" != LV_PREV_UNIQUE_KEY) THEN
        LV_LOOP_ERROR_FLAG := 0;
        LV_PREV_UNIQUE_KEY := CURR_ORDER."CC_UNIQUE_KEY";
			 	   
    END IF;

 -----------------------------------------------------------------------------------------------
   

-- Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CURR_ORDER.ERROR_STATUS = 1 THEN
	
-- Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CURR_ORDER."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

-- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
-- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
-- Insert into the Error Table
			INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_NM1_ORDER_EH"(
      	 	 	  "BAN",
				  "POB_END_DATE",
				  "POB_EFFV_DATE",
				  "SYSTEM_REGION",
				  "SUBSCRIBER_NUMBER",
				  "TERM_M2M",
				  "BUSINESS_ID",
				  "SOC_CODE",
				  "FEATURE_CODE",
				  "ITEM_RATE",
				  "ITEM_INCEPTION_DT",
				  "ITEM_END_DT",
				  "M2M_SERVICE_INDICATOR",
				  "GL_ACCOUNT_NUMBER",
				  "SUBSCRIBER_STATUS",
				  "DISCOUNT_TYPE",
				  "DISCOUNT_PRICE",
				  "SOURCE_SYSTEM_CODE",
				  "KUNNR_SID",
				  "CONTRACT_INCEPTION_DT",
				  "PRODUCT_TYPE",
				  "COST_CENTRE",
				  "TAX_CODE",
				  "PROMO_CD",
				  "PROV",
				  "TRANS_DT",
				  "PREV_BAN",
				  "PREV_CTN",
				  "PREV_SUBS",
				  "SUBS_TYPE",
				  "SUB_MKT_CODE",
				  "SOC_SEQ_NUM",
				  "SERV_FTR_SEQ_NO",
				  "BASE_OPT_SERV_IND",
				  "CONT_TREAT_CODE",
				  "SERV_TY",
				  "INSERT_TS",
				  "CYCLE_ID",
				  "BUSINESS_ENTITY",
				  "LEGAL_ENTITY", 
				  "ERROR_CODE",
				  "ERROR_CREATE_TS") 
		    VALUES (CURR_ORDER.BAN,
					CURR_ORDER.POB_END_DATE,
					CURR_ORDER.EFF_DT_SRC,
					CURR_ORDER.SYSTEM_REGION,
					CURR_ORDER.SUBSCRIBER_NUMBER,
					CURR_ORDER.TERM_M2M,
					CURR_ORDER.BUSINESS_ID,
					CURR_ORDER.SOC_CODE,
					CURR_ORDER.FEATURE_CODE,
					CURR_ORDER.ITEM_RATE,
					CURR_ORDER.ITEM_INCEPTION_DT,
					CURR_ORDER.ITEM_END_DT,
					CURR_ORDER.M2M_SERVICE_INDICATOR,
					CURR_ORDER.GL_ACCOUNT_NUMBER,
					CURR_ORDER.SUBSCRIBER_STATUS,
					NULL,--DISCOUNT_TYPE,
					NULL,--DISCOUNT_PRICE,
					CURR_ORDER.SOURCE_SYSTEM_CODE,
					CURR_ORDER.KUNNR_SID,
					CURR_ORDER.CONTRACT_INCEPTION_DT,
					CURR_ORDER.PRODUCT_TYPE,
					CURR_ORDER.COST_CENTRE,
					CURR_ORDER.TAX_CODE,
					CURR_ORDER.PROMO_CD,
					CURR_ORDER.PROV,
					CURR_ORDER.TRANS_DT,
					CURR_ORDER.PREV_BAN,
					CURR_ORDER.PREV_CTN,
					CURR_ORDER.PREV_SUBS,
					CURR_ORDER.SUBS_TYPE,
					CURR_ORDER.SUB_MKT_CODE,
					CURR_ORDER.SOC_SEQ_NUM,
					CURR_ORDER.SERV_FTR_SEQ_NO,
					CURR_ORDER.BASE_OPT_SERV_IND,
					CURR_ORDER."CONT_TREAT_CODE",
					CURR_ORDER.SERV_TY,
					LV_CUR_UTC,
					CURR_ORDER.CYCLE_ID,
					CURR_ORDER.BUSINESS_ENTITY,
					CURR_ORDER.LEGAL_ENTITY,
					:CURRENT_ERROR,
				    LV_CUR_UTC); 					
			
		END FOR;
				         		        
         -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
			LV_LOOP_ERROR_FLAG := 1;
			
			
-- Processing for Successful Records
   ELSE
   IF CURR_ORDER.ERROR_STATUS = '0' THEN
	    
   IF LV_LOOP_ERROR_FLAG = 1 THEN
   INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_NM1_ORDER_EH"(
      	 	 	  "BAN",
				  "POB_END_DATE",
				  "POB_EFFV_DATE",
				  "SYSTEM_REGION",
				  "SUBSCRIBER_NUMBER",
				  "TERM_M2M",
				  "BUSINESS_ID",
				  "SOC_CODE",
				  "FEATURE_CODE",
				  "ITEM_RATE",
				  "ITEM_INCEPTION_DT",
				  "ITEM_END_DT",
				  "M2M_SERVICE_INDICATOR",
				  "GL_ACCOUNT_NUMBER",
				  "SUBSCRIBER_STATUS",
				  "DISCOUNT_TYPE",
				  "DISCOUNT_PRICE",
				  "SOURCE_SYSTEM_CODE",
				  "KUNNR_SID",
				  "CONTRACT_INCEPTION_DT",
				  "PRODUCT_TYPE",
				  "COST_CENTRE",
				  "TAX_CODE",
				  "PROMO_CD",
				  "PROV",
				  "TRANS_DT",
				  "PREV_BAN",
				  "PREV_CTN",
				  "PREV_SUBS",
				  "SUBS_TYPE",
				  "SUB_MKT_CODE",
				  "SOC_SEQ_NUM",
				  "SERV_FTR_SEQ_NO",
				  "BASE_OPT_SERV_IND",
				  "CONT_TREAT_CODE",
				  "SERV_TY",
				  "INSERT_TS",
				  "CYCLE_ID",
				  "BUSINESS_ENTITY",
				  "LEGAL_ENTITY", 
				  "ERROR_CODE",
				  "ERROR_CREATE_TS") 
		    VALUES (CURR_ORDER.BAN,
					CURR_ORDER.POB_END_DATE,
					CURR_ORDER.EFF_DT_SRC,
					CURR_ORDER.SYSTEM_REGION,
					CURR_ORDER.SUBSCRIBER_NUMBER,
					CURR_ORDER.TERM_M2M,
					CURR_ORDER.BUSINESS_ID,
					CURR_ORDER.SOC_CODE,
					CURR_ORDER.FEATURE_CODE,
					CURR_ORDER.ITEM_RATE,
					CURR_ORDER.ITEM_INCEPTION_DT,
					CURR_ORDER.ITEM_END_DT,
					CURR_ORDER.M2M_SERVICE_INDICATOR,
					CURR_ORDER.GL_ACCOUNT_NUMBER,
					CURR_ORDER.SUBSCRIBER_STATUS,
					NULL,--DISCOUNT_TYPE,
					NULL,--DISCOUNT_PRICE,
					CURR_ORDER.SOURCE_SYSTEM_CODE,
					CURR_ORDER.KUNNR_SID,
					CURR_ORDER.CONTRACT_INCEPTION_DT,
					CURR_ORDER.PRODUCT_TYPE,
					CURR_ORDER.COST_CENTRE,
					CURR_ORDER.TAX_CODE,
					CURR_ORDER.PROMO_CD,
					CURR_ORDER.PROV,
					CURR_ORDER.TRANS_DT,
					CURR_ORDER.PREV_BAN,
					CURR_ORDER.PREV_CTN,
					CURR_ORDER.PREV_SUBS,
					CURR_ORDER.SUBS_TYPE,
					CURR_ORDER.SUB_MKT_CODE,
					CURR_ORDER.SOC_SEQ_NUM,
					CURR_ORDER.SERV_FTR_SEQ_NO,
					CURR_ORDER.BASE_OPT_SERV_IND,
					CURR_ORDER."CONT_TREAT_CODE",
					CURR_ORDER.SERV_TY,
					LV_CUR_UTC,
					CURR_ORDER.CYCLE_ID,
					CURR_ORDER.BUSINESS_ENTITY,
					CURR_ORDER.LEGAL_ENTITY,
					:CURRENT_ERROR,
				    LV_CUR_UTC); 					
ELSE				    

-- If Record exists in the Target NDB Table
     IF CURR_ORDER.FLAG_EXISTING_RECORD = 'U' THEN
	 LV_PREV_DAY := ADD_DAYS(CURR_ORDER."POB_EFFV_DATE", -1);
-- Update the target NDB table     
       UPDATE "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_NM1_ORDER" AS A 
		  SET ( POB_END_DATE,
				MODIFIED_TS) = 
			   (LV_PREV_DAY,
				LV_CUR_UTC )
		WHERE A.BAN               = CURR_ORDER.BAN 
		  AND A.POB_END_DATE      = CURR_ORDER.POB_END_DATE
		  AND A.SUBSCRIBER_NUMBER = CURR_ORDER.SUBSCRIBER_NUMBER
		  AND A.TRANS_DT 		  = CURR_ORDER.TRANS_DT  
		  AND A.SOC_CODE          = CURR_ORDER.SOC_CODE
		  AND A.FEATURE_CODE      = CURR_ORDER.FEATURE_CODE 
		  AND A.ITEM_INCEPTION_DT = CURR_ORDER.ITEM_INCEPTION_DT
		  AND A.SUBSCRIBER_STATUS = CURR_ORDER.SUBSCRIBER_STATUS
		  AND A.SOC_SEQ_NUM       = CURR_ORDER.SOC_SEQ_NUM
		  AND A.SERV_FTR_SEQ_NO   = CURR_ORDER.SERV_FTR_SEQ_NO;
	    
	  INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_NM1_ORDER"(
      	 	 	  "BAN",
				  "POB_END_DATE",
				  "POB_EFFV_DATE",
				  "SYSTEM_REGION",
				  "SUBSCRIBER_NUMBER",
				  "TERM_M2M",
				  "BUSINESS_ID",
				  "SOC_CODE",
				  "FEATURE_CODE",
				  "ITEM_RATE",
				  "ITEM_INCEPTION_DT",
				  "ITEM_END_DT",
				  "M2M_SERVICE_INDICATOR",
				  "GL_ACCOUNT_NUMBER",
				  "SUBSCRIBER_STATUS",
				  "DISCOUNT_TYPE",
				  "DISCOUNT_PRICE",
				  "SOURCE_SYSTEM_CODE",
				  "KUNNR_SID",
				  "CONTRACT_INCEPTION_DT",
				  "PRODUCT_TYPE",
				  "COST_CENTRE",
				  "TAX_CODE",
				  "PROMO_CD",
				  "PROV",
				  "TRANS_DT",
				  "PREV_BAN",
				  "PREV_CTN",
				  "PREV_SUBS",
				  "SUBS_TYPE",
				  "SUB_MKT_CODE",
				  "SOC_SEQ_NUM",
				  "SERV_FTR_SEQ_NO",
				  "BASE_OPT_SERV_IND",
				  "CONT_TREAT_CODE",
				  "SERV_TY",
				  "INSERT_TS",
				  "CYCLE_ID",
				  "BUSINESS_ENTITY",
				  "LEGAL_ENTITY") 
		    VALUES (CURR_ORDER.BAN,
					CURR_ORDER.POB_END_DATE,
					CURR_ORDER.POB_EFFV_DATE,
					CURR_ORDER.SYSTEM_REGION,
					CURR_ORDER.SUBSCRIBER_NUMBER,
					CURR_ORDER.TERM_M2M,
					CURR_ORDER.BUSINESS_ID,
					CURR_ORDER.SOC_CODE,
					CURR_ORDER.FEATURE_CODE,
					CURR_ORDER.ITEM_RATE,
					CURR_ORDER.ITEM_INCEPTION_DT,
					CURR_ORDER.ITEM_END_DT,
					CURR_ORDER.M2M_SERVICE_INDICATOR,
					CURR_ORDER.GL_ACCOUNT_NUMBER,
					CURR_ORDER.SUBSCRIBER_STATUS,
					NULL,--DISCOUNT_TYPE,
					NULL,--DISCOUNT_PRICE,
					CURR_ORDER.SOURCE_SYSTEM_CODE,
					CURR_ORDER.KUNNR_SID,
					CURR_ORDER.CONTRACT_INCEPTION_DT,
					CURR_ORDER.PRODUCT_TYPE,
					CURR_ORDER.COST_CENTRE,
					CURR_ORDER.TAX_CODE,
					CURR_ORDER.PROMO_CD,
					CURR_ORDER.PROV,
					CURR_ORDER.TRANS_DT,
					CURR_ORDER.PREV_BAN,
					CURR_ORDER.PREV_CTN,
					CURR_ORDER.PREV_SUBS,
					CURR_ORDER.SUBS_TYPE,
					CURR_ORDER.SUB_MKT_CODE,
					CURR_ORDER.SOC_SEQ_NUM,
					CURR_ORDER.SERV_FTR_SEQ_NO,
					CURR_ORDER.BASE_OPT_SERV_IND,
					CURR_ORDER."CONT_TREAT_CODE",
					CURR_ORDER.SERV_TY,
					LV_CUR_UTC,
					CURR_ORDER.CYCLE_ID,
					CURR_ORDER.BUSINESS_ENTITY,
					CURR_ORDER.LEGAL_ENTITY);
					
-- Insert PK of successfully processed Records into Local Temp Tables 
-- For Updating NDB_TS in corresponding Landing Tables records

		   INSERT INTO #UPDATE_NM1_EDW_AG
		   			   (BAN,
		   			    EFF_DT,
		   			    SUBSCRIBER_NUMBER,
		   			    SOC_CODE,
		   			    SOC_SEQ_NUM,
		   			    SERV_FTR_SEQ_NO)
		   		VALUES (CURR_ORDER.BAN,
		   			 	CURR_ORDER.EFF_DT,
		   			 	CURR_ORDER.SUBSCRIBER_NUMBER,
		   			 	CURR_ORDER.SOC_CODE,
		   			 	CURR_ORDER.SOC_SEQ_NUM,
		   			 	CURR_ORDER.SERV_FTR_SEQ_NO);

		   		
-- Add record to Delete the error from the error table if it exists

			INSERT INTO	#UPDATE_EH_DELETION
		   			   (BAN, 
		   			    POB_EFFV_DATE, 
		   			    SUBSCRIBER_NUMBER, 
		 	 	 	 	TRANS_DT, 
		 	 	 	 	SOC_CODE, 
		 	 	 	 	FEATURE_CODE,   
		 	 	 	 	ITEM_INCEPTION_DT, 
		 	 	 	 	SUBSCRIBER_STATUS, 
		 	 	 	 	SOC_SEQ_NUM, 	
                        SERV_FTR_SEQ_NO)
		   		VALUES (CURR_ORDER.BAN,
		   			 	CURR_ORDER.POB_EFFV_DATE,
		   			 	CURR_ORDER.SUBSCRIBER_NUMBER,
		   			 	CURR_ORDER.TRANS_DT,
		   			 	CURR_ORDER.SOC_CODE,
		   			 	CURR_ORDER.FEATURE_CODE,
		   			 	CURR_ORDER.ITEM_INCEPTION_DT,
		   			 	CURR_ORDER.SUBSCRIBER_STATUS,
		   			 	CURR_ORDER.SOC_SEQ_NUM,
		   			 	CURR_ORDER.SERV_FTR_SEQ_NO);		
                    	
    ELSE


--     Insert Records into the target NDB table

       BEGIN AUTONOMOUS TRANSACTION
            
       INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_NM1_ORDER"(
      	 	 	  "BAN",
				  "POB_END_DATE",
				  "POB_EFFV_DATE",
				  "SYSTEM_REGION",
				  "SUBSCRIBER_NUMBER",
				  "TERM_M2M",
				  "BUSINESS_ID",
				  "SOC_CODE",
				  "FEATURE_CODE",
				  "ITEM_RATE",
				  "ITEM_INCEPTION_DT",
				  "ITEM_END_DT",
				  "M2M_SERVICE_INDICATOR",
				  "GL_ACCOUNT_NUMBER",
				  "SUBSCRIBER_STATUS",
				  "DISCOUNT_TYPE",
				  "DISCOUNT_PRICE",
				  "SOURCE_SYSTEM_CODE",
				  "KUNNR_SID",
				  "CONTRACT_INCEPTION_DT",
				  "PRODUCT_TYPE",
				  "COST_CENTRE",
				  "TAX_CODE",
				  "PROMO_CD",
				  "PROV",
				  "TRANS_DT",
				  "PREV_BAN",
				  "PREV_CTN",
				  "PREV_SUBS",
				  "SUBS_TYPE",
				  "SUB_MKT_CODE",
				  "SOC_SEQ_NUM",
				  "SERV_FTR_SEQ_NO",
				  "BASE_OPT_SERV_IND",
				  "CONT_TREAT_CODE",
				  "SERV_TY",
				  "INSERT_TS",
				  "CYCLE_ID",
				  "BUSINESS_ENTITY",
				  "LEGAL_ENTITY") 
		    VALUES (CURR_ORDER.BAN,
					CURR_ORDER.POB_END_DATE,
					CURR_ORDER.POB_EFFV_DATE,
					CURR_ORDER.SYSTEM_REGION,
					CURR_ORDER.SUBSCRIBER_NUMBER,
					CURR_ORDER.TERM_M2M,
					CURR_ORDER.BUSINESS_ID,
					CURR_ORDER.SOC_CODE,
					CURR_ORDER.FEATURE_CODE,
					CURR_ORDER.ITEM_RATE,
					CURR_ORDER.ITEM_INCEPTION_DT,
					CURR_ORDER.ITEM_END_DT,
					CURR_ORDER.M2M_SERVICE_INDICATOR,
					CURR_ORDER.GL_ACCOUNT_NUMBER,
					CURR_ORDER.SUBSCRIBER_STATUS,
					NULL,--DISCOUNT_TYPE,
					NULL,--DISCOUNT_PRICE,
					CURR_ORDER.SOURCE_SYSTEM_CODE,
					CURR_ORDER.KUNNR_SID,
					CURR_ORDER.CONTRACT_INCEPTION_DT,
					CURR_ORDER.PRODUCT_TYPE,
					CURR_ORDER.COST_CENTRE,
					CURR_ORDER.TAX_CODE,
					CURR_ORDER.PROMO_CD,
					CURR_ORDER.PROV,
					CURR_ORDER.TRANS_DT,
					CURR_ORDER.PREV_BAN,
					CURR_ORDER.PREV_CTN,
					CURR_ORDER.PREV_SUBS,
					CURR_ORDER.SUBS_TYPE,
					CURR_ORDER.SUB_MKT_CODE,
					CURR_ORDER.SOC_SEQ_NUM,
					CURR_ORDER.SERV_FTR_SEQ_NO,
					CURR_ORDER.BASE_OPT_SERV_IND,
					CURR_ORDER."CONT_TREAT_CODE",
					CURR_ORDER.SERV_TY,
					LV_CUR_UTC,
					CURR_ORDER.CYCLE_ID,
					CURR_ORDER.BUSINESS_ENTITY,
					CURR_ORDER.LEGAL_ENTITY);
	   END;
						 
-- Insert PK of successfully processed Records into Local Temp Tables 
-- For Updating NDB_TS in corresponding Landing Tables records

		   INSERT INTO #UPDATE_NM1_EDW_AG
		   			   (BAN,
		   			    EFF_DT,
		   			    SUBSCRIBER_NUMBER,
		   			    SOC_CODE,
		   			    SOC_SEQ_NUM,
		   			    SERV_FTR_SEQ_NO)
		   		VALUES (CURR_ORDER.BAN,
		   			 	CURR_ORDER.EFF_DT,
		   			 	CURR_ORDER.SUBSCRIBER_NUMBER,
		   			 	CURR_ORDER.SOC_CODE,
		   			 	CURR_ORDER.SOC_SEQ_NUM,
		   			 	CURR_ORDER.SERV_FTR_SEQ_NO);


-- Add record to Delete the error from the error table if it exists

			INSERT INTO	#UPDATE_EH_DELETION
		   			   (BAN, 
		   			    POB_EFFV_DATE, 
		   			    SUBSCRIBER_NUMBER, 
		 	 	 	 	TRANS_DT, 
		 	 	 	 	SOC_CODE, 
		 	 	 	 	FEATURE_CODE,   
		 	 	 	 	ITEM_INCEPTION_DT, 
		 	 	 	 	SUBSCRIBER_STATUS, 
		 	 	 	 	SOC_SEQ_NUM, 	
                        SERV_FTR_SEQ_NO)
		   		VALUES (CURR_ORDER.BAN,
		   			 	CURR_ORDER.POB_EFFV_DATE,
		   			 	CURR_ORDER.SUBSCRIBER_NUMBER,
		   			 	CURR_ORDER.TRANS_DT,
		   			 	CURR_ORDER.SOC_CODE,
		   			 	CURR_ORDER.FEATURE_CODE,
		   			 	CURR_ORDER.ITEM_INCEPTION_DT,
		   			 	CURR_ORDER.SUBSCRIBER_STATUS,
		   			 	CURR_ORDER.SOC_SEQ_NUM,
		   			 	CURR_ORDER.SERV_FTR_SEQ_NO);		   			    
		   
   END IF;

  END IF;
  END IF; 
  END IF; 

END FOR;


--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::NM1_EDW_AG

UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_AG" A
  FROM "LAND"."IFRS_R1.LAND::NM1_EDW_AG" A 
 INNER JOIN #UPDATE_NM1_EDW_AG B 
    ON A.BAN              = B.BAN 
   AND A.SOC              = B.SOC_CODE
   AND A.EFF_DT			  = B.EFF_DT 
   AND A.SUBCR_NO	 	  = B.SUBSCRIBER_NUMBER
   AND A.SOC_SEQ_NUM      = B.SOC_SEQ_NUM
   AND A.SERV_FTR_SEQ_NO  = B.SERV_FTR_SEQ_NO
   SET SP_HP_NM1_ORDER_TS = LV_CUR_UTC
 WHERE A.SP_HP_NM1_ORDER_TS IS NULL;
 

 
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_NM1_ORDER_EH" A
  FROM "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_NM1_ORDER_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B 
    ON A.BAN                  = B.BAN 
   AND A.SOC_CODE             = B.SOC_CODE
   AND A.FEATURE_CODE         = B.FEATURE_CODE 
   AND A.SOC_SEQ_NUM          = B.SOC_SEQ_NUM
   AND A.SERV_FTR_SEQ_NO      = B.SERV_FTR_SEQ_NO
   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

-- STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
-- executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END ;
			 			
	