PROCEDURE "NDB_HP"."IFRS_R1.HP.NDB_HP::SP_HP_BILLING_ON"
(IN IP_INPUT_DATE DATE,
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_HP_BILLING_ON
-- Created By      : BC_EY94134 (Deepika)       
-- Create Date     : 03-10-2016
-- Description     : Data Inserted using Calculation View - CA_HP_BILLING_ON
--                   To NDB Table - HP_BILLING Using this stored procedure.
--                   HP Billing includes data from table CBSS_BILL_ON_BUSINES and CBSS_BILL_ON_RESIDNC.			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------
DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);
  
--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
DECLARE CURSOR C_BILLING_ON FOR
    SELECT "INVOICE_DATE",
           "DUE_DATE",
           "SUMMARY_ACCOUNT_NUMBER",
           "CUSTOMER_ACCOUNT_NUMBER",
           "BILL_SYSTEM_CODE",
           "PRIMARY_TELEPHONE_NUMBER",
           "WORKING_TELEPHONE_NUMBER",
           "PRODUCT_START_DATE",
           "PRODUCT_END_DATE",
           "BRA_CD",
           "ITEM_CODE",
           "ITEM_TYPE",
           "PRODUCT_SERVICE_TYPE",
           "PS_QTY_PRPS_CD",
           "ITEM_CHARGE",
           "ITEM_QUANTITY",
           "RAC_CODE",
           "CURRENCY",
           "SOURCE_SYSTEM_CODE",
           "MDM_DISCOUNT_TYPE",
           "DUO_TRIO_IND",
           "ERROR_STATUS",
           "SER_NUM", 
           "TCAN_CUST_ACCT_NO",
           "ERROR_CODE",
           "SEQ_ID",
           "CYCL_ID",
           "KUNNR_SID",
           "MCC_ONB_PRIMARY_KEY",
           "MCC_ONA_PRIMARY_KEY",
           "CYCL_ID_VADJ",
		   "CYCL_ID_VADJS",
           "PRODSERV_CD",
           "SEQ_NUM",
           "BILL_NPA",
           "BILL_NXX",
           "BILL_LINE_NUM",
           "BILL_CUST_CD",
           "ADJMT_ACCT_CD",
           "ADJMT_TY_CD",
           "BILL_SUFFIX_CD",
           "VADJSON_PRIMARY_KEY",
           "VADJON_PRIMARY_KEY",
           "COUNTER",
           "HP_BILLING_PK"
      FROM "_SYS_BIC"."IFRS_R1.HP.NDB_HP/CA_HP_BILLING_ON"
           (PLACEHOLDER."$$IP_INV_DATE$$" => :IP_INPUT_DATE) 
           ORDER BY INVOICE_DATE, CYCL_ID, SEQ_ID;
        	  
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 
CREATE LOCAL TEMPORARY TABLE #UPDATE_ARICS_VADJS_ON (VADJSON_PRIMARY_KEY NVARCHAR(75));
CREATE LOCAL TEMPORARY TABLE #UPDATE_ARICS_VADJ_ON (VADJON_PRIMARY_KEY NVARCHAR(50)); 
CREATE LOCAL TEMPORARY TABLE #UPDATE_ARICS_MCC_ONA (MCC_ONA_PRIMARY_KEY NVARCHAR(120));
CREATE LOCAL TEMPORARY TABLE #UPDATE_ARICS_MCC_ONB (MCC_ONB_PRIMARY_KEY NVARCHAR(250));
--CREATE LOCAL TEMPORARY TABLE #UPDATE_CBSS_BILL_ON_RESIDNC (BILLONR_PRIMARY_KEY NVARCHAR(120));
--CREATE LOCAL TEMPORARY TABLE #UPDATE_CBSS_BILL_ON_BUSINES (BILLONB_PRIMARY_KEY NVARCHAR(120));
CREATE LOCAL TEMPORARY TABLE #UPDATE_CBSS_BILL_ON_BUSINES (INVOICE_DATE DATE, PRIMARY_TELEPHONE_NUMBER NVARCHAR(16),
 															WORKING_TELEPHONE_NUMBER NVARCHAR(16), BRA_CD NVARCHAR(2)); 
CREATE LOCAL TEMPORARY TABLE #UPDATE_CBSS_BILL_ON_RESIDNC (INVOICE_DATE DATE, PRIMARY_TELEPHONE_NUMBER NVARCHAR(16),
 															WORKING_TELEPHONE_NUMBER NVARCHAR(16), BRA_CD NVARCHAR(2));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (INVOICE_DATE DATE, PRIMARY_TELEPHONE_NUMBER NVARCHAR(16),
 												  WORKING_TELEPHONE_NUMBER NVARCHAR(16), ITEM_CODE NVARCHAR(8), BRA_CD NVARCHAR(2));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 
  
FOR CUR_BILLING AS C_BILLING_ON DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION  
		
      -- Do Nothing. Exception Handled to ensure SP does not get terminated
	
	END;
					
   -- Insert record into error table
   	  INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_BILLING_EH"(
		   	      "INVOICE_DATE",
                  "DUE_DATE",
                  "SUMMARY_ACCOUNT_NUMBER",
                  "CUSTOMER_ACCOUNT_NUMBER",
                  "BILL_SYSTEM_CODE",
                  "PRIMARY_TELEPHONE_NUMBER",
                  "WORKING_TELEPHONE_NUMBER",
                  "PRODUCT_START_DATE",
                  "PRODUCT_END_DATE",
                  "BRA_CD",
                  "ITEM_CODE",
                  "ITEM_TYPE",
                  "PRODUCT_SERVICE_TYPE",
                  "PS_QTY_PRPS_CD",
                  "ITEM_CHARGE",
                  "ITEM_QUANTITY",
                  "RAC_CODE",
                  "CURRENCY",
                  "SOURCE_SYSTEM_CODE",
                  "MDM_DISCOUNT_TYPE",
                  "INSERT_TS",
                  "DUO_TRIO_IND",
                  "KUNNR_SID",
                  "CYCL_ID", 
		          "ERROR_CODE",
		          "TECHNICAL_MESSAGE",
		          "ERROR_CREATE_TS",
		          "COUNTER",
		          "HP_BILLING_PK") 
		   VALUES (CUR_BILLING."INVOICE_DATE",
                   CUR_BILLING."DUE_DATE",
                   CUR_BILLING."SUMMARY_ACCOUNT_NUMBER",
                   CUR_BILLING."CUSTOMER_ACCOUNT_NUMBER",
                   CUR_BILLING."BILL_SYSTEM_CODE",
                   CUR_BILLING."PRIMARY_TELEPHONE_NUMBER",
                   CUR_BILLING."WORKING_TELEPHONE_NUMBER",
                   CUR_BILLING."PRODUCT_START_DATE",
                   CUR_BILLING."PRODUCT_END_DATE",
                   CUR_BILLING."BRA_CD",
                   CUR_BILLING."ITEM_CODE",
                   CUR_BILLING."ITEM_TYPE",
                   CUR_BILLING."PRODUCT_SERVICE_TYPE",
                   CUR_BILLING."PS_QTY_PRPS_CD",
                   CUR_BILLING."ITEM_CHARGE",
                   CUR_BILLING."ITEM_QUANTITY",
                   CUR_BILLING."RAC_CODE",
                   CUR_BILLING."CURRENCY",
                   CUR_BILLING."SOURCE_SYSTEM_CODE",
                   CUR_BILLING."MDM_DISCOUNT_TYPE",
                   LV_CUR_UTC,
                   CUR_BILLING."DUO_TRIO_IND",
                   CUR_BILLING."KUNNR_SID",
                   CUR_BILLING."CYCL_ID",
		           ::SQL_ERROR_CODE,
		           ::SQL_ERROR_MESSAGE,
		           LV_CUR_UTC,
		           CUR_BILLING."COUNTER",
		           CUR_BILLING."HP_BILLING_PK" );   
   
	  	LV_ERROR_FLAG := 'Y';
    
   END ; 

--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_BILLING.ERROR_STATUS = 1 THEN
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_BILLING."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		 -- Insert into the Error Table
			INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_BILLING_EH"(
			    	    "INVOICE_DATE",
                        "DUE_DATE",
                        "SUMMARY_ACCOUNT_NUMBER",
                        "CUSTOMER_ACCOUNT_NUMBER",
                        "BILL_SYSTEM_CODE",
                        "PRIMARY_TELEPHONE_NUMBER",
                        "WORKING_TELEPHONE_NUMBER",
                        "PRODUCT_START_DATE",
                        "PRODUCT_END_DATE",
                        "BRA_CD",
                        "ITEM_CODE",
                        "ITEM_TYPE",
                        "PRODUCT_SERVICE_TYPE",
                        "PS_QTY_PRPS_CD",
                        "ITEM_CHARGE",
                        "ITEM_QUANTITY",
                        "RAC_CODE",
                        "CURRENCY",
                        "SOURCE_SYSTEM_CODE",
                        "MDM_DISCOUNT_TYPE",
                        "INSERT_TS",
                        "DUO_TRIO_IND", 
                        "KUNNR_SID",
                        "CYCL_ID",
				        "ERROR_CODE",
				        "ERROR_CREATE_TS",
				        "COUNTER",
				        "HP_BILLING_PK") 
				 VALUES (CUR_BILLING."INVOICE_DATE",
                         CUR_BILLING."DUE_DATE",
                         CUR_BILLING."SUMMARY_ACCOUNT_NUMBER",
                         CUR_BILLING."CUSTOMER_ACCOUNT_NUMBER",
                         CUR_BILLING."BILL_SYSTEM_CODE",
                         CUR_BILLING."PRIMARY_TELEPHONE_NUMBER",
                         CUR_BILLING."WORKING_TELEPHONE_NUMBER",
                         CUR_BILLING."PRODUCT_START_DATE",
                         CUR_BILLING."PRODUCT_END_DATE",
                         CUR_BILLING."BRA_CD",
                         CUR_BILLING."ITEM_CODE",
                         CUR_BILLING."ITEM_TYPE",
                         CUR_BILLING."PRODUCT_SERVICE_TYPE",
                         CUR_BILLING."PS_QTY_PRPS_CD",
                         CUR_BILLING."ITEM_CHARGE",
                         CUR_BILLING."ITEM_QUANTITY",
                         CUR_BILLING."RAC_CODE",
                         CUR_BILLING."CURRENCY",
                         CUR_BILLING."SOURCE_SYSTEM_CODE",
                         CUR_BILLING."MDM_DISCOUNT_TYPE",
                         LV_CUR_UTC,
                         CUR_BILLING."DUO_TRIO_IND",
                         CUR_BILLING."KUNNR_SID",
                         CUR_BILLING."CYCL_ID",
				         :CURRENT_ERROR,
				         LV_CUR_UTC,
				         CUR_BILLING."COUNTER",
				         CUR_BILLING."HP_BILLING_PK");			         		       	
		END FOR;
		
         -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';		

-- Processing for Successful Records
   ELSE
    
--     Insert Records into the target NDB table     
       INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_BILLING" 
                  ("INVOICE_DATE",
                   "DUE_DATE",
                   "SUMMARY_ACCOUNT_NUMBER",
                   "CUSTOMER_ACCOUNT_NUMBER",
                   "BILL_SYSTEM_CODE",
                   "PRIMARY_TELEPHONE_NUMBER",
                   "WORKING_TELEPHONE_NUMBER",
                   "PRODUCT_START_DATE",
                   "PRODUCT_END_DATE",
                   "BRA_CD",
                   "ITEM_CODE",
                   "ITEM_TYPE",
                   "PRODUCT_SERVICE_TYPE",
                   "PS_QTY_PRPS_CD",
                   "ITEM_CHARGE",
                   "ITEM_QUANTITY",
                   "RAC_CODE",
                   "CURRENCY",
                   "SOURCE_SYSTEM_CODE",
                   "MDM_DISCOUNT_TYPE",
                   "INSERT_TS",
                   "DUO_TRIO_IND",
                   "KUNNR_SID",
                   "CYCL_ID",
                   "COUNTER",
                   "HP_BILLING_PK") 
		    VALUES (CUR_BILLING."INVOICE_DATE",
                    CUR_BILLING."DUE_DATE",
                    CUR_BILLING."SUMMARY_ACCOUNT_NUMBER",
                    CUR_BILLING."CUSTOMER_ACCOUNT_NUMBER",
                    CUR_BILLING."BILL_SYSTEM_CODE",
                    CUR_BILLING."PRIMARY_TELEPHONE_NUMBER",
                    CUR_BILLING."WORKING_TELEPHONE_NUMBER",
                    CUR_BILLING."PRODUCT_START_DATE",
                    CUR_BILLING."PRODUCT_END_DATE",
                    CUR_BILLING."BRA_CD",
                    CUR_BILLING."ITEM_CODE",
                    CUR_BILLING."ITEM_TYPE",
                    CUR_BILLING."PRODUCT_SERVICE_TYPE",
                    CUR_BILLING."PS_QTY_PRPS_CD",
                    CUR_BILLING."ITEM_CHARGE",
                    CUR_BILLING."ITEM_QUANTITY",
                    CUR_BILLING."RAC_CODE",
                    CUR_BILLING."CURRENCY",
                    CUR_BILLING."SOURCE_SYSTEM_CODE",
                    CUR_BILLING."MDM_DISCOUNT_TYPE",
                    LV_CUR_UTC,
                    CUR_BILLING."DUO_TRIO_IND",
                    CUR_BILLING."KUNNR_SID",
                    CUR_BILLING."CYCL_ID",
                    CUR_BILLING."COUNTER",
                    CUR_BILLING."HP_BILLING_PK");    

--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_ARICS_VADJS_ON
		   	 	 	 	(VADJSON_PRIMARY_KEY)
		   		VALUES (CUR_BILLING."VADJSON_PRIMARY_KEY");
		   		
		   INSERT INTO #UPDATE_ARICS_VADJ_ON
		   				(VADJON_PRIMARY_KEY)
		   		VALUES (CUR_BILLING."VADJON_PRIMARY_KEY");

		   INSERT INTO #UPDATE_ARICS_MCC_ONA
		   			   (MCC_ONA_PRIMARY_KEY) 
		   	    VALUES (CUR_BILLING."MCC_ONA_PRIMARY_KEY");
		   	    		
	       INSERT INTO #UPDATE_ARICS_MCC_ONB
		   			   (MCC_ONB_PRIMARY_KEY) 
		   	    VALUES (CUR_BILLING."MCC_ONB_PRIMARY_KEY");		   	    		
		   	    		
		   INSERT INTO #UPDATE_CBSS_BILL_ON_RESIDNC
		   			   --(BILLONR_PRIMARY_KEY) 
		   		--VALUES (CUR_BILLING."BILLONR_PRIMARY_KEY");
		   				(INVOICE_DATE, 
		   				PRIMARY_TELEPHONE_NUMBER, 
		   				WORKING_TELEPHONE_NUMBER,
		   				BRA_CD) 
		   		VALUES (CUR_BILLING."INVOICE_DATE", 
		   			    CUR_BILLING."PRIMARY_TELEPHONE_NUMBER", 
		   			    CUR_BILLING."WORKING_TELEPHONE_NUMBER",
		   			    CUR_BILLING."BRA_CD");  
		   			    
		   INSERT INTO #UPDATE_CBSS_BILL_ON_BUSINES
		   			   --(BILLONB_PRIMARY_KEY) 
		   		--VALUES (CUR_BILLING."BILLONB_PRIMARY_KEY");
		   				(INVOICE_DATE, 
		   				PRIMARY_TELEPHONE_NUMBER, 
		   				WORKING_TELEPHONE_NUMBER,
		   				BRA_CD) 
		   		VALUES (CUR_BILLING."INVOICE_DATE", 
		   			    CUR_BILLING."PRIMARY_TELEPHONE_NUMBER", 
		   			    CUR_BILLING."WORKING_TELEPHONE_NUMBER",
		   			    CUR_BILLING."BRA_CD"); 		   			    
		   			               
			INSERT INTO	#UPDATE_EH_DELETION
		   			   (INVOICE_DATE, 
		   				PRIMARY_TELEPHONE_NUMBER, 
		   				WORKING_TELEPHONE_NUMBER,
		   				ITEM_CODE,
		   				BRA_CD) 
		   		VALUES (CUR_BILLING."INVOICE_DATE", 
		   			    CUR_BILLING."PRIMARY_TELEPHONE_NUMBER", 
		   			    CUR_BILLING."WORKING_TELEPHONE_NUMBER",
		   			    CUR_BILLING."ITEM_CODE",
		   			    CUR_BILLING."BRA_CD"); 		   			    

  END IF;

END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 
		
 -- Update Landing Table IFRS_R1.LAND::ARICS_VADJS_ON
UPDATE "LAND"."IFRS_R1.LAND::ARICS_VADJS_ON" A
  FROM "LAND"."IFRS_R1.LAND::ARICS_VADJS_ON" A 
 INNER JOIN #UPDATE_ARICS_VADJS_ON B 
   ON A."VADJSON_PRIMARY_KEY"  = B."VADJSON_PRIMARY_KEY"
   SET NDB_TS = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

-- Update Landing Table IFRS_R1.LAND::ARICS_VADJ_ON
UPDATE "LAND"."IFRS_R1.LAND::ARICS_VADJ_ON" A
  FROM "LAND"."IFRS_R1.LAND::ARICS_VADJ_ON" A 
 INNER JOIN #UPDATE_ARICS_VADJ_ON B 
    ON A."VADJON_PRIMARY_KEY"  = B."VADJON_PRIMARY_KEY"
   SET NDB_TS = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;  

-- Update Landing Table IFRS_R1.LAND::ARICS_MCC_ONA
UPDATE "LAND"."IFRS_R1.LAND::ARICS_MCC_ONA" A 
  FROM "LAND"."IFRS_R1.LAND::ARICS_MCC_ONA" A 
 INNER JOIN #UPDATE_ARICS_MCC_ONA B
    ON  A."MCC_ONA_PRIMARY_KEY"       = B."MCC_ONA_PRIMARY_KEY"
   SET NDB_TS = LV_CUR_UTC
 WHERE A."NDB_TS" IS NULL;
 
 -- Update Landing Table IFRS_R1.LAND::ARICS_MCC_ONB
UPDATE "LAND"."IFRS_R1.LAND::ARICS_MCC_ONB" A 
  FROM "LAND"."IFRS_R1.LAND::ARICS_MCC_ONB" A 
 INNER JOIN #UPDATE_ARICS_MCC_ONB B
    ON  A."MCC_ONB_PRIMARY_KEY"      = B."MCC_ONB_PRIMARY_KEY"
 SET NDB_TS = LV_CUR_UTC
 WHERE A."NDB_TS" IS NULL;

-- Update Landing Table IFRS_R1.LAND::CBSS_BILL_ON_BUSINES
UPDATE "LAND"."IFRS_R1.LAND::CBSS_BILL_ON_BUSINES" A
  FROM "LAND"."IFRS_R1.LAND::CBSS_BILL_ON_BUSINES" A 
 INNER JOIN #UPDATE_CBSS_BILL_ON_BUSINES B
    --ON  A."BILLONB_PRIMARY_KEY" = B."BILLONB_PRIMARY_KEY"---TO_DATE(A.INV_DATE,'YYYY-MM-DD')= TO_DATE(B."INV_DATE",'YYYY-MM-DD')
    ON A."INV_DATE"             	= B."INVOICE_DATE"
   AND A."INV_NO" 					= B."PRIMARY_TELEPHONE_NUMBER"
   AND A."WTN" 						= B."WORKING_TELEPHONE_NUMBER"
   AND A."BRA_CODE"					= B."BRA_CD"
SET NDB_TS   = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;
 
 -- Update Landing Table IFRS_R1.LAND::CBSS_BILL_ON_RESIDNC
UPDATE "LAND"."IFRS_R1.LAND::CBSS_BILL_ON_RESIDNC" A
  FROM "LAND"."IFRS_R1.LAND::CBSS_BILL_ON_RESIDNC" A 
 INNER JOIN #UPDATE_CBSS_BILL_ON_RESIDNC B
    --ON  A."BILLONR_PRIMARY_KEY" = B."BILLONR_PRIMARY_KEY"--TO_DATE(A.INV_DATE,'YYYY-MM-DD')= TO_DATE(B."INV_DATE",'YYYY-MM-DD')
    ON A."INV_DATE"             	= B."INVOICE_DATE"
   AND A."INV_NO" 					= B."PRIMARY_TELEPHONE_NUMBER"
   AND A."WTN" 						= B."WORKING_TELEPHONE_NUMBER"
   AND A."BRA_CODE"					= B."BRA_CD"
   SET NDB_TS  = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

-- Update Error Table
UPDATE "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_BILLING_EH" A
  FROM "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_BILLING_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."INVOICE_DATE"             = B."INVOICE_DATE"
   AND A."PRIMARY_TELEPHONE_NUMBER" = B."PRIMARY_TELEPHONE_NUMBER"
   AND A."WORKING_TELEPHONE_NUMBER" = B."WORKING_TELEPHONE_NUMBER"
   AND A."ITEM_CODE"                = B."ITEM_CODE"
   AND A."BRA_CD"					= B."BRA_CD"
   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

-------------------------------------------------------------------------------------------------- 
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;
