--"BAN","CONTR_TRANS_DT","ITEM_ID","ITEM_TRANS_DT","SUBSCR_NO","TRX_SEQ_NO","ITEM_SUB_ID"
PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_ORDER_COAM_CONTR"
	(IN IP_EFF_DT DATE,
	OUT OP_STATUS  NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
	AS
BEGIN 
----------------------------------------------------------------------
-- Procedure Title : SP_ORDER_COAM_ORDER
--
-- Created By      : BC_EY94137(Akanksha Singh)          Date : 23/09/2016
-- 
-- Procedure Description : It is used to INSERT/UPDATE data in NDB Table.
--                         NDB_TS is updated in Landing Table         
--                         after data is loaded in NDB.
--Project :Bell Canda
--
--
----------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
----------------------------------------------------------------------
-- 18/10/2016  | BC_EY94137       | Updated to incorporate change in  
--                                  order flow 
-- 27/10/2016  | BC_EY94137       | Additional fields added 
-- 02/11/2016  | BC_EY94137       | Comments added
-- 30/11/2016  | BC_EY94137       | Added error and control logs
-- 03/05/2017  | EZ_18762         | Add Error logging and one cursor
---------------|------------------|-----------------------------------
-- Description Of the changes       
----------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> :<Description of Changes>       
----------------------------------------------------------------------


	DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
	DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
	DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
	DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
	DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
	DECLARE i					INTEGER;
	DECLARE RECORD_COUNT		INTEGER;
	DECLARE CURRENT_ERROR		NVARCHAR(100);
	
-- New variables for version sequence check
	DECLARE LV_LOOP_ERROR_FLAG       INTEGER := 0;
	DECLARE LV_PREV_BAN_SUB	 NVARCHAR(41) := NULL;

	DECLARE CURSOR CUR_ORDER_COAM FOR
	
		SELECT
		 "ERROR_CODE",
		 "ERROR_STATUS",
		 "ACTV_CD",
		 "ACTV_RSN_CD",
		 "BAN",
		 "BYRS_RMRSE",
		 "CONTR_DEALER_CODE",
		 "CONTR_END_DT",
		 "CONTR_ID",
		 "CONTR_STRT_DT",
		 "CONTR_TERM",
		 "CONTR_TIER",
		 "CONTR_TY",
		 "EI_GRP_SEQ_NO",
		 "SUBSCR_NO",
		 "TRX_SEQ_NO",
		 "ITEM_STRT_DT",
		 "EQP_TY",
		 "EQP_SRC",
		 "ITEM_ID",
		 "ITEM_END_DT",
		 "PROV_CUST",
		 "BRND",
		 "KUNNR_SID",
		 "CONTR_TRANS_DT",
		 "COST_CENTRE",
		 "DIST_CHANNEL",
		 "GL_ACCOUNT",
		 "JURISD_CD",
		 "ITEM_TRANS_DT",
		 "CHRG_TY_CLASSIF",
		 "TERM_M2M",
		 "BASE_OPT_SERV_IND",
		 "BSE_SOC",
		 "BSE_SOC_AMT",
		 "GL_TAX_CD",
		 "MIN_TIER_PRC",
		 "PROV_AGR",
		 "SERV_TIER",
		 "SOC_LEV_CD",
		 "SUBS_EFF_DT",
		 "SUBS_EXP_DT",
		 "ITEM_SUB_ID",
		 "REV_CD",
		 "GL_PRICE_PLAN_GRP",
		 "ORIG_CONTR_STRT_DT",
		 "ORIG_CONTR_TERM",
		 "ORIG_STNDLN_SELL_PRC",
		 "ORIG_TRANS_PRC",
		 "STNDLN_SELL_PRC",
		 "ITEM_GRP_CD",
		 "PROMO_CD",
		 "POB_END_DT",
		 "SUBS_AMT",
		 "TRANS_PRC",
		 "BATCH_ID",
		 "FLAG_EXISTING_RECORD",		
	     "VIR_INV_TS",
	     "CUSTOMER_GROUP",
         "MATERIAL_GROUP",
         "REV_ACTG_DOC_NUM",
         "BANNER",
         "DEALER",
         "REV_ACT_DOC_TY",
         "ART_NUM",
         "CONTR_EXPY_DT",
         "SIM",
         "SRC_FILE_NAME",
         "SALES_DOC_TYP",
         "REC_EXPIRY_DT",
         "CC_CONCAT_PK",
         "PREV_SUBS",
         "CONTR_TRAN_FLG",
         "CYCLE_NUM"
		FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_ORDER_COAM_CONTR"
		(PLACEHOLDER."$$IP_EFF_DT$$"=> :IP_EFF_DT) VW
		WHERE VW.CONTR_TRAN_FLG ='N'
		ORDER BY "BAN","CONTR_TRANS_DT","ITEM_ID","ITEM_TRANS_DT","SUBSCR_NO","TRX_SEQ_NO","ITEM_SUB_ID", "CONTR_EXPY_DT";
	

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------  
CREATE LOCAL TEMPORARY TABLE #UPDATE_NM1_EDW_CONTR(BAN NVARCHAR(9),SUBSCRIBER_NO NVARCHAR(30), EFF_DT DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_NM1_EDW_EQP(BAN NVARCHAR(9), ESN_IMEI NVARCHAR(20), SIM NVARCHAR(20), SUBCR_NO NVARCHAR(30), TRANS_DT DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(BAN NVARCHAR(9), CONTR_TRANS_DT DATE, ITEM_ID NVARCHAR(20), ITEM_TRANS_DT DATE,
												TRX_SEQ_NO NVARCHAR(12), SUBSCR_NO NVARCHAR(30));

--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 
	FOR CUR_ORDER AS CUR_ORDER_COAM DO
		-- Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION
			-- Define Exit Handler
			DECLARE EXIT HANDLER FOR SQLEXCEPTION 
			BEGIN AUTONOMOUS TRANSACTION 
			END;
			
			INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH"(
			 ACTV_CD,
			 ACTV_RSN_CD,
			 BAN,
			 BASE_OPT_SERV_IND,			 
		 	 BSE_SOC,
			 BSE_SOC_AMT,
			 BYRS_RMRSE,
			 CHRG_TY_CLASSIF,
			 CONTR_DEALER_CODE,
			 CONTR_END_DT,
			 CONTR_ID,
			 CONTR_STRT_DT,
			 CONTR_TERM,
			 CONTR_TIER,
			 CONTR_TRANS_DT,
			 CONTR_TY,
			 COST_CENTRE,			
			 EI_GRP_SEQ_NO,
			 EQP_SRC,
			 EQP_TY,			
			 GL_ACCOUNT,
			 GL_TAX_CD,
			 INSERT_TS,		
			 ITEM_END_DT,
			 ITEM_GRP_CD,
			 ITEM_ID,
			 ITEM_STRT_DT,
			 ITEM_SUB_ID,
			 ITEM_TRANS_DT,
			 JURISD_CD,
			 MIN_TIER_PRC,
			 POB_END_DT,
			 PROMO_CD,
			 PROV_AGR,
			 PROV_CUST,
			 BRND,
			 SERV_TIER,
			 SOC_LEV_CD,
			 STNDLN_SELL_PRC,
			 SUBS_AMT,
			 SUBS_EFF_DT,
			 SUBS_EXP_DT,
			 SUBSCR_NO,
			 TERM_M2M,
			 TRANS_PRC,
			 TRX_SEQ_NO,
			 GL_PRICE_PLAN_GRP,
			 KUNNR_SID,
			 ORIG_CONTR_STRT_DT,
			 ORIG_CONTR_TERM,
			 ORIG_STNDLN_SELL_PRC,
			 ORIG_TRANS_PRC,
			 BATCH_ID,
			 VIR_INV_TS,
			 DIST_CHANNEL,
			 CUSTOMER_GROUP,
		     MATERIAL_GROUP,
		     REV_ACTG_DOC_NUM,
		     BANNER,
		     DEALER,
		     REV_ACT_DOC_TY,
		     ART_NUM,
		     CYCLE_NUM,
			 ERROR_CODE,
			 TECHNICAL_MESSAGE,
			 ERROR_CREATE_TS
			 ) VALUES (
			 CUR_ORDER.ACTV_CD,
			 CUR_ORDER.ACTV_RSN_CD,
			 CUR_ORDER.BAN,
			 CUR_ORDER.BASE_OPT_SERV_IND,
		 	 CUR_ORDER.BSE_SOC,
			 CUR_ORDER.BSE_SOC_AMT,
			 CUR_ORDER.BYRS_RMRSE,
			 CUR_ORDER.CHRG_TY_CLASSIF,
			 CUR_ORDER.CONTR_DEALER_CODE,
			 CUR_ORDER.CONTR_END_DT,
			 CUR_ORDER.CONTR_ID,
			 CUR_ORDER.CONTR_STRT_DT,
			 CUR_ORDER.CONTR_TERM,
			 CUR_ORDER.CONTR_TIER,
			 CUR_ORDER.CONTR_TRANS_DT,
			 CUR_ORDER.CONTR_TY,
			 CUR_ORDER.COST_CENTRE,			 
			 CUR_ORDER.EI_GRP_SEQ_NO,
			 CUR_ORDER.EQP_SRC,
			 CUR_ORDER.EQP_TY,			 
			 CUR_ORDER.GL_ACCOUNT,
		     CUR_ORDER.GL_TAX_CD,
			 LV_CUR_UTC,
			 CUR_ORDER.ITEM_END_DT,
			 CUR_ORDER.ITEM_GRP_CD,
			 CUR_ORDER.ITEM_ID,
			 CUR_ORDER.ITEM_STRT_DT,
			 CUR_ORDER.ITEM_SUB_ID,
			 CUR_ORDER.ITEM_TRANS_DT,
			 CUR_ORDER.JURISD_CD,
			 CUR_ORDER.MIN_TIER_PRC,
			 CUR_ORDER.POB_END_DT,
			 CUR_ORDER.PROMO_CD,
			 CUR_ORDER.PROV_AGR,
			 CUR_ORDER.PROV_CUST,
		 	 CUR_ORDER.BRND,
			 CUR_ORDER.SERV_TIER,
			 CUR_ORDER.SOC_LEV_CD,
			 CUR_ORDER.STNDLN_SELL_PRC,
			 CUR_ORDER.SUBS_AMT,
			 CUR_ORDER.SUBS_EFF_DT,
			 CUR_ORDER.SUBS_EXP_DT,
			 CUR_ORDER.SUBSCR_NO,
			 CUR_ORDER.TERM_M2M,
			 CUR_ORDER.TRANS_PRC,
			 CUR_ORDER.TRX_SEQ_NO ,
			 CUR_ORDER.GL_PRICE_PLAN_GRP,
			 CUR_ORDER.KUNNR_SID,
			 CUR_ORDER.ORIG_CONTR_STRT_DT,
			 CUR_ORDER.ORIG_CONTR_TERM,
			 CUR_ORDER.ORIG_STNDLN_SELL_PRC,
			 CUR_ORDER.ORIG_TRANS_PRC,
			 CUR_ORDER.BATCH_ID,
			 CUR_ORDER.VIR_INV_TS,
			 CUR_ORDER.DIST_CHANNEL,
			 CUR_ORDER.CUSTOMER_GROUP,
		     CUR_ORDER.MATERIAL_GROUP,
		     CUR_ORDER.REV_ACTG_DOC_NUM,
		     CUR_ORDER.BANNER,
		     CUR_ORDER.DEALER,
		     CUR_ORDER.REV_ACT_DOC_TY,
		     CUR_ORDER.ART_NUM,
		     CUR_ORDER.CYCLE_NUM,
			 ::SQL_ERROR_CODE,
			 ::SQL_ERROR_MESSAGE,
	  		 LV_CUR_UTC);		
			 LV_ERROR_FLAG := 'Y';
			LV_LOOP_ERROR_FLAG := 1;
		--END for AUTONOMOS   			
		END;
		
	-- FOR CLEARING THE VARIABLES

		IF (LV_PREV_BAN_SUB IS NULL OR CUR_ORDER.CC_CONCAT_PK != LV_PREV_BAN_SUB) THEN

			LV_LOOP_ERROR_FLAG := 0;
			LV_PREV_BAN_SUB := CUR_ORDER."CC_CONCAT_PK";
			
		END IF;

		--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
		IF CUR_ORDER.ERROR_STATUS = '1' THEN
		-- Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		   CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_ORDER."ERROR_CODE", ERROR_TAB, RECORD_COUNT);
		   FOR i IN 1 .. :RECORD_COUNT DO
		    	CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
				INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH"(
				 ACTV_CD,
				 ACTV_RSN_CD,
				 BAN,
				 BASE_OPT_SERV_IND,			 
			 	 BSE_SOC,
				 BSE_SOC_AMT,
				 BYRS_RMRSE,
				 CHRG_TY_CLASSIF,
				 CONTR_DEALER_CODE,
				 CONTR_END_DT,
				 CONTR_ID,
				 CONTR_STRT_DT,
				 CONTR_TERM,
				 CONTR_TIER,
				 CONTR_TRANS_DT,
				 CONTR_TY,
				 COST_CENTRE,			
				 EI_GRP_SEQ_NO,
				 EQP_SRC,
				 EQP_TY,			
				 GL_ACCOUNT,
				 GL_TAX_CD,
				 INSERT_TS,		
				 ITEM_END_DT,
				 ITEM_GRP_CD,
				 ITEM_ID,
				 ITEM_STRT_DT,
				 ITEM_SUB_ID,
				 ITEM_TRANS_DT,
				 JURISD_CD,
				 MIN_TIER_PRC,
				 POB_END_DT,
				 PROMO_CD,
				 PROV_AGR,
				 PROV_CUST,
				 BRND,
				 SERV_TIER,
				 SOC_LEV_CD,
				 STNDLN_SELL_PRC,
				 SUBS_AMT,
				 SUBS_EFF_DT,
				 SUBS_EXP_DT,
				 SUBSCR_NO,
				 TERM_M2M,
				 TRANS_PRC,
				 TRX_SEQ_NO,
				 GL_PRICE_PLAN_GRP,
				 KUNNR_SID,
				 ORIG_CONTR_STRT_DT,
				 ORIG_CONTR_TERM,
				 ORIG_STNDLN_SELL_PRC,
				 ORIG_TRANS_PRC,
				 BATCH_ID,
				 VIR_INV_TS,
				 DIST_CHANNEL,
				 CUSTOMER_GROUP,
			     MATERIAL_GROUP,
			     REV_ACTG_DOC_NUM,
			     BANNER,
			     DEALER,
			     REV_ACT_DOC_TY,
			     ART_NUM,
			     CYCLE_NUM,
				 ERROR_CODE,
				 ERROR_CREATE_TS
				 ) VALUES (
				 CUR_ORDER.ACTV_CD,
				 CUR_ORDER.ACTV_RSN_CD,
				 CUR_ORDER.BAN,
				 CUR_ORDER.BASE_OPT_SERV_IND,
			 	 CUR_ORDER.BSE_SOC,
				 CUR_ORDER.BSE_SOC_AMT,
				 CUR_ORDER.BYRS_RMRSE,
				 CUR_ORDER.CHRG_TY_CLASSIF,
				 CUR_ORDER.CONTR_DEALER_CODE,
				 CUR_ORDER.CONTR_END_DT,
				 CUR_ORDER.CONTR_ID,
				 CUR_ORDER.CONTR_STRT_DT,
				 CUR_ORDER.CONTR_TERM,
				 CUR_ORDER.CONTR_TIER,
				 CUR_ORDER.CONTR_TRANS_DT,
				 CUR_ORDER.CONTR_TY,
				 CUR_ORDER.COST_CENTRE,			 
				 CUR_ORDER.EI_GRP_SEQ_NO,
				 CUR_ORDER.EQP_SRC,
				 CUR_ORDER.EQP_TY,			 
				 CUR_ORDER.GL_ACCOUNT,
			     CUR_ORDER.GL_TAX_CD,
				 LV_CUR_UTC,
				 CUR_ORDER.ITEM_END_DT,
				 CUR_ORDER.ITEM_GRP_CD,
				 CUR_ORDER.ITEM_ID,
				 CUR_ORDER.ITEM_STRT_DT,
				 CUR_ORDER.ITEM_SUB_ID,
				 CUR_ORDER.ITEM_TRANS_DT,
				 CUR_ORDER.JURISD_CD,
				 CUR_ORDER.MIN_TIER_PRC,
				 CUR_ORDER.POB_END_DT,
				 CUR_ORDER.PROMO_CD,
				 CUR_ORDER.PROV_AGR,
				 CUR_ORDER.PROV_CUST,
			 	 CUR_ORDER.BRND,
				 CUR_ORDER.SERV_TIER,
				 CUR_ORDER.SOC_LEV_CD,
				 CUR_ORDER.STNDLN_SELL_PRC,
				 CUR_ORDER.SUBS_AMT,
				 CUR_ORDER.SUBS_EFF_DT,
				 CUR_ORDER.SUBS_EXP_DT,
				 CUR_ORDER.SUBSCR_NO,
				 CUR_ORDER.TERM_M2M,
				 CUR_ORDER.TRANS_PRC,
				 CUR_ORDER.TRX_SEQ_NO ,
				 CUR_ORDER.GL_PRICE_PLAN_GRP,
				 CUR_ORDER.KUNNR_SID,
				 CUR_ORDER.ORIG_CONTR_STRT_DT,
				 CUR_ORDER.ORIG_CONTR_TERM,
				 CUR_ORDER.ORIG_STNDLN_SELL_PRC,
				 CUR_ORDER.ORIG_TRANS_PRC,
				 CUR_ORDER.BATCH_ID,
				 CUR_ORDER.VIR_INV_TS,
				 CUR_ORDER.DIST_CHANNEL,
				 CUR_ORDER.CUSTOMER_GROUP,
			     CUR_ORDER.MATERIAL_GROUP,
			     CUR_ORDER.REV_ACTG_DOC_NUM,
			     CUR_ORDER.BANNER,
			     CUR_ORDER.DEALER,
			     CUR_ORDER.REV_ACT_DOC_TY,
			     CUR_ORDER.ART_NUM,
			     CUR_ORDER.CYCLE_NUM,
				 :CURRENT_ERROR,
		  		 LV_CUR_UTC);	    		
		    	--End for 2nd for
		    	END FOR ;
		        LV_ERROR_FLAG := 'Y';
		    	LV_LOOP_ERROR_FLAG := 1;
		    	
------------------------------------------------------X-X-X-X-----------------------------------------------------			
		ELSE
			IF CUR_ORDER.ERROR_STATUS = '0' THEN
	    
		        IF LV_LOOP_ERROR_FLAG = 1 THEN
			INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH"(
				 ACTV_CD,
				 ACTV_RSN_CD,
				 BAN,
				 BASE_OPT_SERV_IND,			 
			 	 BSE_SOC,
				 BSE_SOC_AMT,
				 BYRS_RMRSE,
				 CHRG_TY_CLASSIF,
				 CONTR_DEALER_CODE,
				 CONTR_END_DT,
				 CONTR_ID,
				 CONTR_STRT_DT,
				 CONTR_TERM,
				 CONTR_TIER,
				 CONTR_TRANS_DT,
				 CONTR_TY,
				 COST_CENTRE,			
				 EI_GRP_SEQ_NO,
				 EQP_SRC,
				 EQP_TY,			
				 GL_ACCOUNT,
				 GL_TAX_CD,
				 INSERT_TS,		
				 ITEM_END_DT,
				 ITEM_GRP_CD,
				 ITEM_ID,
				 ITEM_STRT_DT,
				 ITEM_SUB_ID,
				 ITEM_TRANS_DT,
				 JURISD_CD,
				 MIN_TIER_PRC,
				 POB_END_DT,
				 PROMO_CD,
				 PROV_AGR,
				 PROV_CUST,
				 BRND,
				 SERV_TIER,
				 SOC_LEV_CD,
				 STNDLN_SELL_PRC,
				 SUBS_AMT,
				 SUBS_EFF_DT,
				 SUBS_EXP_DT,
				 SUBSCR_NO,
				 TERM_M2M,
				 TRANS_PRC,
				 TRX_SEQ_NO,
				 GL_PRICE_PLAN_GRP,
				 KUNNR_SID,
				 ORIG_CONTR_STRT_DT,
				 ORIG_CONTR_TERM,
				 ORIG_STNDLN_SELL_PRC,
				 ORIG_TRANS_PRC,
				 BATCH_ID,
				 VIR_INV_TS,
				 DIST_CHANNEL,
				 CUSTOMER_GROUP,
			     MATERIAL_GROUP,
			     REV_ACTG_DOC_NUM,
			     BANNER,
			     DEALER,
			     REV_ACT_DOC_TY,
			     ART_NUM,
			     CYCLE_NUM,
				 ERROR_CODE,
				 ERROR_CREATE_TS
				 ) VALUES (
				 CUR_ORDER.ACTV_CD,
				 CUR_ORDER.ACTV_RSN_CD,
				 CUR_ORDER.BAN,
				 CUR_ORDER.BASE_OPT_SERV_IND,
			 	 CUR_ORDER.BSE_SOC,
				 CUR_ORDER.BSE_SOC_AMT,
				 CUR_ORDER.BYRS_RMRSE,
				 CUR_ORDER.CHRG_TY_CLASSIF,
				 CUR_ORDER.CONTR_DEALER_CODE,
				 CUR_ORDER.CONTR_END_DT,
				 CUR_ORDER.CONTR_ID,
				 CUR_ORDER.CONTR_STRT_DT,
				 CUR_ORDER.CONTR_TERM,
				 CUR_ORDER.CONTR_TIER,
				 CUR_ORDER.CONTR_TRANS_DT,
				 CUR_ORDER.CONTR_TY,
				 CUR_ORDER.COST_CENTRE,			 
				 CUR_ORDER.EI_GRP_SEQ_NO,
				 CUR_ORDER.EQP_SRC,
				 CUR_ORDER.EQP_TY,			 
				 CUR_ORDER.GL_ACCOUNT,
			     CUR_ORDER.GL_TAX_CD,
				 LV_CUR_UTC,
				 CUR_ORDER.ITEM_END_DT,
				 CUR_ORDER.ITEM_GRP_CD,
				 CUR_ORDER.ITEM_ID,
				 CUR_ORDER.ITEM_STRT_DT,
				 CUR_ORDER.ITEM_SUB_ID,
				 CUR_ORDER.ITEM_TRANS_DT,
				 CUR_ORDER.JURISD_CD,
				 CUR_ORDER.MIN_TIER_PRC,
				 CUR_ORDER.POB_END_DT,
				 CUR_ORDER.PROMO_CD,
				 CUR_ORDER.PROV_AGR,
				 CUR_ORDER.PROV_CUST,
			 	 CUR_ORDER.BRND,
				 CUR_ORDER.SERV_TIER,
				 CUR_ORDER.SOC_LEV_CD,
				 CUR_ORDER.STNDLN_SELL_PRC,
				 CUR_ORDER.SUBS_AMT,
				 CUR_ORDER.SUBS_EFF_DT,
				 CUR_ORDER.SUBS_EXP_DT,
				 CUR_ORDER.SUBSCR_NO,
				 CUR_ORDER.TERM_M2M,
				 CUR_ORDER.TRANS_PRC,
				 CUR_ORDER.TRX_SEQ_NO ,
				 CUR_ORDER.GL_PRICE_PLAN_GRP,
				 CUR_ORDER.KUNNR_SID,
				 CUR_ORDER.ORIG_CONTR_STRT_DT,
				 CUR_ORDER.ORIG_CONTR_TERM,
				 CUR_ORDER.ORIG_STNDLN_SELL_PRC,
				 CUR_ORDER.ORIG_TRANS_PRC,
				 CUR_ORDER.BATCH_ID,
				 CUR_ORDER.VIR_INV_TS,
				 CUR_ORDER.DIST_CHANNEL,
				 CUR_ORDER.CUSTOMER_GROUP,
			     CUR_ORDER.MATERIAL_GROUP,
			     CUR_ORDER.REV_ACTG_DOC_NUM,
			     CUR_ORDER.BANNER,
			     CUR_ORDER.DEALER,
			     CUR_ORDER.REV_ACT_DOC_TY,
			     CUR_ORDER.ART_NUM,
			     CUR_ORDER.CYCLE_NUM,
				 :CURRENT_ERROR,
		  		 LV_CUR_UTC);	    		
		    	--End for 2nd for
		    	--END FOR;
		ELSE

------------------------------------------------------X-X-X-X-----------------------------------------------------			

		-- Processing for Successful Records
		--ELSEIF
		 IF (CUR_ORDER.FLAG_EXISTING_RECORD = 'U') AND (CUR_ORDER.ITEM_END_DT IS NOT NULL) THEN 
			    	BEGIN AUTONOMOUS TRANSACTION
			    	
			    	UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER" ORD 
					SET (POB_END_DT,MODIFIED_TS) = (CUR_ORDER.ITEM_END_DT,:LV_CUR_UTC) 
						WHERE ORD.BAN = CUR_ORDER.BAN
						AND ORD.SUBSCR_NO = CUR_ORDER.SUBSCR_NO  
						AND ORD.ITEM_ID = CUR_ORDER.ITEM_ID
						AND POB_END_DT = '99991231';		    	
		    	
			    	--Insert modification data into NDB ORDER table
					 INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER"(
					     ACTV_CD,
						 ACTV_RSN_CD,
						 BAN,
						 BASE_OPT_SERV_IND,					 
					 	 BSE_SOC,
						 BSE_SOC_AMT,
						 BYRS_RMRSE,
						 CHRG_TY_CLASSIF,
						 CONTR_DEALER_CODE,
						 CONTR_END_DT,
						 CONTR_ID,
						 CONTR_STRT_DT,
						 CONTR_TERM,
						 CONTR_TIER,
						 CONTR_TRANS_DT,
						 CONTR_TY,
						 COST_CENTRE,					
						 EI_GRP_SEQ_NO,
						 EQP_SRC,
						 EQP_TY,					 
						 GL_ACCOUNT,
						 GL_TAX_CD,
						 INSERT_TS,					
						 ITEM_END_DT,
						 ITEM_GRP_CD,
						 ITEM_ID,
						 ITEM_STRT_DT,
						 ITEM_SUB_ID,
						 ITEM_TRANS_DT,
						 JURISD_CD,
						 MIN_TIER_PRC,
						 POB_END_DT,
						 PROMO_CD,
						 PROV_AGR,
						 PROV_CUST,
						 BRND,
						 SERV_TIER,
						 SOC_LEV_CD,
						 STNDLN_SELL_PRC,
						 SUBS_AMT,
						 SUBS_EFF_DT,
						 SUBS_EXP_DT,
						 SUBSCR_NO,
						 TERM_M2M,
						 TRANS_PRC,
						 TRX_SEQ_NO,
						 GL_PRICE_PLAN_GRP,
						 KUNNR_SID,
						 ORIG_CONTR_STRT_DT,
						 ORIG_CONTR_TERM,
						 ORIG_STNDLN_SELL_PRC,
						 ORIG_TRANS_PRC,
						 BATCH_ID,
						 VIR_INV_TS,
						 DIST_CHANNEL,
						 CUSTOMER_GROUP,
					     MATERIAL_GROUP,
					     REV_ACTG_DOC_NUM,
					     BANNER,
					     DEALER,
					     REV_ACT_DOC_TY,
					     ART_NUM,
					     CYCLE_NUM
						 ) VALUES (
						 CUR_ORDER.ACTV_CD,
						 CUR_ORDER.ACTV_RSN_CD,
						 CUR_ORDER.BAN,
						 CUR_ORDER.BASE_OPT_SERV_IND,
					 	 CUR_ORDER.BSE_SOC,
						 CUR_ORDER.BSE_SOC_AMT,
						 CUR_ORDER.BYRS_RMRSE,
						 CUR_ORDER.CHRG_TY_CLASSIF,
						 CUR_ORDER.CONTR_DEALER_CODE,
						 CUR_ORDER.CONTR_END_DT,
						 CUR_ORDER.CONTR_ID,
						 CUR_ORDER.CONTR_STRT_DT,
						 CUR_ORDER.CONTR_TERM,
						 CUR_ORDER.CONTR_TIER,
						 CUR_ORDER.CONTR_TRANS_DT,
						 CUR_ORDER.CONTR_TY,
						 CUR_ORDER.COST_CENTRE,					 
						 CUR_ORDER.EI_GRP_SEQ_NO,
						 CUR_ORDER.EQP_SRC,
						 CUR_ORDER.EQP_TY,					 
						 CUR_ORDER.GL_ACCOUNT,
					     CUR_ORDER.GL_TAX_CD,
						 LV_CUR_UTC,					
						 CUR_ORDER.ITEM_END_DT,
						 CUR_ORDER.ITEM_GRP_CD,
						 CUR_ORDER.ITEM_ID,
						 CUR_ORDER.ITEM_STRT_DT,
						 CUR_ORDER.ITEM_SUB_ID,
						 CUR_ORDER.ITEM_TRANS_DT,
						 CUR_ORDER.JURISD_CD,
						 CUR_ORDER.MIN_TIER_PRC,
						 CUR_ORDER.POB_END_DT,
						 CUR_ORDER.PROMO_CD,
						 CUR_ORDER.PROV_AGR,
						 CUR_ORDER.PROV_CUST,
					 	 CUR_ORDER.BRND,
						 CUR_ORDER.SERV_TIER,
						 CUR_ORDER.SOC_LEV_CD,
						 CUR_ORDER.STNDLN_SELL_PRC,
						 CUR_ORDER.SUBS_AMT,
						 CUR_ORDER.SUBS_EFF_DT,
						 CUR_ORDER.SUBS_EXP_DT,
						 CUR_ORDER.SUBSCR_NO,
						 CUR_ORDER.TERM_M2M,
						 CUR_ORDER.TRANS_PRC,
						 CUR_ORDER.TRX_SEQ_NO ,
						 CUR_ORDER.GL_PRICE_PLAN_GRP,
						 CUR_ORDER.KUNNR_SID,
						 CUR_ORDER.ORIG_CONTR_STRT_DT,
						 CUR_ORDER.ORIG_CONTR_TERM,
						 CUR_ORDER.ORIG_STNDLN_SELL_PRC,
						 CUR_ORDER.ORIG_TRANS_PRC,
						 CUR_ORDER.BATCH_ID,
						 CUR_ORDER.VIR_INV_TS,
						 CUR_ORDER.DIST_CHANNEL,
						 CUR_ORDER.CUSTOMER_GROUP,
					     CUR_ORDER.MATERIAL_GROUP,
					     CUR_ORDER.REV_ACTG_DOC_NUM,
					     CUR_ORDER.BANNER,
					     CUR_ORDER.DEALER,
					     CUR_ORDER.REV_ACT_DOC_TY,
					     CUR_ORDER.ART_NUM,
					     CUR_ORDER.CYCLE_NUM);

					     

					UPDATE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::P77_TRANS_DEVICES" P
 					   SET (P."POST_MOBL_SUBSCR") = (CUR_ORDER."SUBSCR_NO")
       				 WHERE P."PRIMARY_SERIAL_NUM" = CUR_ORDER."ITEM_ID"
       				   AND P."SRC_FILE_NAME" = CUR_ORDER."SRC_FILE_NAME"
       				   AND P."SALES_DOC_TYP" = CUR_ORDER."SALES_DOC_TYP"
       				   AND P."REC_EXPIRY_DT" = CUR_ORDER."REC_EXPIRY_DT"
       				   AND P."POST_MOBL_SUBSCR" IS NULL;
     	 
		    	END;
		    		
		    		-- Insert PK of successfully processed Records into Local Temp Tables 
					-- For Updating NDB_TS in corresponding Landing Tables records
					INSERT INTO #UPDATE_NM1_EDW_CONTR
					   (BAN,
						SUBSCRIBER_NO,
						EFF_DT)
					   	VALUES (CUR_ORDER."BAN",
					    CUR_ORDER."SUBSCR_NO",
					    CUR_ORDER."CONTR_TRANS_DT");  
					INSERT INTO #UPDATE_NM1_EDW_EQP
					   (BAN,
						ESN_IMEI,
						SIM,
						SUBCR_NO,
						TRANS_DT)
					   	VALUES (CUR_ORDER."BAN",
					    CUR_ORDER."ITEM_ID",
					    CUR_ORDER."SIM",
					    CUR_ORDER."SUBSCR_NO",
					    CUR_ORDER."ITEM_TRANS_DT"); 
					    
					 INSERT INTO #UPDATE_EH_DELETION
					    (BAN,
					    CONTR_TRANS_DT,
					    ITEM_ID,
					    ITEM_TRANS_DT,
						TRX_SEQ_NO,
						SUBSCR_NO)     
 	     	  			VALUES (CUR_ORDER."BAN",
 	     	  			CUR_ORDER.CONTR_TRANS_DT,
 	     	  			CUR_ORDER."ITEM_ID",
			 			CUR_ORDER."ITEM_TRANS_DT",
					 	CUR_ORDER."TRX_SEQ_NO",
					 	CUR_ORDER."SUBSCR_NO");   	    	

		    ELSEIF (CUR_ORDER.FLAG_EXISTING_RECORD = 'I') THEN
		    
		    BEGIN AUTONOMOUS TRANSACTION
		    --Insert modification data into NDB ORDER table, dont insert NULL, don't include columns
		    	INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER"(
				     ACTV_CD,
					 ACTV_RSN_CD,
					 BAN,
					 BASE_OPT_SERV_IND,					 
				 	 BSE_SOC,
					 BSE_SOC_AMT,
					 BYRS_RMRSE,
					 CHRG_TY_CLASSIF,
					 CONTR_DEALER_CODE,
					 CONTR_END_DT,
					 CONTR_ID,
					 CONTR_STRT_DT,
					 CONTR_TERM,
					 CONTR_TIER,
					 CONTR_TRANS_DT,
					 CONTR_TY,
					 COST_CENTRE,					
					 EI_GRP_SEQ_NO,
					 EQP_SRC,
					 EQP_TY,					 
					 GL_ACCOUNT,
					 GL_TAX_CD,
					 INSERT_TS,					
					 ITEM_END_DT,
					 ITEM_GRP_CD,
					 ITEM_ID,
					 ITEM_STRT_DT,
					 ITEM_SUB_ID,
					 ITEM_TRANS_DT,
					 JURISD_CD,
					 MIN_TIER_PRC,
					 POB_END_DT,
					 PROMO_CD,
					 PROV_AGR,
					 PROV_CUST,
					 BRND,
					 SERV_TIER,
					 SOC_LEV_CD,
					 STNDLN_SELL_PRC,
					 SUBS_AMT,
					 SUBS_EFF_DT,
					 SUBS_EXP_DT,
					 SUBSCR_NO,
					 TERM_M2M,
					 TRANS_PRC,
					 TRX_SEQ_NO,
					 GL_PRICE_PLAN_GRP,
					 KUNNR_SID,
					 ORIG_CONTR_STRT_DT,
					 ORIG_CONTR_TERM,
					 ORIG_STNDLN_SELL_PRC,
					 ORIG_TRANS_PRC,
					 BATCH_ID,
					 VIR_INV_TS,
					 DIST_CHANNEL,
					 CUSTOMER_GROUP,
					 MATERIAL_GROUP,
					 REV_ACTG_DOC_NUM,
					 BANNER,
					 DEALER,
					 REV_ACT_DOC_TY,
					 ART_NUM,
					 CYCLE_NUM
					 ) VALUES (
					 CUR_ORDER.ACTV_CD,
					 CUR_ORDER.ACTV_RSN_CD,
					 CUR_ORDER.BAN,
					 CUR_ORDER.BASE_OPT_SERV_IND,
				 	 CUR_ORDER.BSE_SOC,
					 CUR_ORDER.BSE_SOC_AMT,
					 CUR_ORDER.BYRS_RMRSE,
					 CUR_ORDER.CHRG_TY_CLASSIF,
					 CUR_ORDER.CONTR_DEALER_CODE,
					 CUR_ORDER.CONTR_END_DT,
					 CUR_ORDER.CONTR_ID,
					 CUR_ORDER.CONTR_STRT_DT,
					 CUR_ORDER.CONTR_TERM,
					 CUR_ORDER.CONTR_TIER,
					 CUR_ORDER.CONTR_TRANS_DT,
					 CUR_ORDER.CONTR_TY,
					 CUR_ORDER.COST_CENTRE,					 
					 CUR_ORDER.EI_GRP_SEQ_NO,
					 CUR_ORDER.EQP_SRC,
					 CUR_ORDER.EQP_TY,					 
					 CUR_ORDER.GL_ACCOUNT,
				     CUR_ORDER.GL_TAX_CD,
					 LV_CUR_UTC,					
					 CUR_ORDER.ITEM_END_DT,
					 CUR_ORDER.ITEM_GRP_CD,
					 CUR_ORDER.ITEM_ID,
					 CUR_ORDER.ITEM_STRT_DT,
					 CUR_ORDER.ITEM_SUB_ID,
					 CUR_ORDER.ITEM_TRANS_DT,
					 CUR_ORDER.JURISD_CD,
					 CUR_ORDER.MIN_TIER_PRC,
					 CUR_ORDER.POB_END_DT,
					 CUR_ORDER.PROMO_CD,
					 CUR_ORDER.PROV_AGR,
					 CUR_ORDER.PROV_CUST,
				 	 CUR_ORDER.BRND,
					 CUR_ORDER.SERV_TIER,
					 CUR_ORDER.SOC_LEV_CD,
					 CUR_ORDER.STNDLN_SELL_PRC,
					 CUR_ORDER.SUBS_AMT,
					 CUR_ORDER.SUBS_EFF_DT,
					 CUR_ORDER.SUBS_EXP_DT,
					 CUR_ORDER.SUBSCR_NO,
					 CUR_ORDER.TERM_M2M,
					 CUR_ORDER.TRANS_PRC,
					 CUR_ORDER.TRX_SEQ_NO ,
					 CUR_ORDER.GL_PRICE_PLAN_GRP,
					 CUR_ORDER.KUNNR_SID,
					 CUR_ORDER.ORIG_CONTR_STRT_DT,
					 CUR_ORDER.ORIG_CONTR_TERM,
					 CUR_ORDER.ORIG_STNDLN_SELL_PRC,
					 CUR_ORDER.ORIG_TRANS_PRC,
					 CUR_ORDER.BATCH_ID,
					 CUR_ORDER.VIR_INV_TS,
					 CUR_ORDER.DIST_CHANNEL,
					 CUR_ORDER.CUSTOMER_GROUP,
					 CUR_ORDER.MATERIAL_GROUP,
					 CUR_ORDER.REV_ACTG_DOC_NUM,
					 CUR_ORDER.BANNER,
					 CUR_ORDER.DEALER,
					 CUR_ORDER.REV_ACT_DOC_TY,
					 CUR_ORDER.ART_NUM,
					 CUR_ORDER.CYCLE_NUM);

					 

					 UPDATE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::P77_TRANS_DEVICES" P
					    SET (P."POST_MOBL_SUBSCR") = (CUR_ORDER."SUBSCR_NO")
					  WHERE P."PRIMARY_SERIAL_NUM" = CUR_ORDER."ITEM_ID"
					    AND P."SRC_FILE_NAME" = CUR_ORDER."SRC_FILE_NAME"
       				    AND P."SALES_DOC_TYP" = CUR_ORDER."SALES_DOC_TYP"
       				    AND P."REC_EXPIRY_DT" = CUR_ORDER."REC_EXPIRY_DT"
       				    AND P."POST_MOBL_SUBSCR" IS NULL;
					  
					  END;
					-- Insert PK of successfully processed Records into Local Temp Tables 
					-- For Updating NDB_TS in corresponding Landing Tables records
					INSERT INTO #UPDATE_NM1_EDW_CONTR
					   (BAN,
						SUBSCRIBER_NO,
						EFF_DT)
					   	VALUES (CUR_ORDER."BAN",
					    CUR_ORDER."SUBSCR_NO",
					    CUR_ORDER."CONTR_TRANS_DT");  
					INSERT INTO #UPDATE_NM1_EDW_EQP
					   (BAN,
						ESN_IMEI,
						SIM,
						SUBCR_NO,
						TRANS_DT)
					   	VALUES (CUR_ORDER."BAN",
					    CUR_ORDER."ITEM_ID",
					    CUR_ORDER."SIM",
					    CUR_ORDER."SUBSCR_NO",
					    CUR_ORDER."ITEM_TRANS_DT"); 
					    
					 INSERT INTO #UPDATE_EH_DELETION
					    (BAN,
					    CONTR_TRANS_DT,
					    ITEM_ID,
					    ITEM_TRANS_DT,
						TRX_SEQ_NO,
						SUBSCR_NO)     
 	     	  			VALUES (CUR_ORDER."BAN",
 	     	  			CUR_ORDER.CONTR_TRANS_DT,
 	     	  			CUR_ORDER."ITEM_ID",
			 			CUR_ORDER."ITEM_TRANS_DT",
					 	CUR_ORDER."TRX_SEQ_NO",
					 	CUR_ORDER."SUBSCR_NO");  
		   END IF;
    
    END IF; 
  
  END IF; 
 
 END IF;

END FOR;	

	
	
	-- Update Landing Table IFRS_R1.LAND::NM1_EDW_CONTR
    UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_CONTR" A 
	FROM "LAND"."IFRS_R1.LAND::NM1_EDW_CONTR" A
	INNER JOIN #UPDATE_NM1_EDW_CONTR B 
	ON A.BAN = B.BAN
	AND A.SUBSCRIBER_NO = B.SUBSCRIBER_NO
	AND A.EFF_DT = B.EFF_DT
	SET A.SP_ORDER_COAM_CONTR_TS = LV_CUR_UTC 
	WHERE A.SP_ORDER_COAM_CONTR_TS IS NULL;
    
     -- Update NDB_TS with current_timestamp for the records that has been processed  
	UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_EQP" A
	FROM "LAND"."IFRS_R1.LAND::NM1_EDW_EQP" A 
	INNER JOIN #UPDATE_NM1_EDW_EQP B 	 
	ON A.BAN = B.BAN
	AND A.ESN_IMEI = B.ESN_IMEI
	AND A.SIM = B.SIM
	AND A.SUBCR_NO = B.SUBCR_NO
	AND A.TRANS_DT = B.TRANS_DT
	SET A.SP_ORDER_COAM_CONTR_TS = LV_CUR_UTC 
	WHERE A.SP_ORDER_COAM_CONTR_TS IS NULL;
    
--------------------------------------------------------------------------------------------------
	-- Update Error Table
--------------------------------------------------------------------------------------------------

    UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH" A
    FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH" A 
    INNER JOIN #UPDATE_EH_DELETION B       
    ON A."BAN" = B."BAN"
    AND A."CONTR_TRANS_DT" = B."CONTR_TRANS_DT"
    AND A."ITEM_ID" =  B."ITEM_ID"
    AND A."ITEM_TRANS_DT" = B."ITEM_TRANS_DT"
    AND A."TRX_SEQ_NO" = B."TRX_SEQ_NO"
    AND A."SUBSCR_NO" = B."SUBSCR_NO"
    SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);       
    
--------------------------------------------------------------------------------------------------
	-- Update NDB table MOBL_POST_EQP
--------------------------------------------------------------------------------------------------    
    
    
    UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_EQP" E
   SET  E.CONTRACT_TRANSFER ='Y'
   WHERE EXISTS (SELECT 1 
                   FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_ORDER_COAM_CONTR" F
                  WHERE E.SUBSCR_NO = F.PREV_SUBS
                    AND F.CONTR_TRAN_FLG = 'Y')    ; 
       
----------------------------------------------------------------------------------------------------
	-- Set Overall Status
----------------------------------------------------------------------------------------------------- 
	--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
	--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN
     OP_STATUS := LC_ERROR_TEXT; 			
    ELSE
  	 OP_STATUS := LC_SUCCESS_TEXT;				
	END IF;		

END;