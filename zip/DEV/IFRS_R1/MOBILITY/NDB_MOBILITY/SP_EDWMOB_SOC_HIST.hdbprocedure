PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_EDWMOB_SOC_HIST"
(IN IP_EFF_DT DATE,
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS 

BEGIN 
 
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_EDWMOB_SOC_HIST
-- Created By      : BC_EZ07501 (SAMEER KUMAR BEHERA)       
-- Create Date     : 12-05-2017
-- Description     : It is used to Upsert data in NDB Table.
--                   NDB_TS is updated in Landing Table         
--                   after data is loaded in NDB.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);
DECLARE LV_LOOP_ERROR_FLAG  INTEGER := 0;
DECLARE LV_PREV_RECORD		NVARCHAR(17) := NULL;


--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 

DECLARE CURSOR C_REF_SOC_HIST FOR
	  SELECT
	         "SOC",
	         "SOC_DESC",
	         "EFFECTIVE_DATE",
	         "EXPIRATION_DATE",
	         "PROMO_GRP_CD",
	         "EFF_DT",
	         "EXPY_DT",
	         "NGCC_IND",
	         "NGCC_OFFER_CD",
	         "PRIME_MATE_IND",
	         "SOC_LEVEL_CODE",
	         "SOC_STATUS",
	         "PRODUCT_TYPE",
	         "SERVICE_TYPE",
	         "GL_PRICE_PLAN_GRP",
	         "FLAG_EXISTING_RECORD",
	         "EFFECTIVE_DATE_PREV_DAY",
	         "REFERENCE_EFFECTIVE_DT",
	         "REFERENCE_EXPIRY_DT",
	         "CYCL_ID",
	         "CONCAT_PK",
	         "ERROR_STATUS",
	         "ERROR_CODE"
        FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_NM1_EDW_REF_SOC_HIST"
			 (PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
	ORDER BY "SOC", "EFFECTIVE_DATE", "REFERENCE_EFFECTIVE_DT", "EXPY_DT";
 

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_SOC_HIST ("SOC" NVARCHAR(9),"EFFECTIVE_DATE" DATE,"EFF_DT" DATE,"EXPY_DT" DATE,"CYCL_ID" NVARCHAR(3));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION ("SOC" NVARCHAR(100),"EFFECTIVE_DATE" NVARCHAR(100),"REFERENCE_EFFECTIVE_DT" NVARCHAR(100));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------  

FOR C_SOC AS C_REF_SOC_HIST DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
	
		   -- Insert record into error table
		   	  INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_SOC_HIST_EH"(
						  "SOC",
	                      "SOC_DESC",
	                      "EFFECTIVE_DATE",
	                      "EXPIRATION_DATE",
	                      "PROMO_GRP_CD",
	                      "EXPY_DT",
	                      "NGCC_IND",
	                      "NGCC_OFFER_CD",
	                      "PRIME_MATE_IND",
	                      "SOC_LEVEL_CODE",
	                      "SOC_STATUS",
	                      "PRODUCT_TYPE",
	                      "SERVICE_TYPE",
	                      "GL_PRICE_PLAN_GRP",
	                      "REFERENCE_EFFECTIVE_DT",
	                      "REFERENCE_EXPIRY_DT",
                          "INSERT_TS",
                          "ERROR_CODE",
                          "TECHNICAL_MESSAGE",
                          "ERROR_CREATE_TS")
											      
			   	   VALUES(C_SOC."SOC",
	                      C_SOC."SOC_DESC",
	                      C_SOC."EFFECTIVE_DATE",
	                      C_SOC."EXPIRATION_DATE",
	                      C_SOC."PROMO_GRP_CD",
	                      C_SOC."EXPY_DT",
	                      C_SOC."NGCC_IND",
	                      C_SOC."NGCC_OFFER_CD",
	                      C_SOC."PRIME_MATE_IND",
	                      C_SOC."SOC_LEVEL_CODE",
	                      C_SOC."SOC_STATUS",
	                      C_SOC."PRODUCT_TYPE",
	                      C_SOC."SERVICE_TYPE",
	                      C_SOC."GL_PRICE_PLAN_GRP",
	                      C_SOC."EFF_DT",
	                      C_SOC."REFERENCE_EXPIRY_DT",
					      LV_CUR_UTC,
						  ::SQL_ERROR_CODE,
					      ::SQL_ERROR_MESSAGE,
					      LV_CUR_UTC);			
			   	    
	
		  	   LV_ERROR_FLAG := 'Y';
		  	   LV_LOOP_ERROR_FLAG := 1;
	         
	  END;       
	  
-----------------------------------------------------------------------------------------------   
    
-- FOR CLEARING THE VARIABLES

	IF (LV_PREV_RECORD IS NULL OR "C_SOC"."CONCAT_PK" != LV_PREV_RECORD) THEN
		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "C_SOC"."CONCAT_PK";
			 	   
    END IF;

 -----------------------------------------------------------------------------------------------
 
 
--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF C_SOC.ERROR_STATUS = '1'  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(C_SOC."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];

		   -- Insert record into error table
		   	  INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_SOC_HIST_EH"(
						  "SOC",
	                      "SOC_DESC",
	                      "EFFECTIVE_DATE",
	                      "EXPIRATION_DATE",
	                      "PROMO_GRP_CD",
	                      "EXPY_DT",
	                      "NGCC_IND",
	                      "NGCC_OFFER_CD",
	                      "PRIME_MATE_IND",
	                      "SOC_LEVEL_CODE",
	                      "SOC_STATUS",
	                      "PRODUCT_TYPE",
	                      "SERVICE_TYPE",
	                      "GL_PRICE_PLAN_GRP",
	                      "REFERENCE_EFFECTIVE_DT",
	                      "REFERENCE_EXPIRY_DT",
                          "INSERT_TS",
                          "ERROR_CODE",
                          "ERROR_CREATE_TS")
											      
			   	   VALUES(C_SOC."SOC",
	                      C_SOC."SOC_DESC",
	                      C_SOC."EFFECTIVE_DATE",
	                      C_SOC."EXPIRATION_DATE",
	                      C_SOC."PROMO_GRP_CD",
	                      C_SOC."EXPY_DT",
	                      C_SOC."NGCC_IND",
	                      C_SOC."NGCC_OFFER_CD",
	                      C_SOC."PRIME_MATE_IND",
	                      C_SOC."SOC_LEVEL_CODE",
	                      C_SOC."SOC_STATUS",
	                      C_SOC."PRODUCT_TYPE",
	                      C_SOC."SERVICE_TYPE",
	                      C_SOC."GL_PRICE_PLAN_GRP",
	                      C_SOC."EFF_DT",
	                      C_SOC."REFERENCE_EXPIRY_DT",
					      LV_CUR_UTC,						  
					      :CURRENT_ERROR,
					      LV_CUR_UTC);			
			   	    
	END FOR;
	
-- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;		 	
 
-- Processing for Successful Records
   ELSE 
         IF C_SOC.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
-- Insert record into error table
	  	  
		   	  INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_SOC_HIST_EH"(
						  "SOC",
	                      "SOC_DESC",
	                      "EFFECTIVE_DATE",
	                      "EXPIRATION_DATE",
	                      "PROMO_GRP_CD",
	                      "EXPY_DT",
	                      "NGCC_IND",
	                      "NGCC_OFFER_CD",
	                      "PRIME_MATE_IND",
	                      "SOC_LEVEL_CODE",
	                      "SOC_STATUS",
	                      "PRODUCT_TYPE",
	                      "SERVICE_TYPE",
	                      "GL_PRICE_PLAN_GRP",
	                      "REFERENCE_EFFECTIVE_DT",
	                      "REFERENCE_EXPIRY_DT",
                          "INSERT_TS",
                          "ERROR_CODE",
                          "ERROR_CREATE_TS")
											      
			   	   VALUES(C_SOC."SOC",
	                      C_SOC."SOC_DESC",
	                      C_SOC."EFFECTIVE_DATE",
	                      C_SOC."EXPIRATION_DATE",
	                      C_SOC."PROMO_GRP_CD",
	                      C_SOC."EXPY_DT",
	                      C_SOC."NGCC_IND",
	                      C_SOC."NGCC_OFFER_CD",
	                      C_SOC."PRIME_MATE_IND",
	                      C_SOC."SOC_LEVEL_CODE",
	                      C_SOC."SOC_STATUS",
	                      C_SOC."PRODUCT_TYPE",
	                      C_SOC."SERVICE_TYPE",
	                      C_SOC."GL_PRICE_PLAN_GRP",
	                      C_SOC."EFF_DT",
	                      C_SOC."REFERENCE_EXPIRY_DT",
					      LV_CUR_UTC,						  
					      'PREVIOUS VERSION IN ERROR',
					      LV_CUR_UTC);        
		ELSE			      
--   If Record exists in the Target NDB Table
     IF C_SOC.FLAG_EXISTING_RECORD = 'U' THEN
     
     	BEGIN AUTONOMOUS TRANSACTION  
     
       --     Update the target NDB table
	          UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_SOC_HIST" NDB 
	   		     SET  NDB.REFERENCE_EXPIRY_DT    = C_SOC.EFFECTIVE_DATE_PREV_DAY,
	 		          NDB."MODIFIED_TS"          = LV_CUR_UTC
			   WHERE  NDB.SOC                    = C_SOC.SOC
			     AND  NDB.REFERENCE_EXPIRY_DT    = '99991231';
			     
       --    Insert the Incoming new record
             INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_SOC_HIST"(
						 "SOC",
	                     "SOC_DESC",
	                     "EFFECTIVE_DATE",
	                     "EXPIRATION_DATE",
	                     "PROMO_GRP_CD",
	                     "EXPY_DT",
	                     "NGCC_IND",
	                     "NGCC_OFFER_CD",
	                     "PRIME_MATE_IND",
	                     "SOC_LEVEL_CODE",
	                     "SOC_STATUS",
	                     "PRODUCT_TYPE",
	                     "SERVICE_TYPE",
	                     "GL_PRICE_PLAN_GRP",
	                     "REFERENCE_EFFECTIVE_DT",
	                     "REFERENCE_EXPIRY_DT",
                         "INSERT_TS")
											      
			   	   VALUES(C_SOC."SOC",
	                      C_SOC."SOC_DESC",
	                      C_SOC."EFFECTIVE_DATE",
	                      C_SOC."EXPIRATION_DATE",
	                      C_SOC."PROMO_GRP_CD",
	                      C_SOC."EXPY_DT",
	                      C_SOC."NGCC_IND",
	                      C_SOC."NGCC_OFFER_CD",
	                      C_SOC."PRIME_MATE_IND",
	                      C_SOC."SOC_LEVEL_CODE",
	                      C_SOC."SOC_STATUS",
	                      C_SOC."PRODUCT_TYPE",
	                      C_SOC."SERVICE_TYPE",
	                      C_SOC."GL_PRICE_PLAN_GRP",
	                      C_SOC."EFF_DT",
	                      C_SOC."REFERENCE_EXPIRY_DT",
					      LV_CUR_UTC);
     	  END;				 
						 
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	

			   INSERT INTO #UPDATE_SOC_HIST
						   (SOC, 
						    EFFECTIVE_DATE,
						    EFF_DT,
						    EXPY_DT,
						    CYCL_ID)
				    VALUES (C_SOC.SOC, 
						    C_SOC.EFFECTIVE_DATE,
						    C_SOC.EFF_DT,
						    C_SOC.EXPY_DT,
						    C_SOC.CYCL_ID);
						   					   	    		
			   INSERT INTO #UPDATE_EH_DELETION
						   (SOC, 
						    EFFECTIVE_DATE,
						    REFERENCE_EFFECTIVE_DT)
				    VALUES (C_SOC.SOC, 
						    C_SOC.EFFECTIVE_DATE,
						    C_SOC.EFF_DT);

     ELSEIF C_SOC.FLAG_EXISTING_RECORD = 'I' THEN
    
     BEGIN AUTONOMOUS TRANSACTION
    
--    Insert Records into the target NDB table
      INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_SOC_HIST"(
						 "SOC",
	                     "SOC_DESC",
	                     "EFFECTIVE_DATE",
	                     "EXPIRATION_DATE",
	                     "PROMO_GRP_CD",
	                     "EXPY_DT",
	                     "NGCC_IND",
	                     "NGCC_OFFER_CD",
	                     "PRIME_MATE_IND",
	                     "SOC_LEVEL_CODE",
	                     "SOC_STATUS",
	                     "PRODUCT_TYPE",
	                     "SERVICE_TYPE",
	                     "GL_PRICE_PLAN_GRP",
	                     "REFERENCE_EFFECTIVE_DT",
	                     "REFERENCE_EXPIRY_DT",
                         "INSERT_TS")
											      
			   	   VALUES(C_SOC."SOC",
	                      C_SOC."SOC_DESC",
	                      C_SOC."EFFECTIVE_DATE",
	                      C_SOC."EXPIRATION_DATE",
	                      C_SOC."PROMO_GRP_CD",
	                      C_SOC."EXPY_DT",
	                      C_SOC."NGCC_IND",
	                      C_SOC."NGCC_OFFER_CD",
	                      C_SOC."PRIME_MATE_IND",
	                      C_SOC."SOC_LEVEL_CODE",
	                      C_SOC."SOC_STATUS",
	                      C_SOC."PRODUCT_TYPE",
	                      C_SOC."SERVICE_TYPE",
	                      C_SOC."GL_PRICE_PLAN_GRP",
	                      C_SOC."REFERENCE_EFFECTIVE_DT",
	                      C_SOC."REFERENCE_EXPIRY_DT",
					      LV_CUR_UTC);	
	END;				 
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	

		   INSERT INTO #UPDATE_SOC_HIST
						   (SOC, 
						    EFFECTIVE_DATE,
						    EFF_DT,
						    EXPY_DT,
						    CYCL_ID)
				    VALUES (C_SOC.SOC, 
						    C_SOC.EFFECTIVE_DATE,
						    C_SOC.EFF_DT,
						    C_SOC.EXPY_DT,
						    C_SOC.CYCL_ID);
						   					   	    		
			   INSERT INTO #UPDATE_EH_DELETION
						   (SOC, 
						    EFFECTIVE_DATE,
						    REFERENCE_EFFECTIVE_DT)
				    VALUES (C_SOC.SOC, 
						    C_SOC.EFFECTIVE_DATE,
						    C_SOC.EFF_DT);
						 		
					   	 
   		END IF;  
       
    END IF; 
  
  END IF; 
 
 END IF;
      

END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::NM1_EDW_REF_RATEDFTR_HIST
UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_REF_SOC_HIST" A
  FROM "LAND"."IFRS_R1.LAND::NM1_EDW_REF_SOC_HIST" A 
 INNER JOIN #UPDATE_SOC_HIST B 
    ON A.SOC              = B.SOC
   AND A.EFFECTIVE_DATE   = B.EFFECTIVE_DATE
   AND A.EFF_DT           = B.EFF_DT
   AND A.EXPY_DT          = B.EXPY_DT
   AND A.CYCL_ID          = B.CYCL_ID
   SET NDB_TS             = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_SOC_HIST_EH" A
  FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_SOC_HIST_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A.SOC                       = B.SOC
   AND A.EFFECTIVE_DATE            = B.EFFECTIVE_DATE
   AND A.REFERENCE_EFFECTIVE_DT    = B.REFERENCE_EFFECTIVE_DT
   SET (DELETE_DATE, DELETED)      = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
   
    IF(LV_ERROR_FLAG = 'Y') THEN		

       OP_STATUS := LC_ERROR_TEXT;
			
    ELSE
 
  	   OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;	