PROCEDURE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::SP_TV_PROD_REF_PRIN_NUM" 
     (IN IP_CYCL_ID NVARCHAR(3),
     OUT OP_STATUS  NVARCHAR(100)) 
	 LANGUAGE SQLSCRIPT
	 SQL SECURITY INVOKER
	 
	 AS
BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_TV_PROD_REF_PRIN_NUM
-- Created By      : BC_EZ08922       
-- Create Date     : 03-17-2017
-- Description     : Data Inserted using Calculation View - CA_TV_PROD_REF_PRIN_NUM
--                   To NDB Table - TV_PROD_PRIN_REF Using this stored procedure.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--18/08/2017   | BC_EZ08929       | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);


--New Variable for version sequence check
DECLARE LV_LOOP_ERROR_FLAG        INTEGER     := 0;
DECLARE LV_PREV_PRIN_NUM		  NVARCHAR(5) := NULL;


--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------
DECLARE CURSOR CUR_PRIN_NUM FOR 
   	    SELECT "CO_CD",
	           "PRIN_NUM",
	           "PRIN_TY",
	           "REC_ACTN",
	           "TEKLGY_TY",
	           "CYCL_ID",
	           "SEQ_ID",
	           "PROCESS_ID",
	           "REFERENCE_EFFECTIVE_DT",
	           "REFERENCE_EXPIRY_DT",
	           "REFERENCE_EFFECTIVE_DATE_PREV_DAY",
	           "ERROR_STATUS",
	           "ERROR_CODE",
	           "SRC_TS"
          FROM "_SYS_BIC"."IFRS_R1.BELLTV.NDB_BELLTV/CA_TV_PROD_REF_PRIN_NUM"
               (PLACEHOLDER."$$IP_CYCL_ID$$" => :IP_CYCL_ID)
               ORDER BY "PRIN_NUM","REFERENCE_EFFECTIVE_DT";
                   

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------  

CREATE LOCAL TEMPORARY TABLE #UPDATE_TV_PROD_REF_PRIN_NUM ("PRIN_NUM" NVARCHAR(4), "REFERENCE_EFFECTIVE_DT" DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION ("PRIN_NUM" NVARCHAR(4), "REFERENCE_EFFECTIVE_DT" DATE);
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 

FOR C_PN AS CUR_PRIN_NUM DO
--  Define Exit Handler

	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--  Define Exit Handler

	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
 END;
 			
-- Insert record into error table

INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_PRIN_REF_EH"(
		    "PRIN_NUM",
	    	"CO_CD",
		    "TEKLGY_TY",
	    	"PRIN_TY",
	    	"REFERENCE_EXPIRY_DT",
	    	"REFERENCE_EFFECTIVE_DT",
	    	"EXECUTION_ID",
    		"INSERT_TS",
    		"ERROR_CODE",
    		"ERROR_CREATE_TS",
     		"TECHNICAL_MESSAGE")
    VALUES  (C_PN."PRIN_NUM",
		     C_PN."CO_CD",
		     C_PN."TEKLGY_TY",
		     C_PN."PRIN_TY",
		     C_PN."REFERENCE_EXPIRY_DT",
		     C_PN."SRC_TS",
		     C_PN."PROCESS_ID",
		     LV_CUR_UTC,
		     ::SQL_ERROR_CODE,
		     LV_CUR_UTC,
		     ::SQL_ERROR_MESSAGE);   
   
	  	LV_ERROR_FLAG := 'Y';
	  	LV_LOOP_ERROR_FLAG := 1;
    
   
 END;

    
-- FOR CLEARING THE VARIABLES
     IF (LV_PREV_PRIN_NUM IS NULL OR C_PN.PRIN_NUM != LV_PREV_PRIN_NUM ) THEN
     
         LV_LOOP_ERROR_FLAG := 0;
         LV_PREV_PRIN_NUM   := "C_PN"."PRIN_NUM";
         
     END IF;
    
    
    
    IF C_PN.ERROR_STATUS = 1 THEN
	
--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(C_PN."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

-- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
-- Fetch the Error Code
		CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			

-- Insert record into error table 

INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_PRIN_REF_EH"(
			"PRIN_NUM",
			"CO_CD",
			"TEKLGY_TY",
			"PRIN_TY",
			"REFERENCE_EXPIRY_DT",
			"REFERENCE_EFFECTIVE_DT",
			"EXECUTION_ID",
			"INSERT_TS",
			"ERROR_CODE",
			"ERROR_CREATE_TS")
	VALUES  (C_PN."PRIN_NUM",
			 C_PN."CO_CD",
			 C_PN."TEKLGY_TY",
			 C_PN."PRIN_TY",
			 C_PN."REFERENCE_EXPIRY_DT",
			 C_PN."SRC_TS",
			 C_PN."PROCESS_ID",
			 LV_CUR_UTC,
			 :CURRENT_ERROR,
			 LV_CUR_UTC);    	  
				     
 END FOR;
 
         -- Set Error Flag	
            LV_ERROR_FLAG      := 'Y';
            LV_LOOP_ERROR_FLAG := 1;
   
  
-- Processing for Successful Records
   ELSE
   
   
   
   IF C_PN.ERROR_STATUS = '0' THEN
   
      IF LV_LOOP_ERROR_FLAG = 1 THEN
    
-- Insert into the Error Table
    
    INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_PRIN_REF_EH"(
			    "PRIN_NUM",
			    "CO_CD",
			    "TEKLGY_TY",
			    "PRIN_TY",
			    "REFERENCE_EXPIRY_DT",
			    "REFERENCE_EFFECTIVE_DT",
			    "EXECUTION_ID",
			    "INSERT_TS",
			    "ERROR_CODE",
			    "ERROR_CREATE_TS")
	    VALUES  (C_PN."PRIN_NUM",
			     C_PN."CO_CD",
			     C_PN."TEKLGY_TY",
			     C_PN."PRIN_TY",
			     C_PN."REFERENCE_EXPIRY_DT",
			     C_PN."SRC_TS",
			     C_PN."PROCESS_ID",
			     LV_CUR_UTC,
			     'PREVIOUS VERSION IN ERROR',
			     LV_CUR_UTC);    	 
			  
  ELSE 
    
-- If Record exists in the Target NDB Table
	 IF C_PN."REC_ACTN" = 'DELETE' THEN
	 
	 	UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_PRIN_REF" NDB
	 		SET NDB."REFERENCE_EXPIRY_DT"    = C_PN."REFERENCE_EFFECTIVE_DATE_PREV_DAY",
	 			NDB.MODIFIED_TS              = LV_CUR_UTC
	 	  WHERE NDB.PRIN_NUM                 = C_PN.PRIN_NUM
			AND NDB.REFERENCE_EXPIRY_DT      = '9999.12.31';


-- Insert PK of successfully processed Records into Local Temp Tables 
-- for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_TV_PROD_REF_PRIN_NUM
					   ("PRIN_NUM") 
			    VALUES (C_PN."PRIN_NUM");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("PRIN_NUM") 
			    VALUES (C_PN."PRIN_NUM");
			    
			    

     ELSE IF C_PN."REC_ACTN" = 'UPDATE' THEN
     
     
	 BEGIN AUTONOMOUS TRANSACTION 

-- Update the Target NDB table
	   UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_PRIN_REF" NDB
	 	   SET NDB."REFERENCE_EXPIRY_DT"    = C_PN."REFERENCE_EFFECTIVE_DATE_PREV_DAY",
	 		   NDB.MODIFIED_TS              = LV_CUR_UTC
	 	WHERE  NDB.PRIN_NUM                 = C_PN.PRIN_NUM
		   AND NDB.REFERENCE_EXPIRY_DT      = '9999.12.31';
		  
		  
-- Insert the new records having REC_ACTN = 'UPDATE'

INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_PRIN_REF"(
			"PRIN_NUM",
			"CO_CD",
			"TEKLGY_TY",
			"PRIN_TY",
			"REFERENCE_EXPIRY_DT",
			"REFERENCE_EFFECTIVE_DT",
			"EXECUTION_ID",
			"INSERT_TS")
    VALUES (C_PN."PRIN_NUM",
			C_PN."CO_CD",
			C_PN."TEKLGY_TY",
			C_PN."PRIN_TY",
			C_PN."REFERENCE_EXPIRY_DT",
			C_PN."REFERENCE_EFFECTIVE_DT",
			C_PN."PROCESS_ID",
			LV_CUR_UTC);
		END;
								 
-- Insert PK of successfully processed Records into Local Temp Tables 
-- for Updating NDB_TS in corresponding Landing Tables records

		   INSERT INTO #UPDATE_TV_PROD_REF_PRIN_NUM
					   ("PRIN_NUM") 
			    VALUES (C_PN."PRIN_NUM");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("PRIN_NUM") 
			    VALUES (C_PN."PRIN_NUM");          
                    	
    ELSE
    
--  Insert Records into the Target NDB table
    INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_PRIN_REF"(
				"PRIN_NUM",
				"CO_CD",
				"TEKLGY_TY",
				"PRIN_TY",
				"REFERENCE_EXPIRY_DT",
				"REFERENCE_EFFECTIVE_DT",
				"EXECUTION_ID",
				"INSERT_TS")
		VALUES (C_PN."PRIN_NUM",
				C_PN."CO_CD",
				C_PN."TEKLGY_TY",
				C_PN."PRIN_TY",
				C_PN."REFERENCE_EXPIRY_DT",
				C_PN."REFERENCE_EFFECTIVE_DT",
				C_PN."PROCESS_ID",
				LV_CUR_UTC);
				
				COMMIT;
									 
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records

		   INSERT INTO #UPDATE_TV_PROD_REF_PRIN_NUM
					   ("PRIN_NUM") 
			    VALUES (C_PN."PRIN_NUM");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("PRIN_NUM") 
			    VALUES (C_PN."PRIN_NUM"); 
					   	
      END IF;
    
     END IF; 
   
    END IF;
     
   END IF;
        
 END IF;
 
 
END FOR;					   			    

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::TV_PROD_REF_PRIN_NUM
 	
 	UPDATE "LAND"."IFRS_R1.LAND::TV_PROD_REF_PRIN_NUM" A
 	  FROM "LAND"."IFRS_R1.LAND::TV_PROD_REF_PRIN_NUM" A
INNER JOIN #UPDATE_TV_PROD_REF_PRIN_NUM B 
 	    ON A.PRIN_NUM   =  B.PRIN_NUM
 	   SET A.NDB_TS     = LV_CUR_UTC
     WHERE A.NDB_TS IS NULL;
 
 
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

     UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_PRIN_REF_EH" A
       FROM "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_PRIN_REF_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
         ON  A.PRIN_NUM             =  B.PRIN_NUM 
        SET  (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;