PROCEDURE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::SP_TV_PROD_REF_SERV_CD" 
(IN IP_CYCL_ID NVARCHAR(3),
OUT OP_STATUS  NVARCHAR(1000)) 
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
	
BEGIN 
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_TV_PROD_REF_SERV_CD
-- Created By      : BC_EY96106       
-- Create Date     : 03-17-2017
-- Description     : Data Inserted using Calculation View - CA_TV_PROD_REF_SERV_CD
--                   To NDB Table - TV_PROD_REF_SERV_C Using this stored procedure.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG        INTEGER := 0;
DECLARE LV_PREV_PK		          NVARCHAR(20) := NULL;


-------------------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------------------

DECLARE CURSOR CUR_SERV FOR 
	   SELECT "AGNT_NUM",
			  "PRIN_NUM",
			  "SERV_CD",
			  "CYCL_ID",
			  "SEQ_ID",
			  "PROCESS_ID",
			  "REFERENCE_EFFECTIVE_DT",
			  "REFERENCE_EXPIRY_DT",
			  "REFERENCE_EFFECTIVE_DATE_PREV_DAY",
			  "GL_ACCT_NUM",
			  "GL_CC",
			  "SAP_INTR_ORD_NUM",
			  "SERV_CD_AMT",
			  "SERV_CD_SUBTY",
			  "SERV_CD_TY",
			  "SERV_CD_AMT_EXP_DT",
			  "FEAT_CD",
			  "IDR_PROD_CD",
			  "NEW_SERV_CD_AMT",
			  "PRORATEABLE_IND",
			  "REVENUE_CD",
			  "ERROR_STATUS",
			  "ERROR_CODE",
			  "REC_ACTN",
			  "SRC_TS",
			  "COMPOSITE_PK"
	     FROM "_SYS_BIC"."IFRS_R1.BELLTV.NDB_BELLTV/CA_TV_PROD_REF_SERV_CD"
              (PLACEHOLDER."$$IP_CYCL_ID$$" => IFNULL(:IP_CYCL_ID,'999'))
               ORDER BY "AGNT_NUM","PRIN_NUM","SERV_CD","SRC_TS";
               
               

    
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_TV_PROD_REF_SERV_CD ("AGNT_NUM" NVARCHAR(4), "PRIN_NUM" NVARCHAR(4),"SERV_CD" NVARCHAR(5),"SRC_TS" SECONDDATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION ("AGNT_NUM" NVARCHAR(4), "PRIN_NUM" NVARCHAR(4),"SERV_CD" NVARCHAR(5),"SRC_TS" SECONDDATE);

--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 


FOR C_SERV AS CUR_SERV DO

-- Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 

-- Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
    END;
	
-- Insert record into error table
   	  INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_REF_SERV_CD_EH"(
                  "AGNT_NUM",
                  "EXECUTION_ID",
                  "FEAT_CD",
                  "GL_ACCT_NUM",
                  "GL_CC",
                  "IDR_PROD_CD",
                  "INSERT_TS",
                  "NEW_SERV_CD_AMT",
                  "PRIN_NUM",
                  "PRORATEABLE_IND",
                  "REFERENCE_EFFECTIVE_DT",
                  "REFERENCE_EXPIRY_DT",
                  "REVENUE_CD",
                  "SAP_INTR_ORD_NUM",
                  "SERV_CD",
                  "SERV_CD_AMT",
                  "SERV_CD_AMT_EXP_DT",
                  "SERV_CD_SUBTY",
                  "SERV_CD_TY",
                  "ERROR_CODE",
                  "ERROR_CREATE_TS",
                  "TECHNICAL_MESSAGE")
          VALUES (C_SERV."AGNT_NUM",
                  C_SERV."PROCESS_ID",
                  C_SERV."FEAT_CD",
                  C_SERV."GL_ACCT_NUM",
                  C_SERV."GL_CC",
                  C_SERV."IDR_PROD_CD",
                  LV_CUR_UTC,
                  C_SERV."NEW_SERV_CD_AMT",
                  C_SERV."PRIN_NUM",
                  C_SERV."PRORATEABLE_IND",
                  C_SERV."SRC_TS",
                  C_SERV."REFERENCE_EXPIRY_DT",
                  C_SERV."REVENUE_CD",
                  C_SERV."SAP_INTR_ORD_NUM",
                  C_SERV."SERV_CD",
                  C_SERV."SERV_CD_AMT",
                  C_SERV."SERV_CD_AMT_EXP_DT",
                  C_SERV."SERV_CD_SUBTY",
                  C_SERV."SERV_CD_TY",
                  ::SQL_ERROR_CODE,
                  LV_CUR_UTC,
                  ::SQL_ERROR_MESSAGE);   
   
	  	 LV_ERROR_FLAG := 'Y';
         LV_LOOP_ERROR_FLAG := 1;   

END;

 -----------------------------------------------------------------------------------------------   
    
-- FOR CLEARING THE VARIABLES

	IF (LV_PREV_PK IS NULL OR  LV_PREV_PK != C_SERV."COMPOSITE_PK" ) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_PK         := "C_SERV"."COMPOSITE_PK";
 
    END IF;

 -----------------------------------------------------------------------------------------------
 
 
--  Check the Error Status of the Record. If Record is with Error, then send to Error Table

IF C_SERV.ERROR_STATUS = 1 THEN
	
-- Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(C_SERV."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

-- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
-- Fetch the Error Code
		CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
-- Insert record into error table
   	  INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_REF_SERV_CD_EH"(
						 "AGNT_NUM",
						 "EXECUTION_ID",
						 "FEAT_CD",
						 "GL_ACCT_NUM",
						 "GL_CC",
						 "IDR_PROD_CD",
						 "INSERT_TS",
						 "NEW_SERV_CD_AMT",
						 "PRIN_NUM",
						 "PRORATEABLE_IND",
						 "REFERENCE_EFFECTIVE_DT",
						 "REFERENCE_EXPIRY_DT",
						 "REVENUE_CD",
						 "SAP_INTR_ORD_NUM",
						 "SERV_CD",
						 "SERV_CD_AMT",
						 "SERV_CD_AMT_EXP_DT",
						 "SERV_CD_SUBTY",
						 "SERV_CD_TY",
						 "ERROR_CODE",
						 "ERROR_CREATE_TS") 
			     VALUES (C_SERV."AGNT_NUM",
						 C_SERV."PROCESS_ID",
						 C_SERV."FEAT_CD",
						 C_SERV."GL_ACCT_NUM",
						 C_SERV."GL_CC",
						 C_SERV."IDR_PROD_CD",
						 LV_CUR_UTC,
						 C_SERV."NEW_SERV_CD_AMT",
						 C_SERV."PRIN_NUM",
						 C_SERV."PRORATEABLE_IND",
						 C_SERV."SRC_TS",
						 C_SERV."REFERENCE_EXPIRY_DT",
						 C_SERV."REVENUE_CD",
						 C_SERV."SAP_INTR_ORD_NUM",
						 C_SERV."SERV_CD",
						 C_SERV."SERV_CD_AMT",
						 C_SERV."SERV_CD_AMT_EXP_DT",
						 C_SERV."SERV_CD_SUBTY",
						 C_SERV."SERV_CD_TY",
						 :CURRENT_ERROR,
						 LV_CUR_UTC);   

	END FOR;

-- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
			LV_LOOP_ERROR_FLAG := 1;
		    

-- Processing for Successful Records
   ELSE
		IF C_SERV.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
		
		INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_REF_SERV_CD_EH"(
						 "AGNT_NUM",
						 "EXECUTION_ID",
						 "FEAT_CD",
						 "GL_ACCT_NUM",
						 "GL_CC",
						 "IDR_PROD_CD",
						 "INSERT_TS",
						 "NEW_SERV_CD_AMT",
						 "PRIN_NUM",
						 "PRORATEABLE_IND",
						 "REFERENCE_EFFECTIVE_DT",
						 "REFERENCE_EXPIRY_DT",
						 "REVENUE_CD",
						 "SAP_INTR_ORD_NUM",
						 "SERV_CD",
						 "SERV_CD_AMT",
						 "SERV_CD_AMT_EXP_DT",
						 "SERV_CD_SUBTY",
						 "SERV_CD_TY",
						 "ERROR_CODE",
						 "ERROR_CREATE_TS") 
			     VALUES (C_SERV."AGNT_NUM",
						 C_SERV."PROCESS_ID",
						 C_SERV."FEAT_CD",
						 C_SERV."GL_ACCT_NUM",
						 C_SERV."GL_CC",
						 C_SERV."IDR_PROD_CD",
						 LV_CUR_UTC,
						 C_SERV."NEW_SERV_CD_AMT",
						 C_SERV."PRIN_NUM",
						 C_SERV."PRORATEABLE_IND",
						 C_SERV."SRC_TS",
						 C_SERV."REFERENCE_EXPIRY_DT",
						 C_SERV."REVENUE_CD",
						 C_SERV."SAP_INTR_ORD_NUM",
						 C_SERV."SERV_CD",
						 C_SERV."SERV_CD_AMT",
						 C_SERV."SERV_CD_AMT_EXP_DT",
						 C_SERV."SERV_CD_SUBTY",
						 C_SERV."SERV_CD_TY",
						 'PREVIOUS VERSION IN ERROR',
						 LV_CUR_UTC);			
		
		ELSE
-- If Record exists in the Target NDB Table

	 IF C_SERV."REC_ACTN" = 'DELETE' THEN
	 
	 	 UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_REF_SERV_CD" NDB
	 		SET NDB."REFERENCE_EXPIRY_DT" = C_SERV."REFERENCE_EFFECTIVE_DATE_PREV_DAY",
	 			NDB.MODIFIED_TS  = LV_CUR_UTC
	 	  WHERE NDB.SERV_CD      = C_SERV.SERV_CD  
			AND NDB.PRIN_NUM     = C_SERV.PRIN_NUM
			AND NDB.AGNT_NUM     = C_SERV.AGNT_NUM
			AND NDB.REFERENCE_EXPIRY_DT = '9999.12.31';
 		

-- Insert PK of successfully processed Records into Local Temp Tables 
-- For Updating NDB_TS in corresponding Landing Tables records

		   INSERT INTO #UPDATE_TV_PROD_REF_SERV_CD
					    ("SERV_CD", 
					     "PRIN_NUM", 
					     "AGNT_NUM") 
			     VALUES (C_SERV."SERV_CD", 
					     C_SERV."PRIN_NUM", 
					   	 C_SERV."AGNT_NUM");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("SERV_CD", 
					    "PRIN_NUM", 
					   	"AGNT_NUM") 
			    VALUES (C_SERV."SERV_CD", 
					    C_SERV."PRIN_NUM", 
					   	C_SERV."AGNT_NUM"); 
 
  ELSE IF C_SERV."REC_ACTN" = 'UPDATE' THEN

BEGIN AUTONOMOUS TRANSACTION

-- Update the target NDB table

	     UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_REF_SERV_CD" NDB
	 		SET NDB."REFERENCE_EXPIRY_DT" = C_SERV."REFERENCE_EFFECTIVE_DATE_PREV_DAY",
	 			NDB.MODIFIED_TS = LV_CUR_UTC
	 	  WHERE NDB.SERV_CD     = C_SERV.SERV_CD  
			AND NDB.PRIN_NUM    = C_SERV.PRIN_NUM
			AND NDB.AGNT_NUM    = C_SERV.AGNT_NUM
			AND NDB.REFERENCE_EXPIRY_DT = '9999.12.31';
		  	  
-- Insert the new records having FLAG_EXISTING_RECORD = 'U'
      INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_REF_SERV_CD"(
				  "AGNT_NUM",
				  "FEAT_CD",
				  "GL_ACCT_NUM",
				  "GL_CC",
				  "IDR_PROD_CD",
				  "NEW_SERV_CD_AMT",
				  "PRIN_NUM",
				  "PRORATEABLE_IND",
				  "REVENUE_CD",
				  "SAP_INTR_ORD_NUM",
				  "SERV_CD",
				  "SERV_CD_AMT",
				  "SERV_CD_AMT_EXP_DT",
				  "SERV_CD_SUBTY",
				  "SERV_CD_TY",
				  "REFERENCE_EXPIRY_DT",
				  "REFERENCE_EFFECTIVE_DT",
				  "EXECUTION_ID",
				  "INSERT_TS")
	      VALUES (C_SERV."AGNT_NUM",
				  C_SERV."FEAT_CD",
				  C_SERV."GL_ACCT_NUM",
				  C_SERV."GL_CC",
				  C_SERV."IDR_PROD_CD",
				  C_SERV."NEW_SERV_CD_AMT",
				  C_SERV."PRIN_NUM",
				  C_SERV."PRORATEABLE_IND",
				  C_SERV."REVENUE_CD",
				  C_SERV."SAP_INTR_ORD_NUM",
				  C_SERV."SERV_CD",
				  C_SERV."SERV_CD_AMT",
				  C_SERV."SERV_CD_AMT_EXP_DT",
				  C_SERV."SERV_CD_SUBTY",
				  C_SERV."SERV_CD_TY",
				  C_SERV."REFERENCE_EXPIRY_DT",
				  C_SERV."REFERENCE_EFFECTIVE_DT",
				  C_SERV."PROCESS_ID",
				  LV_CUR_UTC);
			      
END;

-- Insert PK of successfully processed Records into Local Temp Tables 
-- For Updating NDB_TS in corresponding Landing Tables records

		   INSERT INTO #UPDATE_TV_PROD_REF_SERV_CD
					    ("SERV_CD", 
					     "PRIN_NUM", 
					     "AGNT_NUM") 
			     VALUES (C_SERV."SERV_CD", 
					     C_SERV."PRIN_NUM", 
					   	 C_SERV."AGNT_NUM");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("SERV_CD", 
					    "PRIN_NUM", 
					   	"AGNT_NUM") 
			    VALUES (C_SERV."SERV_CD", 
					    C_SERV."PRIN_NUM", 
					   	C_SERV."AGNT_NUM");           
                    	
    ELSE 

-- Insert Records into the target NDB table

      INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_REF_SERV_CD"(
				  "AGNT_NUM",
				  "FEAT_CD",
				  "GL_ACCT_NUM",
				  "GL_CC",
				  "IDR_PROD_CD",
				  "NEW_SERV_CD_AMT",
				  "PRIN_NUM",
				  "PRORATEABLE_IND",
				  "REVENUE_CD",
				  "SAP_INTR_ORD_NUM",
				  "SERV_CD",
				  "SERV_CD_AMT",
				  "SERV_CD_AMT_EXP_DT",
				  "SERV_CD_SUBTY",
				  "SERV_CD_TY",
				  "REFERENCE_EXPIRY_DT",
				  "REFERENCE_EFFECTIVE_DT",
				  "EXECUTION_ID",
				  "INSERT_TS") 
	      VALUES (C_SERV."AGNT_NUM",
				  C_SERV."FEAT_CD",
				  C_SERV."GL_ACCT_NUM",
				  C_SERV."GL_CC",
				  C_SERV."IDR_PROD_CD",
				  C_SERV."NEW_SERV_CD_AMT",
				  C_SERV."PRIN_NUM",
				  C_SERV."PRORATEABLE_IND",
				  C_SERV."REVENUE_CD",
				  C_SERV."SAP_INTR_ORD_NUM",
				  C_SERV."SERV_CD",
				  C_SERV."SERV_CD_AMT",
				  C_SERV."SERV_CD_AMT_EXP_DT",
				  C_SERV."SERV_CD_SUBTY",
				  C_SERV."SERV_CD_TY",
				  C_SERV."REFERENCE_EXPIRY_DT",
				  C_SERV."REFERENCE_EFFECTIVE_DT",
				  C_SERV."PROCESS_ID",
				  LV_CUR_UTC);
			      
			      COMMIT;
		


-- Insert PK of successfully processed Records into Local Temp Tables 
-- For Updating NDB_TS in corresponding Landing Tables records
		   
		   INSERT INTO #UPDATE_TV_PROD_REF_SERV_CD
					    ("SERV_CD", 
					     "PRIN_NUM", 
					     "AGNT_NUM") 
			     VALUES (C_SERV."SERV_CD", 
					     C_SERV."PRIN_NUM", 
					   	 C_SERV."AGNT_NUM");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("SERV_CD", 
					    "PRIN_NUM", 
					   	"AGNT_NUM") 
			    VALUES (C_SERV."SERV_CD", 
					    C_SERV."PRIN_NUM", 
					   	C_SERV."AGNT_NUM");  
					   	
     END IF;

    END IF;  

   END IF;
          
  END IF;
          
 END IF;
 			                  
END FOR;			

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::TV_PROD_AGNT_NUM

 	    UPDATE "LAND"."IFRS_R1.LAND::TV_PROD_REF_SERV_CD" A
 	      FROM "LAND"."IFRS_R1.LAND::TV_PROD_REF_SERV_CD" A
    INNER JOIN #UPDATE_TV_PROD_REF_SERV_CD B 
 	        ON A.SERV_CD  =  B.SERV_CD 
 	       AND A.PRIN_NUM =  B.PRIN_NUM
 	       AND A.AGNT_NUM =  B.AGNT_NUM
 	       SET A.NDB_TS   =  LV_CUR_UTC
 	     WHERE A.NDB_TS IS NULL;
 
 
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

         UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_REF_SERV_CD_EH" A
           FROM "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_REF_SERV_CD_EH" A 
     INNER JOIN #UPDATE_EH_DELETION B
             ON A.SERV_CD             = B.SERV_CD 
            AND A.PRIN_NUM            =  B.PRIN_NUM
            AND A.AGNT_NUM            =  B.AGNT_NUM 
            SET(DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

-- STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
-- Executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
	
END;