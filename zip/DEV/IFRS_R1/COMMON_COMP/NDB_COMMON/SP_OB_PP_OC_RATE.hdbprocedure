PROCEDURE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::SP_OB_PP_OC_RATE"
(IN  IP_EFF_DT DATE,
 OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT 
	SQL SECURITY INVOKER
	AS

BEGIN
----------------------------------------------------------------------
-- Procedure Title : SP_OB_PP_OC_RATE
-- Created By      : BC_EZ08930 (Rakesh)       
-- Create Date     : 15-03-2017
-- Description     : Data Inserted using Calculation View - CA_IFRS_OB_PP_OC_RATE
--                   To NDB Table - OB_PP_OC_RT Using this stored procedure.
--                   OB_PP_OC_RATE includes data from table LANDING IFRS_OB_PP_OC_RATE			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);
DECLARE LV_LOOP_ERROR_FLAG  INTEGER := 0;
DECLARE LV_PREV_RECORD	    NVARCHAR(100) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------   
DECLARE CURSOR OB_PP_OC FOR
			  SELECT "SOC",
					 "EXPIRATION_DATE",
					 "EFFECTIVE_DATE",
					 "FEATURE_CODE",
					 "RATE",
					 "NO_OF_INSTALLMENTS",
					 "PAYMENT_INTERVAL",
					 "REFERENCE_EFFECTIVE_DT",
					 "REFERENCE_EXPIRY_DT",
					 "FLAG_EXISTING_RECORD",
					 "EFFECTIVE_DATE_PREV_DAY",
					 "ERROR_STATUS",
					 "ERROR_CODE",
					 "CONCAT_PK"
				FROM "_SYS_BIC"."IFRS_R1.COMMON_COMP.NDB_COMMON/CA_IFRS_OB_PP_OC_RATE"
					 (PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
		    ORDER BY "SOC", "EFFECTIVE_DATE", "FEATURE_CODE", "NO_OF_INSTALLMENTS", "PAYMENT_INTERVAL", "REFERENCE_EFFECTIVE_DT";		    
			
----------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-----------------------------------------------------------------------------------------------------

CREATE LOCAL TEMPORARY TABLE #UPDATE_IFRS_OB_PP_OC ("SOC" NVARCHAR(9),"EFFECTIVE_DATE" DATE,"FEATURE_CODE" NVARCHAR(6),"NO_OF_INSTALLMENTS" NVARCHAR(3),"PAYMENT_INTERVAL" NVARCHAR(2),"EFF_DT" DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION ("SOC" NVARCHAR(100),"EFFECTIVE_DATE" NVARCHAR(100),"FEATURE_CODE" NVARCHAR(100),"NO_OF_INSTALLMENTS" NVARCHAR(100),"PAYMENT_INTERVAL" NVARCHAR(100),"REFERENCE_EFFECTIVE_DT" NVARCHAR(100)); 
 
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 
FOR PP_OC AS OB_PP_OC DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
 	  
	 -- Insert record into error table	 
	     INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_PP_OC_RATE_EH"(
					 "SOC",
					 "EXPIRATION_DATE",
					 "EFFECTIVE_DATE",
					 "FEATURE_CODE",
					 "RATE",
					 "NO_OF_INSTALLMENTS",
					 "PAYMENT_INTERVAL",
					 "REFERENCE_EFFECTIVE_DT",
					 "REFERENCE_EXPIRY_DT",
					 "ERROR_CODE",
					 "TECHNICAL_MESSAGE",
					 "ERROR_CREATE_TS")
		VALUES      (PP_OC."SOC",
					 PP_OC."EXPIRATION_DATE",
					 PP_OC."EFFECTIVE_DATE",
					 PP_OC."FEATURE_CODE",
					 PP_OC."RATE",
					 PP_OC."NO_OF_INSTALLMENTS",
					 PP_OC."PAYMENT_INTERVAL",
					 PP_OC."REFERENCE_EFFECTIVE_DT",
					 PP_OC."REFERENCE_EXPIRY_DT",
					 ::SQL_ERROR_CODE,
		             ::SQL_ERROR_MESSAGE,
		             LV_CUR_UTC);
		             
	  	LV_ERROR_FLAG := 'Y';  
	  	LV_LOOP_ERROR_FLAG := 1;  
         
    END;
    
-----------------------------------------------------------------------------------------------   
    
-- FOR CLEARING THE VARIABLES

	IF ((LV_PREV_RECORD IS NULL ) OR ("PP_OC"."CONCAT_PK" != LV_PREV_RECORD)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "PP_OC"."CONCAT_PK";
			 	   
    END IF;

 -----------------------------------------------------------------------------------------------
 
 
--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF PP_OC.ERROR_STATUS = 1  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(PP_OC."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];

-- Insert record into error table
    	     INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_PP_OC_RATE_EH"(
					 "SOC",
					 "EXPIRATION_DATE",
					 "EFFECTIVE_DATE",
					 "FEATURE_CODE",
					 "RATE",
					 "NO_OF_INSTALLMENTS",
					 "PAYMENT_INTERVAL",
					 "REFERENCE_EFFECTIVE_DT",
					 "REFERENCE_EXPIRY_DT",
					 "ERROR_CODE",
					 "ERROR_CREATE_TS")
		VALUES      (PP_OC."SOC",
					 PP_OC."EXPIRATION_DATE",
					 PP_OC."EFFECTIVE_DATE",
					 PP_OC."FEATURE_CODE",
					 PP_OC."RATE",
					 PP_OC."NO_OF_INSTALLMENTS",
					 PP_OC."PAYMENT_INTERVAL",
					 PP_OC."REFERENCE_EFFECTIVE_DT",
					 PP_OC."REFERENCE_EXPIRY_DT",
					 :CURRENT_ERROR,
		             LV_CUR_UTC);
		            
		     END FOR;
		     
-- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;		    
 
-- Processing for Successful Records
   ELSE 
         IF PP_OC.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
-- Insert record into error table	

	          INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_PP_OC_RATE_EH"(
					 "SOC",
					 "EXPIRATION_DATE",
					 "EFFECTIVE_DATE",
					 "FEATURE_CODE",
					 "RATE",
					 "NO_OF_INSTALLMENTS",
					 "PAYMENT_INTERVAL",
					 "REFERENCE_EFFECTIVE_DT",
					 "REFERENCE_EXPIRY_DT",
					 "ERROR_CODE",
					 "ERROR_CREATE_TS")
		VALUES      (PP_OC."SOC",
					 PP_OC."EXPIRATION_DATE",
					 PP_OC."EFFECTIVE_DATE",
					 PP_OC."FEATURE_CODE",
					 PP_OC."RATE",
					 PP_OC."NO_OF_INSTALLMENTS",
					 PP_OC."PAYMENT_INTERVAL",
					 PP_OC."REFERENCE_EFFECTIVE_DT",
					 PP_OC."REFERENCE_EXPIRY_DT",
					 'PREVIOUS VERSION IN ERROR',
		             LV_CUR_UTC);   
		             
		  ELSE      		             
-- Processing for Successful Records   

--   If Record exists in the Target NDB Table
     IF PP_OC.FLAG_EXISTING_RECORD = 'U' THEN
       BEGIN AUTONOMOUS TRANSACTION 

	--     Update the target NDB table
		   UPDATE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_PP_OC_RATE" NDB 
			  SET  NDB.REFERENCE_EXPIRY_DT     = PP_OC.EFFECTIVE_DATE_PREV_DAY,
		 		   NDB.MODIFIED_TS             = LV_CUR_UTC 
        	 WHERE PP_OC."SOC"                 = NDB."SOC" 
			   AND PP_OC."EFFECTIVE_DATE"      = NDB."EFFECTIVE_DATE" 
			   AND PP_OC."FEATURE_CODE"        = NDB."FEATURE_CODE"
			   AND PP_OC."NO_OF_INSTALLMENTS"  = NDB."NO_OF_INSTALLMENTS"
			   AND PP_OC."PAYMENT_INTERVAL"    = NDB."PAYMENT_INTERVAL"
			   AND NDB.REFERENCE_EXPIRY_DT     = '99991231';	
				   
		 --    Insert the Incoming new record
		        INSERT INTO  "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_PP_OC_RATE"(
							 "SOC",
							 "EXPIRATION_DATE",
							 "EFFECTIVE_DATE",
							 "FEATURE_CODE",
							 "RATE",
							 "NO_OF_INSTALLMENTS",
							 "PAYMENT_INTERVAL",
							 "REFERENCE_EFFECTIVE_DT",
							 "REFERENCE_EXPIRY_DT",
							 "INSERT_TS")
				     VALUES (PP_OC."SOC",
							 PP_OC."EXPIRATION_DATE",
							 PP_OC."EFFECTIVE_DATE",
							 PP_OC."FEATURE_CODE",
							 PP_OC."RATE",
							 PP_OC."NO_OF_INSTALLMENTS",
							 PP_OC."PAYMENT_INTERVAL",
							 PP_OC."REFERENCE_EFFECTIVE_DT",
							 PP_OC."REFERENCE_EXPIRY_DT",
		                     LV_CUR_UTC);
		                
       END;				   	       
  
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_IFRS_OB_PP_OC
					   ("SOC",  
					    "EFFECTIVE_DATE",
					    "FEATURE_CODE",
					    "NO_OF_INSTALLMENTS",
					    "PAYMENT_INTERVAL",
					    "EFF_DT")
			    VALUES (PP_OC."SOC",  
					    PP_OC."EFFECTIVE_DATE",
					    PP_OC."FEATURE_CODE",
					    PP_OC."NO_OF_INSTALLMENTS",
					    PP_OC."PAYMENT_INTERVAL",
					    PP_OC."REFERENCE_EFFECTIVE_DT");
					     		   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("SOC",  
					    "EFFECTIVE_DATE",
					    "FEATURE_CODE",
					    "NO_OF_INSTALLMENTS",
					    "PAYMENT_INTERVAL",
					    "REFERENCE_EFFECTIVE_DT") 
			    VALUES (PP_OC."SOC",  
					    PP_OC."EFFECTIVE_DATE",
					    PP_OC."FEATURE_CODE",
					    PP_OC."NO_OF_INSTALLMENTS",
					    PP_OC."PAYMENT_INTERVAL",
					    PP_OC."REFERENCE_EFFECTIVE_DT");
					   	
     ELSEIF PP_OC.FLAG_EXISTING_RECORD = 'I' THEN
     
     BEGIN AUTONOMOUS TRANSACTION
     	 --    Insert Records into the target NDB table
		        INSERT INTO  "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_PP_OC_RATE"(
							 "SOC",
							 "EXPIRATION_DATE",
							 "EFFECTIVE_DATE",
							 "FEATURE_CODE",
							 "RATE",
							 "NO_OF_INSTALLMENTS",
							 "PAYMENT_INTERVAL",
							 "REFERENCE_EFFECTIVE_DT",
							 "REFERENCE_EXPIRY_DT",
							 "INSERT_TS")
				     VALUES (PP_OC."SOC",
							 PP_OC."EXPIRATION_DATE",
							 PP_OC."EFFECTIVE_DATE",
							 PP_OC."FEATURE_CODE",
							 PP_OC."RATE",
							 PP_OC."NO_OF_INSTALLMENTS",
							 PP_OC."PAYMENT_INTERVAL",
							 PP_OC."REFERENCE_EFFECTIVE_DT",
							 PP_OC."REFERENCE_EXPIRY_DT",
		                     LV_CUR_UTC);
		                     
		 END;                    
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_IFRS_OB_PP_OC
					   ("SOC",  
					    "EFFECTIVE_DATE",
					    "FEATURE_CODE",
					    "NO_OF_INSTALLMENTS",
					    "PAYMENT_INTERVAL",
					    "EFF_DT")
			    VALUES (PP_OC."SOC",  
					    PP_OC."EFFECTIVE_DATE",
					    PP_OC."FEATURE_CODE",
					    PP_OC."NO_OF_INSTALLMENTS",
					    PP_OC."PAYMENT_INTERVAL",
					    PP_OC."REFERENCE_EFFECTIVE_DT");
					     		   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("SOC",  
					    "EFFECTIVE_DATE",
					    "FEATURE_CODE",
					    "NO_OF_INSTALLMENTS",
					    "PAYMENT_INTERVAL",
					    "REFERENCE_EFFECTIVE_DT") 
			    VALUES (PP_OC."SOC",  
					    PP_OC."EFFECTIVE_DATE",
					    PP_OC."FEATURE_CODE",
					    PP_OC."NO_OF_INSTALLMENTS",
					    PP_OC."PAYMENT_INTERVAL",
					    PP_OC."REFERENCE_EFFECTIVE_DT");
					   	
       END IF;
      
     END IF; 
   
   END IF;
 
 END IF;        

END FOR;	

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::IFRS_OB_PP_OC_RATE
UPDATE "LAND"."IFRS_R1.LAND::IFRS_OB_PP_OC_RATE"  A
  FROM "LAND"."IFRS_R1.LAND::IFRS_OB_PP_OC_RATE"  A 
 INNER JOIN #UPDATE_IFRS_OB_PP_OC B 
    ON A."SOC"                 = B."SOC" 
   AND A."EFFECTIVE_DATE"      = B."EFFECTIVE_DATE" 
   AND A."FEATURE_CODE"        = B."FEATURE_CODE"
   AND A."NO_OF_INSTALLMENTS"  = B."NO_OF_INSTALLMENTS"
   AND A."PAYMENT_INTERVAL"    = B."PAYMENT_INTERVAL"
   AND A."EFF_DT"              = B."EFF_DT"
   SET NDB_TS                  = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

  UPDATE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_PP_OC_RATE_EH" A
    FROM "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_PP_OC_RATE_EH" A 
   INNER JOIN #UPDATE_EH_DELETION B
    ON A."SOC"                    = B."SOC" 
   AND A."EFFECTIVE_DATE"         = B."EFFECTIVE_DATE" 
   AND A."FEATURE_CODE"           = B."FEATURE_CODE"
   AND A."NO_OF_INSTALLMENTS"     = B."NO_OF_INSTALLMENTS"
   AND A."PAYMENT_INTERVAL"       = B."PAYMENT_INTERVAL"
   AND A."REFERENCE_EFFECTIVE_DT" = B."REFERENCE_EFFECTIVE_DT" 
   SET (DELETE_DATE, DELETED)     = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
	
END;
