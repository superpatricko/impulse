PROCEDURE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::SP_TC_DLR_CMPNSTN_BNS" ( ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
	AS
	V_CURR_DATE 		DATE 			:= CURRENT_DATE;  
	V_PROC_ID 	   		INTEGER			:= 30002;
	V_PROC_NAME 		NVARCHAR(30)	:= 'SP_TC_DLR_CMPNSTN_BNS';
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
BEGIN
   /***************************** 
	 Nested Begin Block for insert
 	*****************************/
 	
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION 

		BEGIN AUTONOMOUS TRANSACTION   
		
			INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::TC_ERROR_LOG"
			(
			 "PROCEDURE_ID","PROCEDURE_NAME", "ERROR_CODE", "ERROR_MESSAGE", "START_END_TIME"
			)
			VALUES
			(
			V_PROC_ID,
			V_PROC_NAME,
			::SQL_ERROR_CODE,
			'While Insert '|| ::SQL_ERROR_MESSAGE ,
			V_CURR_DATE
			);
			
		COMMIT;
		RESIGNAL;
		END; 
 		
 INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::NDB_COMM"
			(RECORD_ID,
			"PRE_POST_TYPE",
	 		"L_O_B",
	 		"CHANNEL_CODE",
	 		"COMMISSION_AMT",
	 		"COMMISSION_TYPE",
	 		"CURRENCY",
	 		"BRAND",
	 		"SRC_SYS_FLG",
	 		"MONTH_PAID",
	 		--"PROVINCE", 
			"INSRT_TS"
			)
		SELECT  
			1,--"NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::RECORD_ID".nextval,
			MAP(LAND."PRE_POST_TYPE",NULL,'Postpaid',LAND."PRE_POST_TYPE"),
	 			--"PRODUCT_CODE",
	 			LAND."L_O_B",
	 			LAND."CHANNEL_CODE",
	 			LAND."COMMISSION_AMT",
	 			LAND."COMMISSION_TYPE",
	 			LAND."CURRENCY",
	 			LAND."BRAND",
	 			LAND."SRC_SYS_FLAG",
	 			LAND."MONTH_PAID",
	 			--"PROVINCE", 
				V_CURR_DATE
		FROM   "_SYS_BIC"."IFRS_R1.COMMON_COMP.LAND_COMMON/CA_TC_DLR_CMPNSTN_BNS_VW" LAND;
		--WHERE NOT EXISTS (SELECT NDB."PRE_POST_TYPE",NDB."L_O_B",NDB."CHANNEL_CODE",NDB."SRC_SYS_FLG",NDB."COMMISSION_TYPE" FROM "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::NDB_COMM" NDB
		--WHERE NDB."PRE_POST_TYPE" = LAND."PRE_POST_TYPE" AND NDB."L_O_B" = LAND."L_O_B" AND NDB."CHANNEL_CODE" = LAND."CHANNEL_CODE" AND NDB."SRC_SYS_FLG" = LAND."SRC_SYS_FLAG" AND NDB."COMMISSION_TYPE" = LAND."COMMISSION_TYPE");
		
		COMMIT;
 		
 	END;		
 	
 	BEGIN -- start of NDB_TS Update
	 
	 		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	
			BEGIN AUTONOMOUS TRANSACTION  -- Start of exception handler
			
				INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::TC_ERROR_LOG"
				(
				 "PROCEDURE_ID","PROCEDURE_NAME", "ERROR_CODE", "ERROR_MESSAGE", "START_END_TIME"
				)
				VALUES
				(
				V_PROC_ID,
				V_PROC_NAME,
				::SQL_ERROR_CODE,
				'While Updating Landing Table '||::SQL_ERROR_MESSAGE,
				V_CURR_DATE
				);
				
				COMMIT;
				RESIGNAL;
			END;  
	 
			UPDATE "LAND"."IFRS_R1.LAND::TC_DLR_CMPNSTN_BNS" AS A 
			SET 
				NDB_TS= V_CURR_DATE 
			WHERE NDB_TS IS NULL 
			AND EXISTS (SELECT 'X'
					   FROM "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::NDB_COMM" B
					   WHERE A."COMMISSION_TYPE" = B."COMMISSION_TYPE"
					   AND	 A."PRE_POST_TYPE" = B."PRE_POST_TYPE"
					   AND	 A."L_O_B" = B."L_O_B"
					   AND   A."CHANNEL_CODE" = B."CHANNEL_CODE"
					   AND 	 A."MONTH_PAID" = B."MONTH_PAID");
			COMMIT;
	
	END;  
END