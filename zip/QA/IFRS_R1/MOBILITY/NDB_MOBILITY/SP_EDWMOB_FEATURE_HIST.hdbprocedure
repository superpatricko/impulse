PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_EDWMOB_FEATURE_HIST"
(IN IP_EFF_DT DATE,
OUT OP_STATUS NVARCHAR(100))
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA
	 AS
BEGIN  

----------------------------------------------------------------------
-- Procedure Title : SP_EDWMOB_FEATURE_HIST
--
-- Created By      : BC_EY94137(Akanksha Singh)          Date : 13/09/2016
-- 
-- Procedure Description : It is used to Upsert data in NDB Table.
--                         NDB_TS is updated in Landing Table         
--                         after data is loaded in NDB.
--Project :Bell Canada
--
--
----------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
----------------------------------------------------------------------
-- 30/11/2016  | BC_EY94137       | Added error and control logs
-- 09/12/2016   | BC_EY94137       | Retest for Reference History 
-- 18/05/2017  | EZ_18762		  | Effective date as input and one cursor logic/error logic 
---------------|------------------|-----------------------------------
-- Description Of the changes 
----------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> :<Description of Changes>       
----------------------------------------------------------------------

	DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
	DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
	DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
	DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
	DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
	DECLARE i					INTEGER;
	DECLARE RECORD_COUNT		INTEGER;
	DECLARE CURRENT_ERROR		NVARCHAR(100);

	-- New variables for version sequence check
	DECLARE LV_LOOP_ERROR_FLAG      INTEGER := 0;
	DECLARE LV_PREV_FEAT_CD		 	NVARCHAR(6) := NULL;
	
	
	DECLARE CURSOR CA_EDWMOB_FEAT_HIST FOR
	SELECT
	 "FEAT_CD",
	 "FEATURE_DESC",
	 "REVENUE_CD",
	 "PRODUCT_TYP",
	 "PRORATION_IND",
	 "SERVICE_LEVEL",
	 "NETWORK_TYPE",
	 "FEATURE_QUANTITY",
	 "FLAG_EXISTING_RECORD",
	 "EFFECTIVE_DATE_PREV_DAY",
	 "REFERENCE_EFFECTIVE_DT",
	 "REFERENCE_EXPIRY_DT",
	 "EFF_DT",
	 "EXPY_DT",
	 "CYCL_ID",
	 "ERROR_CODE",
	 "ERROR_STATUS"
	 FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_NM1_EDW_REF_FEAT_HIST"	 
	(PLACEHOLDER."$$IP_EFF_DT$$"=> :IP_EFF_DT)
	ORDER BY "FEAT_CD","REFERENCE_EFFECTIVE_DT";

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------  	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_NM1_EDW_REF_FEAT_HIST(FEAT_CD NVARCHAR(6), EFF_DT DATE, CYCL_ID NVARCHAR(3));
    CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(FEAT_CD NVARCHAR(100),REFERENCE_EFFECTIVE_DT NVARCHAR(100));
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 		

	FOR CUR_FEAT AS CA_EDWMOB_FEAT_HIST DO
		
		-- Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION
			-- Define Exit Handler
			DECLARE EXIT HANDLER FOR SQLEXCEPTION 
			BEGIN AUTONOMOUS TRANSACTION 
			END;
			
			INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_FEATURE_HIST_EH" (
			 FEAT_CD,
			 FEATURE_DESC,
			 REVENUE_CD,
			 PRODUCT_TYP,
			 PRORATION_IND,
			 FEATURE_QUANTITY,
			 SERVICE_LEVEL,
			 NETWORK_TYPE,
			 INSERT_TS,
			 REFERENCE_EFFECTIVE_DT,
			 REFERENCE_EXPIRY_DT,				
			 "ERROR_CODE",
			 "TECHNICAL_MESSAGE",
			 "ERROR_CREATE_TS"
			 ) VALUES (
			 CUR_FEAT.FEAT_CD,
			 CUR_FEAT.FEATURE_DESC,
			 CUR_FEAT.REVENUE_CD,
			 CUR_FEAT.PRODUCT_TYP,
			 CUR_FEAT.PRORATION_IND,
			 CUR_FEAT.FEATURE_QUANTITY,
			 CUR_FEAT.SERVICE_LEVEL,
			 CUR_FEAT.NETWORK_TYPE,			 
			 LV_CUR_UTC,
			 CUR_FEAT."EFF_DT",
			 CUR_FEAT."REFERENCE_EXPIRY_DT",
			 ::SQL_ERROR_CODE,
			 ::SQL_ERROR_MESSAGE,
		  	 LV_CUR_UTC);			
			LV_ERROR_FLAG := 'Y';
			
			-- New code for version sequence check 
			LV_LOOP_ERROR_FLAG := 1;
		END;
		
		-- New code for version sequence check
		-- FOR CLEARING THE VARIABLES
		IF ( LV_PREV_FEAT_CD IS NULL OR CUR_FEAT."FEAT_CD" != LV_PREV_FEAT_CD) THEN	
			LV_LOOP_ERROR_FLAG := 0;
			LV_PREV_FEAT_CD := "CUR_FEAT"."FEAT_CD";
	    END IF;
	    
	     
	    --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_FEAT.ERROR_STATUS = 1  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_FEAT."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		 -- Insert into the Error Table
		 		INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_FEATURE_HIST_EH" (
				 FEAT_CD,
				 FEATURE_DESC,
				 REVENUE_CD,
				 PRODUCT_TYP,
				 PRORATION_IND,
				 FEATURE_QUANTITY,
				 SERVICE_LEVEL,
				 NETWORK_TYPE,
				 INSERT_TS,
				 REFERENCE_EFFECTIVE_DT,
				 REFERENCE_EXPIRY_DT,
				 ERROR_CODE,
				 ERROR_CREATE_TS
				 ) VALUES (
				 CUR_FEAT.FEAT_CD,
				 CUR_FEAT.FEATURE_DESC,
				 CUR_FEAT.REVENUE_CD,
				 CUR_FEAT.PRODUCT_TYP,
				 CUR_FEAT.PRORATION_IND,
				 CUR_FEAT.FEATURE_QUANTITY,
				 CUR_FEAT.SERVICE_LEVEL,
				 CUR_FEAT.NETWORK_TYPE,			 
				 LV_CUR_UTC,
				 CUR_FEAT."EFF_DT",
				 CUR_FEAT."REFERENCE_EXPIRY_DT",
				 :CURRENT_ERROR,
				 LV_CUR_UTC
				 );
		
	    END FOR ;
	    
	    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
	    
	    
			-- Checking older record having same Feat_CD has some issue in loading then other records should be send to Error Handling table.
			--If ERROR_STATUS = ‘0’ and previous record went to error table then present record will go to error table with ERROR_CODE = 'PREVIOUS VERSION IN ERROR'
			
			ELSE 
         
         IF CUR_FEAT.ERROR_STATUS = '0' THEN
			
			IF LV_LOOP_ERROR_FLAG = 1 THEN
				
				INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_FEATURE_HIST_EH" (
				 FEAT_CD,
				 FEATURE_DESC,
				 REVENUE_CD,
				 PRODUCT_TYP,
				 PRORATION_IND,
				 FEATURE_QUANTITY,
				 SERVICE_LEVEL,
				 NETWORK_TYPE,
				 INSERT_TS,
				 REFERENCE_EFFECTIVE_DT,
				 REFERENCE_EXPIRY_DT,
				 ERROR_CODE,
				 ERROR_CREATE_TS
				 ) VALUES (
				 CUR_FEAT.FEAT_CD,
				 CUR_FEAT.FEATURE_DESC,
				 CUR_FEAT.REVENUE_CD,
				 CUR_FEAT.PRODUCT_TYP,
				 CUR_FEAT.PRORATION_IND,
				 CUR_FEAT.FEATURE_QUANTITY,
				 CUR_FEAT.SERVICE_LEVEL,
				 CUR_FEAT.NETWORK_TYPE,			 
				 LV_CUR_UTC,
				 CUR_FEAT."EFF_DT",
				 CUR_FEAT."REFERENCE_EXPIRY_DT",
				 'PREVIOUS VERSION IN ERROR',
				 LV_CUR_UTC
				 );
				 
				 
				ELSE
			
					IF CUR_FEAT.FLAG_EXISTING_RECORD = 'U' THEN
					
							BEGIN AUTONOMOUS TRANSACTION
			     			UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_FEATURE_HIST" A 
							SET (REFERENCE_EXPIRY_DT,MODIFIED_TS)= (CUR_FEAT.EFFECTIVE_DATE_PREV_DAY,:LV_CUR_UTC)
							WHERE A.FEAT_CD=CUR_FEAT.FEAT_CD
							AND A.REFERENCE_EXPIRY_DT = '99991231';
							
							INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_FEATURE_HIST" (
							 FEAT_CD,
							 FEATURE_DESC,
							 REVENUE_CD,
							 PRODUCT_TYP,
							 PRORATION_IND,
							 FEATURE_QUANTITY,
							 SERVICE_LEVEL,
							 NETWORK_TYPE,
							 INSERT_TS,
							 REFERENCE_EFFECTIVE_DT,
							 REFERENCE_EXPIRY_DT
							 ) VALUES (
							 CUR_FEAT.FEAT_CD,
							 CUR_FEAT.FEATURE_DESC,
							 CUR_FEAT.REVENUE_CD,
							 CUR_FEAT.PRODUCT_TYP,
							 CUR_FEAT.PRORATION_IND,
							 CUR_FEAT.FEATURE_QUANTITY,
							 CUR_FEAT.SERVICE_LEVEL,
							 CUR_FEAT.NETWORK_TYPE,			 
							 LV_CUR_UTC,
							 CUR_FEAT."EFF_DT",
							 CUR_FEAT."REFERENCE_EXPIRY_DT");
							 
							 
							 END;
					 	
					 	
			     			 INSERT INTO #UPDATE_NM1_EDW_REF_FEAT_HIST 
			     			 										   (FEAT_CD,
			     			                                           EFF_DT,
			     			                                           CYCL_ID
			     			                                           ) VALUES (
			     			                                           CUR_FEAT."FEAT_CD",
			     			                                           CUR_FEAT."EFF_DT",
			     			                                           CUR_FEAT."CYCL_ID");
			     			 INSERT INTO #UPDATE_EH_DELETION
							    				  (FEAT_CD,					    				  
									              REFERENCE_EFFECTIVE_DT)     
		 	     	  					  VALUES (CUR_FEAT."FEAT_CD",
							 	                  CUR_FEAT.EFF_DT);
		     			
		     		ELSEIF CUR_FEAT.FLAG_EXISTING_RECORD = 'I' THEN
		    			
						BEGIN AUTONOMOUS TRANSACTION     		
		     			INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_FEATURE_HIST" (
						 FEAT_CD,
						 FEATURE_DESC,
						 REVENUE_CD,
						 PRODUCT_TYP,
						 PRORATION_IND,
						 FEATURE_QUANTITY,
						 SERVICE_LEVEL,
						 NETWORK_TYPE,
						 INSERT_TS,
						 REFERENCE_EFFECTIVE_DT,
						 REFERENCE_EXPIRY_DT
						 ) VALUES (
						 CUR_FEAT.FEAT_CD,
						 CUR_FEAT.FEATURE_DESC,
						 CUR_FEAT.REVENUE_CD,
						 CUR_FEAT.PRODUCT_TYP,
						 CUR_FEAT.PRORATION_IND,
						 CUR_FEAT.FEATURE_QUANTITY,
						 CUR_FEAT.SERVICE_LEVEL,
						 CUR_FEAT.NETWORK_TYPE,			 
						 LV_CUR_UTC,
						 CUR_FEAT."REFERENCE_EFFECTIVE_DT",
						 CUR_FEAT."REFERENCE_EXPIRY_DT");
						 
						 
						 
					 	END;
					 
						 INSERT INTO #UPDATE_NM1_EDW_REF_FEAT_HIST (FEAT_CD,
		     			                                           EFF_DT,
		     			                                           CYCL_ID
		     			                                           ) VALUES (
		     			                                           CUR_FEAT."FEAT_CD",
		     			                                           CUR_FEAT."EFF_DT",
		     			                                           CUR_FEAT."CYCL_ID");
						 INSERT INTO #UPDATE_EH_DELETION
							    				  (FEAT_CD,					    				  
									              REFERENCE_EFFECTIVE_DT)     
		 	     	  					  VALUES (CUR_FEAT."FEAT_CD",
							 	                  CUR_FEAT.EFF_DT);
		     			
		     		END IF;
		        END IF;
		      END IF ; 
		    END IF ;   
		        
	END FOR;
	
	
	-- Update NDB Timestamp in landing table After Processing	
	UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_REF_FEAT_HIST" A 
	FROM "LAND"."IFRS_R1.LAND::NM1_EDW_REF_FEAT_HIST" A
	INNER JOIN #UPDATE_NM1_EDW_REF_FEAT_HIST B
	ON A.FEAT_CD = B."FEAT_CD"
	AND A.EFF_DT = B.EFF_DT
	AND A.CYCL_ID = B.CYCL_ID
	SET A.NDB_TS = LV_CUR_UTC 
	WHERE A.NDB_TS IS NULL;
	
	
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

	UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_FEATURE_HIST_EH" A
    FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_FEATURE_HIST_EH" A 
    INNER JOIN #UPDATE_EH_DELETION B       
    ON A."FEAT_CD" = B."FEAT_CD"  
    AND A."REFERENCE_EFFECTIVE_DT" = B."REFERENCE_EFFECTIVE_DT"   
    SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);	
--------------------------------------------------------------------------------------------------
	-- Set Overall Status
-------------------------------------------------------------------------------------------------- 
	--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
	--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN
    	OP_STATUS := LC_ERROR_TEXT; 			
    ELSE
  		OP_STATUS := LC_SUCCESS_TEXT;				
	END IF;	
END; 