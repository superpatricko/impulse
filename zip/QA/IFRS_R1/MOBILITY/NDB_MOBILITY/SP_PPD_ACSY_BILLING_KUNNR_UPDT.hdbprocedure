PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_PPD_ACSY_BILLING_KUNNR_UPDT"
(OUT OP_STATUS NVARCHAR(1000)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_PPD_ACSY_BILLING_KUNNR_UPDT
-- Created By      : BC_EZ03139 (Mohammad Jamilish)     
-- Create Date     : 15-05-2017
-- Description     : Data Inserted using Calculation View - CA_PPD_ACSY_CUSTOMER 
--                   To NDB Table - PPD_BILLING Using this stored procedure.		
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);
DECLARE LV_PREV_DAY         DATE;
  
--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
  
 DECLARE CURSOR C_PPD_ACSY_CUST FOR
    SELECT
     "COMPANY_CODE",
	 "COST_CENTER",
	 "GL_ACCOUNT", 
	 "ACSY_KUNNR_SID",
	 "MODIFIED_TS",
	 "ERROR_STATUS",
	 "ERROR_CODE" 
 FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_PPD_ACSY_CUSTOMER"; 
 
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------  

CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(COMPANY_CODE NVARCHAR(4), COST_CENTER NVARCHAR(10), GL_ACCOUNT NVARCHAR(10));


--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 

FOR CURR_PPD_ACSY_CUST AS C_PPD_ACSY_CUST DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 

--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 
	
      -- Do Nothing. Exception Handled to ensure SP does not get terminated
	
	  END; 

   -- Insert into the Error Table
   INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::PPD_BILLING_EH"(
   	 	       "COMPANY_CODE",
   	 	       "COST_CENTER",
   	 	       "GL_ACCOUNT", 
   	 	       "ACSY_KUNNR_SID",
   	 	       "ERROR_CODE",
   	 	       "TECHNICAL_MESSAGE",
   	 	       "ERROR_CREATE_TS") 
		VALUES(CURR_PPD_ACSY_CUST."COMPANY_CODE",
   	 	       CURR_PPD_ACSY_CUST."COST_CENTER",
   	 	       CURR_PPD_ACSY_CUST."GL_ACCOUNT", 
   	 	       CURR_PPD_ACSY_CUST."ACSY_KUNNR_SID",
   	 	       ::SQL_ERROR_CODE,
   	 	       ::SQL_ERROR_MESSAGE,
   	 	       LV_CUR_UTC);   
   
	  	LV_ERROR_FLAG := 'Y';
    
   END; 
 
--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CURR_PPD_ACSY_CUST.ERROR_STATUS = '1' THEN
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CURR_PPD_ACSY_CUST."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		 -- Insert into the Error Table
			INSERT INTO	"NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::PPD_BILLING_EH"(
		   	 	        "COMPANY_CODE",
		   	 	        "COST_CENTER",
		   	 	        "GL_ACCOUNT", 
		   	 	        "ACSY_KUNNR_SID",
		   	 	        "ERROR_CODE",
		   	 	        "ERROR_CREATE_TS") 
				 VALUES(CURR_PPD_ACSY_CUST."COMPANY_CODE",
		   	 	        CURR_PPD_ACSY_CUST."COST_CENTER",
		   	 	        CURR_PPD_ACSY_CUST."GL_ACCOUNT", 
		   	 	        CURR_PPD_ACSY_CUST."ACSY_KUNNR_SID",
		   	 	        :CURRENT_ERROR,
		   	 	        LV_CUR_UTC); 
		   	 	        			
		END FOR;
						         		        
       -- Set Error Flag				        
	    LV_ERROR_FLAG := 'Y';

-- Processing for Successful Records
   ELSE
   
   --     Update Records into the target NDB table  
	      UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::PPD_BILLING"
	         SET ("ACSY_KUNNR_SID",
	              "MODIFIED_TS")
	           = (CURR_PPD_ACSY_CUST."ACSY_KUNNR_SID",
	              LV_CUR_UTC)
	       WHERE COMPANY_CODE = CURR_PPD_ACSY_CUST."COMPANY_CODE"
		   	 AND COST_CENTER = CURR_PPD_ACSY_CUST."COST_CENTER"
		   	 AND GL_ACCOUNT = CURR_PPD_ACSY_CUST."GL_ACCOUNT"
		   	 AND ACSY_KUNNR_SID IS NULL;
		   	 
--         Add record to Delete the error from the error table if it exists

			INSERT INTO	#UPDATE_EH_DELETION(
				 	 	"COMPANY_CODE",
		   	 	        "COST_CENTER",
		   	 	        "GL_ACCOUNT") 
				 VALUES(CURR_PPD_ACSY_CUST."COMPANY_CODE",
		   	 	        CURR_PPD_ACSY_CUST."COST_CENTER",
		   	 	        CURR_PPD_ACSY_CUST."GL_ACCOUNT");
	END IF;

END FOR;
		   	 	        
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------
UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::PPD_BILLING_EH" A
  FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::PPD_BILLING_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B 
	ON A.COMPANY_CODE      = B.COMPANY_CODE
   AND A.COST_CENTER       = B.COST_CENTER
   AND A.GL_ACCOUNT        = B.GL_ACCOUNT
   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;		
 
 
 
 
 
 
 
 