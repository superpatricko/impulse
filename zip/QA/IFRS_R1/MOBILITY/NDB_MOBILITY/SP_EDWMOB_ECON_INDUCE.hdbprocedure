PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_EDWMOB_ECON_INDUCE"  
(IN IP_EFF_DT DATE,
OUT OP_STATUS NVARCHAR(100))
	LANGUAGE SQLSCRIPT
	--SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
	AS
BEGIN 

--------------------- -----------------------------------------------------------
-- Procedure Title : IFRS_R1.MOBILITY.NDB_MOBILITY::SP_EDWMOB_ECON_INDUCE
--
-- Created By      : BC_EY96107(Umasankar Nayak)          Date :08/09/2016
-- 
-- Procedure Description : 
--  1.We will update and Insert Subsidy information into NDB layer
--	2.Provides the subsidy information (effective/expiry dates, rebate type, 
--    subsidy amount, subsidy d uration, etc.) for each contract.	
-- 
-- 
-- Project: Bell Canada
-- 
--  
-- Release :R1/IFRS
--------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------
-- 30/11/2016  | BC_EY94137       | Added error and control logs 
-- 06/12/2016  | BC_EY94137       | Updated to maintain History 
-- 02/05/2017  | EZ_18762		  | Effective date as input and one cursor logic/error logic 
-- 14/08/2017  | BC_EZ15397       | Data Propagation - Version sequence check logic
--------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> :<Description of Changes>       
--------------------------------------------------------------------------------

	DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
	DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
	DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
	DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
	DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
	DECLARE i					INTEGER;
	DECLARE RECORD_COUNT		INTEGER;
	DECLARE CURRENT_ERROR		NVARCHAR(100);
	
-- New variables for version sequence check
	DECLARE LV_LOOP_ERROR_FLAG        INTEGER := 0;
	DECLARE LV_PREV_BAN_SUB		  NVARCHAR(41) := NULL;
	
	
	DECLARE CURSOR CA_ECON_INDUCE FOR
	SELECT
	 "FLAG_EXISTING_RECORD",
	 "EFF_DT",
	 "EXPY_DT",
	 "BAN",
	 "SUBSCR_NO",
	 "EI_SEQ_NO",
	 "SUBS_AMT",
	 "EFFECTIVE_DATE",
	 "EXPIRATION_DATE",
	 "EI_GP_SEQ_NO",
	 "SUBS_DUR",
	 "REFERENCE_EXPIRY_DT",
	 "REFERENCE_EFFECTIVE_DT",
	 "EFFECTIVE_DATE_PREV_DAY",
	 "CYCL_ID",
	 "ERROR_CODE",
	 "ERROR_STATUS",
	 "CONCAT_PK"
	FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_NM1_EDW_REF_ECON_INDC_HIST"
	(PLACEHOLDER."$$IP_EFF_DT$$"=> :IP_EFF_DT)
	ORDER BY BAN,SUBSCR_NO,EI_SEQ_NO,CYCL_ID,REFERENCE_EFFECTIVE_DT;
 
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------  
CREATE LOCAL TEMPORARY TABLE #UPDATE_NM1_EDW_REF_ECON_INDC_HIST(BAN NVARCHAR(9), EI_SEQ_NO DECIMAL(12,0),
                                                      SUBSCRIBER_NO NVARCHAR(30), EFF_DT DATE, CYCL_ID NVARCHAR(3));

CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(BAN NVARCHAR(100),SUBSCR_NO NVARCHAR(100),
                                                   EI_SEQ_NO NVARCHAR(100),REFERENCE_EFFECTIVE_DT NVARCHAR(100));
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 		

	FOR CUR_ECON AS CA_ECON_INDUCE DO
		
		-- Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION
			-- Define Exit Handler
			DECLARE EXIT HANDLER FOR SQLEXCEPTION 
			BEGIN AUTONOMOUS TRANSACTION 
			END;
			-- INSERT the NDB Subsidy Table
			INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ECON_INDUCE_EH"(
			     "SUBS_AMT",
				 "BAN",
				 "SUBSCR_NO",
				 "EFFECTIVE_DATE",
				 "EXPIRATION_DATE",
				 "EI_GP_SEQ_NO",
				 "SUBS_DUR",
				 "EI_SEQ_NO",				 
				 "INSERT_TS",
				 "REFERENCE_EFFECTIVE_DT",
				 "REFERENCE_EXPIRY_DT",
			     "ERROR_CODE",
				 "TECHNICAL_MESSAGE",
				 "ERROR_CREATE_TS"
				  ) VALUES (
				 CUR_ECON."SUBS_AMT",
				 CUR_ECON."BAN",
				 CUR_ECON."SUBSCR_NO",
				 CUR_ECON."EFFECTIVE_DATE",
				 CUR_ECON."EXPIRATION_DATE",
				 CUR_ECON."EI_GP_SEQ_NO",
				 CUR_ECON."SUBS_DUR",
				 CUR_ECON."EI_SEQ_NO",				
				 LV_CUR_UTC,
				 CUR_ECON."EFF_DT",
				 CUR_ECON."REFERENCE_EXPIRY_DT",
				 ::SQL_ERROR_CODE,
				::SQL_ERROR_MESSAGE,
		  		LV_CUR_UTC
				);
			LV_ERROR_FLAG := 'Y';
			LV_LOOP_ERROR_FLAG := 1;		   
		--END for AUTONOMOS		
		END;
		
-- FOR CLEARING THE VARIABLES

	IF (LV_PREV_BAN_SUB IS NULL OR CUR_ECON."CONCAT_PK" != LV_PREV_BAN_SUB) THEN
		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_BAN_SUB := "CUR_ECON"."CONCAT_PK";		
		
    END IF;	
-------
 
 
--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_ECON.ERROR_STATUS = '1'  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_ECON."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		 -- Insert into the Error Table
   
   INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ECON_INDUCE_EH"(
			     "SUBS_AMT",
				 "BAN",
				 "SUBSCR_NO",
				 "EFFECTIVE_DATE",
				 "EXPIRATION_DATE",
				 "EI_GP_SEQ_NO",
				 "SUBS_DUR",
				 "EI_SEQ_NO",				 
				 "INSERT_TS",
				 "REFERENCE_EFFECTIVE_DT",
				 "REFERENCE_EXPIRY_DT",
			     "ERROR_CODE",
				 "ERROR_CREATE_TS"
				  ) VALUES (
				 CUR_ECON."SUBS_AMT",
				 CUR_ECON."BAN",
				 CUR_ECON."SUBSCR_NO",
				 CUR_ECON."EFFECTIVE_DATE",
				 CUR_ECON."EXPIRATION_DATE",
				 CUR_ECON."EI_GP_SEQ_NO",
				 CUR_ECON."SUBS_DUR",
				 CUR_ECON."EI_SEQ_NO",				
				 LV_CUR_UTC,
				 CUR_ECON."EFF_DT",
				 CUR_ECON."REFERENCE_EXPIRY_DT",
				 :CURRENT_ERROR,
		  		 LV_CUR_UTC
				);
				
				END FOR ;
				
            LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
		    
--------------------------
		   
    													--If ERROR_STATUS = ‘0’ and previous record went to error table 
   															--then present record will go to error table with ERROR_CODE = 'PREVIOUS VERSION IN ERROR'
         ELSE
         
          IF CUR_ECON.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
	  INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ECON_INDUCE_EH"(
			     "SUBS_AMT",
				 "BAN",
				 "SUBSCR_NO",
				 "EFFECTIVE_DATE",
				 "EXPIRATION_DATE",
				 "EI_GP_SEQ_NO",
				 "SUBS_DUR",
				 "EI_SEQ_NO",				 
				 "INSERT_TS",
				 "REFERENCE_EFFECTIVE_DT",
				 "REFERENCE_EXPIRY_DT",
			     "ERROR_CODE",
				 "ERROR_CREATE_TS"
				  ) VALUES (
				 CUR_ECON."SUBS_AMT",
				 CUR_ECON."BAN",
				 CUR_ECON."SUBSCR_NO",
				 CUR_ECON."EFFECTIVE_DATE",
				 CUR_ECON."EXPIRATION_DATE",
				 CUR_ECON."EI_GP_SEQ_NO",
				 CUR_ECON."SUBS_DUR",
				 CUR_ECON."EI_SEQ_NO",				
				 LV_CUR_UTC,
				 CUR_ECON."EFF_DT",
				 CUR_ECON."REFERENCE_EXPIRY_DT",
				 'PREVIOUS VERSION IN ERROR',
		  		 LV_CUR_UTC
				);
			      
	        
		    		
   
   
   	
		    -- If Record exists in the Target NDB Table
     	ELSE IF CUR_ECON.FLAG_EXISTING_RECORD = 'U' THEN
     			BEGIN AUTONOMOUS TRANSACTION
     				
     				UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ECON_INDUCE" A 
				    SET A.REFERENCE_EXPIRY_DT=CUR_ECON.EFFECTIVE_DATE_PREV_DAY,
				    A.MODIFIED_TS = LV_CUR_UTC
					WHERE A.BAN = CUR_ECON.BAN
					AND A.SUBSCR_NO = CUR_ECON.SUBSCR_NO
					AND A.EI_SEQ_NO = CUR_ECON.EI_SEQ_NO 
					AND A.REFERENCE_EXPIRY_DT = '99991231'; 
					
					INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ECON_INDUCE"(
				     "SUBS_AMT",
					 "BAN",
					 "SUBSCR_NO",
					 "EFFECTIVE_DATE",
					 "EXPIRATION_DATE",
					 "EI_GP_SEQ_NO",
					 "SUBS_DUR",
					 "EI_SEQ_NO",				 
					 "INSERT_TS",
					 "REFERENCE_EFFECTIVE_DT",
					 "REFERENCE_EXPIRY_DT"
					  ) VALUES (
					 CUR_ECON."SUBS_AMT",
					 CUR_ECON."BAN",
					 CUR_ECON."SUBSCR_NO",
					 CUR_ECON."EFFECTIVE_DATE",
					 CUR_ECON."EXPIRATION_DATE",
					 CUR_ECON."EI_GP_SEQ_NO",
					 CUR_ECON."SUBS_DUR",
					 CUR_ECON."EI_SEQ_NO",				
					 LV_CUR_UTC,
					 CUR_ECON."EFF_DT",
					 CUR_ECON."REFERENCE_EXPIRY_DT");	
					 
     			END;
     			-- Insert PK of successfully processed Records into Local Temp Tables 
				-- For Updating NDB_TS in corresponding Landing Tables records
     			INSERT INTO #UPDATE_NM1_EDW_REF_ECON_INDC_HIST (BAN,
     															EI_SEQ_NO,
     															SUBSCRIBER_NO,
     															EFF_DT,
     															CYCL_ID) 
     															VALUES (CUR_ECON."BAN",
     															CUR_ECON."EI_SEQ_NO",
     															CUR_ECON."SUBSCR_NO",
     															CUR_ECON."EFF_DT",
     															CUR_ECON."CYCL_ID");
     			INSERT INTO #UPDATE_EH_DELETION
					    				 (BAN,
					    				  EI_SEQ_NO,					    				 
							              SUBSCR_NO,
							              REFERENCE_EFFECTIVE_DT)     
 	     	  					  VALUES (CUR_ECON."BAN", 
 	     	  					  		  CUR_ECON."EI_SEQ_NO",	     	  					  		  
					 	                  CUR_ECON."SUBSCR_NO",
					 	                  CUR_ECON.EFF_DT);
     
     ELSEIF CUR_ECON.FLAG_EXISTING_RECORD = 'I' THEN
    
    BEGIN AUTONOMOUS TRANSACTION
    --    Insert Records into the target NDB table
     			INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ECON_INDUCE"(
				     "SUBS_AMT",
					 "BAN",
					 "SUBSCR_NO",
					 "EFFECTIVE_DATE",
					 "EXPIRATION_DATE",
					 "EI_GP_SEQ_NO",
					 "SUBS_DUR",
					 "EI_SEQ_NO",				 
					 "INSERT_TS",
					 "REFERENCE_EFFECTIVE_DT",
					 "REFERENCE_EXPIRY_DT"
					  ) VALUES (
					 CUR_ECON."SUBS_AMT",
					 CUR_ECON."BAN",
					 CUR_ECON."SUBSCR_NO",
					 CUR_ECON."EFFECTIVE_DATE",
					 CUR_ECON."EXPIRATION_DATE",
					 CUR_ECON."EI_GP_SEQ_NO",
					 CUR_ECON."SUBS_DUR",
					 CUR_ECON."EI_SEQ_NO",				
					 LV_CUR_UTC,
					 CUR_ECON."REFERENCE_EFFECTIVE_DT",
					 CUR_ECON."REFERENCE_EXPIRY_DT");
					 
				END;
					 
					 INSERT INTO #UPDATE_NM1_EDW_REF_ECON_INDC_HIST (BAN,
     															     EI_SEQ_NO,
     															     SUBSCRIBER_NO,
     															     EFF_DT,
     															     CYCL_ID) 
     															     VALUES (CUR_ECON."BAN",
     															     CUR_ECON."EI_SEQ_NO",
     															     CUR_ECON."SUBSCR_NO",
     															     CUR_ECON."EFF_DT",
     															     CUR_ECON."CYCL_ID");
     			     INSERT INTO #UPDATE_EH_DELETION
					    				  (BAN,
					    				  EI_SEQ_NO,					    				 
							              SUBSCR_NO,
							              REFERENCE_EFFECTIVE_DT)     
 	     	  					  VALUES (CUR_ECON."BAN", 
 	     	  					  		  CUR_ECON."EI_SEQ_NO",	     	  					  		  
					 	                  CUR_ECON."SUBSCR_NO",
					 	                  CUR_ECON.EFF_DT);
     	END IF;
  	   
  	   END IF;     			
	  
	  END IF ;
	  
	 END IF ;  
		
	END FOR;	
	
	-- Update NDB Timestamp in landing table After Processing	
	UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_REF_ECON_INDC_HIST" A 
	FROM "LAND"."IFRS_R1.LAND::NM1_EDW_REF_ECON_INDC_HIST" A
	INNER JOIN #UPDATE_NM1_EDW_REF_ECON_INDC_HIST B
	ON A.BAN = B."BAN"
	AND A.EI_SEQ_NO = B."EI_SEQ_NO"
	AND A.SUBSCRIBER_NO = B."SUBSCRIBER_NO"
	AND A.EFF_DT = B.EFF_DT
	AND A.CYCL_ID = B.CYCL_ID
	SET NDB_TS = LV_CUR_UTC
	WHERE NDB_TS IS NULL;
 --------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

	UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ECON_INDUCE_EH" A
    FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ECON_INDUCE_EH" A 
    INNER JOIN #UPDATE_EH_DELETION B       
    ON A."BAN" = B."BAN"
    AND A."SUBSCR_NO" = B."SUBSCR_NO"
    AND A."EI_SEQ_NO" = B."EI_SEQ_NO"    
    AND A."REFERENCE_EFFECTIVE_DT" = B."REFERENCE_EFFECTIVE_DT"   
    SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);	
--------------------------------------------------------------------------------------------------
	-- Set Overall Status
-------------------------------------------------------------------------------------------------- 
	--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
	--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN
    	OP_STATUS := LC_ERROR_TEXT; 			
    ELSE
  		OP_STATUS := LC_SUCCESS_TEXT;				
	END IF;	                      	
END;