PROCEDURE "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::SP_RAI_MOBL_INVC" 
 (IN IP_DATE DATE,
  IN IP_BAN NVARCHAR(1000),
  OUT OP_STATUS NVARCHAR(1000))   
	LANGUAGE SQLSCRIPT  
	SQL SECURITY INVOKER 
	AS
 
BEGIN

----------------------------------------------------------------------------------------------------
-- Procedure Title : IFRS_R1.MOBILITY.RAI_MOBILITY::SP_RAI_MOBL_INVC
----------------------------------------------------------------------------------------------------
-- Created By      : BC_EY44387(Gunjan Joshi)          Date :10/09/2016
----------------------------------------------------------------------------------------------------
-- Procedure Description : 
--   This Procedure will create the RAI order Items and invoice items based on 
--	 Mobility NDB order data and Mobility NDB billing data
--   If the Batch ID is blank in the NDB billing, then it will create 
--   Invoice RAI item .
--   Contract is created based on billing
--   Billing item with adjustments, overages services will be added as seperate POBs in the contract 
--   which is created for the Base services and the equipments   
--   if the contracts gets modified in between the billing cycle, the SSP and TP for the contract
--   modifiction will be calculated based on the pro-rated.

                           
--    This Procedure has one parameter:
--      1. The  OP_STATUS parametere : This parameter give the status of the Procedure whether it is 
--         success or failure

-- ERROR_LOG Table : will be used to trace the system error like transaction failed

-- FREQUENCY OF PROCEDURE EXECUTION: Daily

-- Track Error/Process Control Table: This table will be used to tract the start and end
--                                    time of the execution
----------------------------------------------------------------------------------------------------
-- Release :R1/IFRS
----------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
-- 08/08/2017  | BC_EZ23103       | CR 283 - Update to process the records based on input parameter as IP_BAN 
----------------------------------------------------------------------------------------------------
-- 
----------------------------------------------------------------------------------------------------
-- Description Of the changes 
----------------------------------------------------------------------------------------------------
-- Modification Number          :<Assign Some Number>  
-- Description of Changes Made> :<Updated the logic of NDB_TS write back>       
----------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
-- 18/08/2017  | BC_EY99601       | Defect 2996 - Updated Logic for field INCEPTION_DATE with JOURN_DATE
-- 13/09/2017  | BC_EZ18725       | RAID 534 - RAI control fields update in NDB based on a single primary key 
--                                             in NDB BIlling,BILL_PRIMARY_KEY instaed of composite key(7 fields)
----------------------------------------------------------------------------------------------------
-- 
----------------------------------------------------------------------------------------------------
-- Description Of the changes 
----------------------------------------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> : For Order created from Invoice INCEPTION_DATE is updated with JOURN_DATE 
--								  instead of PRD_CVRG_STRT_DATE       
----------------------------------------------------------------------------------------------------
-- Description Of the changes 
----------------------------------------------------------------------------------------------------
-- Modification Number          : Defect 3072 & 2624
-- Description of Changes Made> : Hint Unfolding is commented       
----------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LV_BATCH_ID           INTEGER;
DECLARE LV_COUNT_ORDR         INTEGER;
DECLARE LV_COUNT_INVC         INTEGER;
DECLARE LV_COMMIT_COUNT       INTEGER := 0; -- Commit count to ensure EH records are committed every 10k records
DECLARE LV_ERROR_FLAG 		  NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC            TIMESTAMP := CURRENT_TIMESTAMP;
--DECLARE LV_CUR_UTC_TIME       DECIMAL(15,2) 
--                              := TO_DECIMAL(TO_CHAR(CURRENT_UTCTIMESTAMP,'YYYYMMDDHHMISS'),15,2);
DECLARE LC_SQL_ERROR          NVARCHAR(40) DEFAULT 'SQL_SIBLING_ERROR';
DECLARE LC_ERROR_TEXT 		  NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	  NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE CURRENT_ERROR		  NVARCHAR(100);
DECLARE ERROR_TAB 			  TABLE (ERROR_CODE NVARCHAR(100));
DECLARE RECORD_COUNT		  INTEGER;
DECLARE i					  INTEGER;
DECLARE IP_BAN_LIST           NVARCHAR(1000);

	
--------------------------------------------------------------------------------------------------
-- Temporary tables/Variables/Nodes Declaration to hold data from the final CVs
-------------------------------------------------------------------------------------------------- 


MOBL_INVC_ORDR_RAI_ITEM_TEMP =
					SELECT 
						"CC_LC_SSP",
						"CC_LC_TP",
						"CC_SIBLING_ERROR",
						"CC_SRCDOC_ID",
						"CC_RAI_ITEM_ID",						
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"REFERENCE_TYPE",
						"BUKRS",
						"WAERS",
						"RECEIV_ACCOUNT",
						"TRANS_TY",
						"ITEM_ID",
						"BAN",
						"SUBSCR_NO",
						"ITEM_SUB_ID",
						"UOM",
						"AMT",
						"PRD_CVRG_END_DT",
						"PRD_CVRG_STRT_DT",
						"CC_LOB",
						"CC_CONTR_SEQ",
						"STNDLN_SELL_PRC",
						"TRANS_PRC",
						"SRCDOC_ID",
						"TIME_IND",
						"KUNNR_SID",
						"CHRG_TY_CLASSIF",
						"TERM_M2M",
						"CC_REF_ID",
						"RAI_ITEM_ID",						
						"BILL_SEQ_NO",
						"ENT_SEQ_NO",
						"GL_ACCT_NO",
						"JOURN_DT",
						"ZZ_ICHKONT",
						"ZZ_MWSKZ",
						"ZZ_TXJCD",
						"ZZ_LEGACY",
						"ZZ_ZUONR",
						"ZZ_XBLNR",
						"ZZ_BKTXT",
						"ZZ_SGTXT",
						"ZZ_VBUND",
						"ZZ_CATRANSFER",
						"ZZ_AUFNR",
						"ZZ_UPPFLAG",
						"ZZ_ADJ_RSN_CD",
						"ZZ_ALLOCATE",
						"ZZ_BILLER",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CONVERSION",
						"ZZ_MOD_TYPE",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"CC_PL_ACCOUNT",
						"GL_COST_CENTRE",
						"CC_QUANTITY",
						"CC_QUANTITY_UNIT",
						"CC_BILREL",
						"CC_CATEGORY",
						"CC_MAIN_COND_TYPE",
						"POB_TYPE",
						"VALUE_RELEVANT",
						"CC_CHARGE_TYPE",
						"ZZ_KOSTL",
						"CC_XNEGATIVE_ITEM",
						"ERROR_CODE",
						"ERROR_STATUS",
						"CR_DR_IND",
						"CC_INCEPTION_DATE",
						 to_decimal(to_char("JOURN_DT",'YYYYMMDD')||substr(to_char(current_timestamp,'YYYYMMDDHHMISS'),9,6),15,0) "JRNL_DT"
					FROM "_SYS_BIC"."IFRS_R1.MOBILITY.RAI_MOBILITY/CA_MOBL_INVC_ORDR_SIBLING_CHECK"
					(PLACEHOLDER."$$IP_BILL_DATE$$" => :IP_DATE);

MOBL_INVC_RAI_ITEM_TEMP =
					SELECT
						"CC_LC_SSP",
						"CC_LC_TP",
						"CC_IS_SIBLING_ERROR",
						"ORIGDOC_COMP",
						"ORIGDOC_LOGSYS",
						"ORIGDOC_TYPE",
						"WAERS",
						"CC_RAI_ITEM_ID",
						"CC_SRCDOC_ID",
						"CC_CATEGORY",
						"CC_MAIN_COND_TYPE",
						"ITEM_ID",
						"BAN",
						"ENT_SEQ_NO",
						"JOURN_DT",
						"ITEM_SUB_ID",
						"SUBSCR_NO",
						"EFF_DT",
						"BATCH_ID",
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"BUKRS",
						"TIME_IND",
						"CONTR_END_DT",
						"TERM_M2M",
						"KUNNR_SID",
						"PRD_CVRG_END_DT",
						"PRD_CVRG_STRT_DT",
						"CC_FINAL_INVOICE",
						"ZZ_BKTXT",
						"ZZ_BLDAT",
						"ZZ_BUDAT",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"ZZ_LEGACY",
						"ZZ_ICHKONT",
						"ZZ_MWSKZ",
						"ZZ_TXJCD",
						"GL_COST_CENTRE",
						"ZZ_KOSTL", 
						"ITEM_STRT_DT",
						"POB_END_DT",
						"ZZ_SGTXT",
						"BASE_OPT_SERV_IND",
						"CC_TEMP_SRCDOC_ID",
						"CC_QUANTITY",
						"CC_QUANTITY_UNIT",
						"CC_QUANTITY_REL",
						"CC_EXCHANGE_RATE",
						"RAI_ITEM_ID",
						"CC_LOB",
						"CC_REF_ID",
						"BILL_SEQ_NO",
						"CC_PL_ACCOUNT",
						"CC_ORGDOC_ID",
						"CC_HWAER",
						"ZZ_BUKRS",
						"SRCDOC_ID_INVC_ORDR",
						"ZZ_VBUND",
						"ZZ_BRANDACT",
						"ZZ_BILLER",
						"ZZ_BU_VIEW",
						"ZZ_CONVERSION",
						"ZZ_AUFNR",
						"CC_SSP",
						"CC_TP",
						"ERROR_CODE",
						"ERROR_STATUS",
						"CC_INVOICE_TYPE",
						"TRANS_TY",
						"CR_DR_IND",
						"BILL_PRIMARY_KEY", -- RAID 534
						"CC_ZZ_OVERRIDE", --CR 263
						to_decimal(to_char("JOURN_DT",'YYYYMMDD')||substr(to_char(current_timestamp,'YYYYMMDDHHMISS'),9,6),15,0) "JRNL_DT" 
					FROM "_SYS_BIC"."IFRS_R1.MOBILITY.RAI_MOBILITY/CA_MOBL_INVC_SIBLING_CHECK"
					(PLACEHOLDER."$$IP_BILL_DATE$$" => :IP_DATE);

     --------------------------------------------------------------------------------------------------
--      FILTER BANs as per CR 283
--------------------------------------------------------------------------------------------------	                
	IF IP_BAN IS NULL THEN
	 	IP_BAN_LIST := '1=1';
	ELSE
	 IP_BAN_LIST := 'BAN IN('||:IP_BAN||')';
	END IF;
	
	MOBL_INVC_ORDR_RAI_ITEM = APPLY_FILTER (:MOBL_INVC_ORDR_RAI_ITEM_TEMP,:IP_BAN_LIST);	     
	MOBL_INVC_RAI_ITEM = APPLY_FILTER (:MOBL_INVC_RAI_ITEM_TEMP,:IP_BAN_LIST);	          
		
BEGIN
	-------------------------------------------------------------------------------------------------
	-- Cursors Declaration for Invoice Order
	--------------------------------------------------------------------------------------------------
	
	DECLARE CURSOR C_RAI_INVC_ORDR FOR SELECT * FROM :MOBL_INVC_ORDR_RAI_ITEM;
		  
	--------------------------------------------------------------------------------------------------
	-- Cursors Declaration for Invoice
	--------------------------------------------------------------------------------------------------

	DECLARE CURSOR C_RAI_INVC FOR SELECT * FROM :MOBL_INVC_RAI_ITEM;
		
	--------------------------------------------------------------------------------------------------
	-- Batch ID creation for RAI processing
	-------------------------------------------------------------------------------------------------- 	
	
	SELECT "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::RAI_BATCH_ID".NEXTVAL INTO LV_BATCH_ID 
	  FROM DUMMY;	
	
	--------------------------------------------------------------------------------------------------
	-- Cursors Loop
	-------------------------------------------------------------------------------------------------- 
	
	FOR CUR_ORDER AS C_RAI_INVC_ORDR DO
	
	--  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
	  --  Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION	
		
	  --    Do Nothing. Exception Handled to ensure SP does not get terminated			 			     
	      END;
	
	    --  Insert record into ORDER main error table
		   INSERT INTO  "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_ORDR_EH"(
						"SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"CONDITION_TYPE_SSP",
						"CONDITION_TYPE_TP",
						"PL_ACCOUNT",	
						"BETRW_SSP",	
						"BETRW_TP",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ZZ_CONVERSION",
						"VALUE_RELEVANT",
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS") 
				VALUES (CUR_ORDER."SRCDOC_COMP",
						CUR_ORDER."SRCDOC_LOGSYS",
						CUR_ORDER."SRCDOC_TYPE",
						CUR_ORDER."CC_SRCDOC_ID",
						CUR_ORDER."JRNL_DT",
						CUR_ORDER."BAN",
						CUR_ORDER."CC_RAI_ITEM_ID",
						CUR_ORDER."REFERENCE_TYPE",
						CUR_ORDER."CC_REF_ID",
						CUR_ORDER."KUNNR_SID",
						CUR_ORDER."BUKRS",
						CUR_ORDER."WAERS",
						CUR_ORDER."CC_QUANTITY",
						CUR_ORDER."CC_QUANTITY_UNIT",
						CUR_ORDER."CC_BILREL",
						CUR_ORDER."PRD_CVRG_STRT_DT",
						CUR_ORDER."PRD_CVRG_END_DT",
						CUR_ORDER."CC_XNEGATIVE_ITEM",
						CUR_ORDER."RECEIV_ACCOUNT",
						CUR_ORDER."CC_INCEPTION_DATE",
						CUR_ORDER."ZZ_ALLOCATE",
						CUR_ORDER."ZZ_AUFNR",
						LV_BATCH_ID,
						CUR_ORDER."ZZ_BILLER",
						CUR_ORDER."ZZ_BKTXT",
						CUR_ORDER."ZZ_BRANDACT",
						CUR_ORDER."ZZ_BUKRS",
						CUR_ORDER."ZZ_BU_VIEW",
						CUR_ORDER."ZZ_CATRANSFER",
						CUR_ORDER."ZZ_KOSTL",
						CUR_ORDER."ZZ_LEGACY",
						CUR_ORDER."CC_CHARGE_TYPE",
						CUR_ORDER."POB_TYPE",						
						CUR_ORDER."ZZ_MOD_TYPE",
						CUR_ORDER."ZZ_MWSKZ",
						CUR_ORDER."ZZ_PAOBJNR",
						CUR_ORDER."ZZ_PRE_POST",
						CUR_ORDER."ZZ_SGTXT",
						CUR_ORDER."ZZ_TXJCD",
						CUR_ORDER."ZZ_UPPFLAG",
						CUR_ORDER."ZZ_VBUND",
						CUR_ORDER."ZZ_XBLNR",
						CUR_ORDER."ZZ_ZUONR",
						CUR_ORDER."CC_LC_SSP",
						CUR_ORDER."CC_LC_TP",
						CUR_ORDER."CC_PL_ACCOUNT",
						CUR_ORDER."AMT",
						CUR_ORDER."AMT",
						CUR_ORDER."CC_CATEGORY",
						CUR_ORDER."CC_MAIN_COND_TYPE",
						CUR_ORDER."ZZ_CONVERSION",
						CUR_ORDER."VALUE_RELEVANT",
						::SQL_ERROR_CODE,
						::SQL_ERROR_MESSAGE,
						LV_CUR_UTC);
		 
		    LV_ERROR_FLAG := 'Y';
	
	    END;
	
	--Increment the commit count at every loop
	    LV_COMMIT_COUNT = :LV_COMMIT_COUNT + 1;
	--  When the commit count is at or over 10000, commit the records and reset the count
	    IF LV_COMMIT_COUNT >= 10000 THEN
	    	COMMIT;
	    	LV_COMMIT_COUNT = 0;
	    END IF;
	
	--  Check the Error Status of the Record. 
	--  If Record is with Error or the sibling is with Error, then send to Error Table
		IF CUR_ORDER.CC_SIBLING_ERROR = '1' OR CUR_ORDER.ERROR_STATUS = '1' THEN
		
	    --  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
			CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_ORDER."ERROR_CODE", 
																		   ERROR_TAB, 
				                                                           RECORD_COUNT);	
	   
	    -- 	Loop through the Error Records
			FOR i IN 1 .. :RECORD_COUNT DO
				
	        --  Fetch the Error Code
				CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
				
	        --  All erroneous records are inserted into Order Main EH table 
				INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_ORDR_EH"(
							"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"CONDITION_TYPE_SSP",
							"CONDITION_TYPE_TP",
							"PL_ACCOUNT",	
							"BETRW_SSP",	
							"BETRW_TP",
						    "CATEGORY",
						    "MAIN_COND_TYPE",
							"VALUE_RELEVANT",
							"ZZ_CONVERSION",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")
					VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							CUR_ORDER."JRNL_DT",
							CUR_ORDER."BAN",
							CUR_ORDER."CC_RAI_ITEM_ID",
							CUR_ORDER."REFERENCE_TYPE",
							CUR_ORDER."CC_REF_ID",
							CUR_ORDER."KUNNR_SID",
							CUR_ORDER."BUKRS",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_QUANTITY",
							CUR_ORDER."CC_QUANTITY_UNIT",
							CUR_ORDER."CC_BILREL",
							CUR_ORDER."PRD_CVRG_STRT_DT",
							CUR_ORDER."PRD_CVRG_END_DT",
							CUR_ORDER."CC_XNEGATIVE_ITEM",
							CUR_ORDER."RECEIV_ACCOUNT",
							CUR_ORDER."CC_INCEPTION_DATE",
							CUR_ORDER."ZZ_ALLOCATE",
							CUR_ORDER."ZZ_AUFNR",
							LV_BATCH_ID,
							CUR_ORDER."ZZ_BILLER",
							CUR_ORDER."ZZ_BKTXT",
							CUR_ORDER."ZZ_BRANDACT",
							CUR_ORDER."ZZ_BUKRS",
							CUR_ORDER."ZZ_BU_VIEW",
							CUR_ORDER."ZZ_CATRANSFER",
							CUR_ORDER."ZZ_KOSTL",
							CUR_ORDER."ZZ_LEGACY",
							CUR_ORDER."CC_CHARGE_TYPE",
							CUR_ORDER."POB_TYPE",
							CUR_ORDER."ZZ_MOD_TYPE",
							CUR_ORDER."ZZ_MWSKZ",
							CUR_ORDER."ZZ_PAOBJNR",
							CUR_ORDER."ZZ_PRE_POST",
							CUR_ORDER."ZZ_SGTXT",
							CUR_ORDER."ZZ_TXJCD",
							CUR_ORDER."ZZ_UPPFLAG",
							CUR_ORDER."ZZ_VBUND",
							CUR_ORDER."ZZ_XBLNR",
							CUR_ORDER."ZZ_ZUONR",
							CUR_ORDER."CC_LC_SSP",
							CUR_ORDER."CC_LC_TP",
							CUR_ORDER."CC_PL_ACCOUNT",
							CUR_ORDER."AMT",
							CUR_ORDER."AMT",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							CUR_ORDER."VALUE_RELEVANT",
							CUR_ORDER."ZZ_CONVERSION",
							:CURRENT_ERROR,
							LV_CUR_UTC);

		
	        --  Set Error Flag				        
		        LV_ERROR_FLAG := 'Y';
					
			END FOR;		
			
	--  Processing for Successful Records
	    ELSEIF CUR_ORDER.CC_SIBLING_ERROR = '0' AND CUR_ORDER.ERROR_STATUS = '0' THEN
	    
			BEGIN AUTONOMOUS TRANSACTION
	        --  All valid records are inserted into Order Main Temp table 
			  INSERT INTO   "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_MAIN_TT"(
						    "SRCDOC_COMP",		
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT",
							"ZZ_CONVERSION"
							)
					VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							CUR_ORDER."JRNL_DT",
							CUR_ORDER."BAN",
							CUR_ORDER."CC_RAI_ITEM_ID",
							CUR_ORDER."REFERENCE_TYPE",
							CUR_ORDER."CC_REF_ID",
							CUR_ORDER."KUNNR_SID",
							CUR_ORDER."BUKRS",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_QUANTITY",
							CUR_ORDER."CC_QUANTITY_UNIT",
							CUR_ORDER."CC_BILREL",
							CUR_ORDER."PRD_CVRG_STRT_DT",
							CUR_ORDER."PRD_CVRG_END_DT",
							CUR_ORDER."CC_XNEGATIVE_ITEM",
							CUR_ORDER."RECEIV_ACCOUNT",
							CUR_ORDER."CC_INCEPTION_DATE",
							CUR_ORDER."ZZ_ALLOCATE",
							CUR_ORDER."ZZ_AUFNR",
							LV_BATCH_ID,
							CUR_ORDER."ZZ_BILLER",
							CUR_ORDER."ZZ_BKTXT",
							CUR_ORDER."ZZ_BRANDACT",
							CUR_ORDER."ZZ_BUKRS",
							CUR_ORDER."ZZ_BU_VIEW",
							CUR_ORDER."ZZ_CATRANSFER",
							CUR_ORDER."ZZ_KOSTL",
							CUR_ORDER."ZZ_LEGACY",
							CUR_ORDER."CC_CHARGE_TYPE",
							CUR_ORDER."POB_TYPE",
							CUR_ORDER."ZZ_MOD_TYPE",
							CUR_ORDER."ZZ_MWSKZ",
							CUR_ORDER."ZZ_PAOBJNR",
							CUR_ORDER."ZZ_PRE_POST",
							CUR_ORDER."ZZ_SGTXT",
							CUR_ORDER."ZZ_TXJCD",
							CUR_ORDER."ZZ_UPPFLAG",
							CUR_ORDER."ZZ_VBUND",
							CUR_ORDER."ZZ_XBLNR",
							CUR_ORDER."ZZ_ZUONR",
							CUR_ORDER."VALUE_RELEVANT",
							CUR_ORDER."ZZ_CONVERSION"
							);
					 
	        --  All valid records are inserted ORDER Condition table for SSP(Standalone Selling Price)           
				INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_COND_TT"(
						  	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							CUR_ORDER."JRNL_DT",
							CUR_ORDER."CC_LC_SSP",
							CUR_ORDER."CC_PL_ACCOUNT",
							CUR_ORDER."AMT",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							LV_BATCH_ID);		
					 
	        --  All valid records are inserted ORDER Condition table for TP(Transaction Price)
		        INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_COND_TT"(
					      	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
					VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							CUR_ORDER."JRNL_DT",
							CUR_ORDER."CC_LC_TP",
							CUR_ORDER."CC_PL_ACCOUNT",
							CUR_ORDER."AMT",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							LV_BATCH_ID);
							
	        END;
	        
		END IF;
		
	END FOR;
	
		-- Commit the remaining EH records
	COMMIT;
	
		/*** PHASE 2 Processing, moving from TT into the final Order tables ***/ 
	
	-- Get the Order Main records with the sibling error information
	MOBL_INVC_ORDER_MAIN_EH = SELECT TT."SRCDOC_COMP",			
								TT."SRCDOC_LOGSYS",
								TT."SRCDOC_TYPE",
								TT."SRCDOC_ID",
								TT."TIMESTAMP_UTC",
								TT."HEADER_ID",
								TT."ITEM_ID",
								TT."REFERENCE_TYPE",
								TT."REFERENCE_ID",
								TT."KUNNR",
								TT."BUKRS",
								TT."WAERS",
								TT."QUANTITY",
								TT."QUANTITY_UNIT",
								TT."BILREL",
								TT."START_DATE",
								TT."END_DATE",
								TT."XNEGATIVE_ITEM",
								TT."RECEIV_ACCOUNT",
								TT."INCEPTION_DATE",
								TT."ZZ_ALLOCATE",
								TT."ZZ_AUFNR",
								TT."ZZ_BATCH_ID",
								TT."ZZ_BILLER",
								TT."ZZ_BKTXT",
								TT."ZZ_BRANDACT",
								TT."ZZ_BUKRS",
								TT."ZZ_BU_VIEW",
								TT."ZZ_CATRANSFER",
								TT."ZZ_KOSTL",
								TT."ZZ_LEGACY",
								TT."ZZ_MATNR",
								TT."ZZ_MATNR_GRP",
								TT."ZZ_MOD_TYPE",
								TT."ZZ_MWSKZ",
								TT."ZZ_PAOBJNR",
								TT."ZZ_PRE_POST",
								TT."ZZ_SGTXT",
								TT."ZZ_TXJCD",
								TT."ZZ_UPFFLG",
								TT."ZZ_VBUND",
								TT."ZZ_XBLNR",
								TT."ZZ_ZUONR",
								TT."VALUE_RELEVANT",
								TT."ZZ_CONVERSION",
								EH."REFERENCE_ID" AS "REFERENCE_ID_EH"
							FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_MAIN_TT" TT
							LEFT JOIN (SELECT "REFERENCE_ID" FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_ORDR_EH" WHERE ZZ_BATCH_ID = LV_BATCH_ID GROUP BY "REFERENCE_ID") EH ON TT."REFERENCE_ID" = EH."REFERENCE_ID"
							WHERE TT.ZZ_BATCH_ID = LV_BATCH_ID;
	
			
			--  All valid records are inserted into Order Main table 
				INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_MAIN"(
							"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT",
							"RAI_TS",
							"ZZ_CONVERSION")
				(SELECT 	"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT",
							:LV_CUR_UTC,
							"ZZ_CONVERSION"
					   FROM :MOBL_INVC_ORDER_MAIN_EH WHERE REFERENCE_ID_EH IS NULL);

			--  All valid records are inserted ORDER Condition table for SSP(Standalone Selling Price) and TP(Transaction Price)         
				INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_COND"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE")
				     SELECT COND."SRCDOC_COMP",
							COND."SRCDOC_LOGSYS",
							COND."SRCDOC_TYPE",
							COND."SRCDOC_ID",
							COND."TIMESTAMP_UTC",
							COND."CONDITION_TYPE",
							COND."PL_ACCOUNT",			
							COND."BETRW",
							COND."WAERS",
							COND."CATEGORY",
							COND."MAIN_COND_TYPE"
                       FROM	(SELECT * 
                               FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_COND_TT"
                              WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					        (SELECT "SRCDOC_ID" 
					           FROM :MOBL_INVC_ORDER_MAIN_EH
					          WHERE "REFERENCE_ID_EH" IS NULL
		       			        AND "ZZ_BATCH_ID" = LV_BATCH_ID 
		                   GROUP BY "SRCDOC_ID" -- Should not be necessary but saw some test data where SRCDOC_ID was duplicated
		                            ) MAIN_EH
	                          WHERE COND."SRCDOC_ID" = MAIN_EH."SRCDOC_ID";
		    
			--  All records of the corresponding parent is inserted into Order Main error table 
				    
		    INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_ORDR_EH"(
						"SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"CONDITION_TYPE_SSP",
						"CONDITION_TYPE_TP",
					    "PL_ACCOUNT",	
						"BETRW_SSP",	
						"BETRW_TP",
						"CATEGORY",
					    "MAIN_COND_TYPE",
						"VALUE_RELEVANT",
						"ZZ_CONVERSION",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
				 SELECT EH."SRCDOC_COMP",			
						EH."SRCDOC_LOGSYS",
						EH."SRCDOC_TYPE",
						EH."SRCDOC_ID",
						EH."TIMESTAMP_UTC",
						EH."HEADER_ID",
						EH."ITEM_ID",
						EH."REFERENCE_TYPE",
						EH."REFERENCE_ID",
						EH."KUNNR",
						EH."BUKRS",
						EH."WAERS",
						EH."QUANTITY",
						EH."QUANTITY_UNIT",
						EH."BILREL",
						EH."START_DATE",
						EH."END_DATE",
						EH."XNEGATIVE_ITEM",
						EH."RECEIV_ACCOUNT",
						EH."INCEPTION_DATE",
						EH."ZZ_ALLOCATE",
						EH."ZZ_AUFNR",
						EH."ZZ_BATCH_ID",
						EH."ZZ_BILLER",
						EH."ZZ_BKTXT",
						EH."ZZ_BRANDACT",
						EH."ZZ_BUKRS",
						EH."ZZ_BU_VIEW",
						EH."ZZ_CATRANSFER",
						EH."ZZ_KOSTL",
						EH."ZZ_LEGACY",
						EH."ZZ_MATNR",
						EH."ZZ_MATNR_GRP",
						EH."ZZ_MOD_TYPE",
						EH."ZZ_MWSKZ",
						EH."ZZ_PAOBJNR",
						EH."ZZ_PRE_POST",
						EH."ZZ_SGTXT",
						EH."ZZ_TXJCD",
						EH."ZZ_UPFFLG",
						EH."ZZ_VBUND",
						EH."ZZ_XBLNR",
						EH."ZZ_ZUONR",
			          TEMP."CC_LC_SSP",	
			          TEMP."CC_LC_TP",
			          TEMP."CC_PL_ACCOUNT",
			          TEMP."AMT",
			          TEMP."AMT",
			          TEMP."CC_CATEGORY",
			          TEMP."CC_MAIN_COND_TYPE",
						EH."VALUE_RELEVANT",
						EH."ZZ_CONVERSION",
						:LC_SQL_ERROR,
						:LV_CUR_UTC
				   FROM :MOBL_INVC_ORDER_MAIN_EH  EH, 
			            :MOBL_INVC_ORDR_RAI_ITEM_TEMP TEMP
				WHERE 
					EH.REFERENCE_ID = TEMP.CC_REF_ID -- Checking for the contract
					AND (TEMP.ERROR_STATUS = '0' AND TEMP.CC_SIBLING_ERROR = '0' ) -- Only valid record from calc view
				    AND ( EH.SRCDOC_ID != TEMP.CC_SRCDOC_ID 
				    		AND EH.TIMESTAMP_UTC  != TEMP.JRNL_DT 
						) -- We avoid adding an error already present in EH table
				    AND EH.REFERENCE_ID_EH IS NOT NULL;

     -- Performance Testing - COMMIT to ensure things are persisted before update back	 
	 COMMIT;
	              				
--  Update Order Main Error Table

    UPDATE "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_ORDR_EH"A
   	  FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_ORDR_EH"A
	 INNER JOIN (SELECT REFERENCE_ID FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_MAIN" 
	      WHERE "ZZ_BATCH_ID" = LV_BATCH_ID) B
		     ON A.REFERENCE_ID=B.REFERENCE_ID
	   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1); 
			
	-------------------------------------------------------------------------------------------			
	--INVOICE CREATION			
	-------------------------------------------------------------------------------------------
		 
	--------------------------------------------------------------------------------------------------
	-- Local Temporary Tables Declaration
	-------------------------------------------------------------------------------------------------- 			 
	   
    CREATE LOCAL TEMPORARY TABLE #UPDATE_MOBL_INVC(
        BAN                    NVARCHAR(35),
        BILL_PRIMARY_KEY 	   NVARCHAR(100), -- RAID 534
	    SRCDOC_ID              NVARCHAR(35),
	    ORIGDOC_ID             NVARCHAR(35),
	    REFERENCE_ID           NVARCHAR(30),
	    RAI_ITEM_ID            NVARCHAR(15),
	    BATCH_ID               INTEGER);
		
	--------------------------------------------------------------------------------------------------
	-- Invoice Cursors Loop
	-------------------------------------------------------------------------------------------------- 
	LV_COMMIT_COUNT = 0;
	
	FOR CUR_INVC AS C_RAI_INVC DO
	
    --  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
	  --  Define Exit Handler
	      DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION	
	  --  Do Nothing. Exception Handled to ensure SP does not get terminated			 			     
	      END;
	      
		--  Insert record into MOBILITY INVC main error table
			INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_EH"(
					    "SRCDOC_COMP",
					    "SRCDOC_LOGSYS",
					    "SRCDOC_TYPE",
					    "SRCDOC_ID",
					    "TIMESTAMP_UTC",
					    "HEADER_ID",
					    "ITEM_ID",				
					    "BUKRS",
						"WAERS",
						"HWAER",
						"QUANTITY",
						"QUANTITY_UNIT",
						"QUANTITY_REL",
						"ORIGDOC_COMP",
						"ORIGDOC_LOGSYS",
						"ORIGDOC_TYPE",
						"ORIGDOC_ID",
						"DUE_DATE",
						"POSTING_DATE",
						"FINAL_INVOICE",
						"EXCHANGE_RATE",
						"BLDAT",
						"ZZ_BUKRS",
						"ZZ_BATCH_ID",
						"ZZ_BKTXT",
						"ZZ_BLDAT",
						"ZZ_BUDAT",
						"ZZ_ICHKONT",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MWSKZ",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"ZZ_OVERRIDE",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"BETRH",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"KUNNR",						
						"ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")						
				VALUES (CUR_INVC."SRCDOC_COMP",
						CUR_INVC."SRCDOC_LOGSYS",
						CUR_INVC."SRCDOC_TYPE",
						CUR_INVC."CC_SRCDOC_ID",					 
						CUR_INVC."JRNL_DT",
						CUR_INVC."BAN",
						CUR_INVC."CC_RAI_ITEM_ID",					 					 
						CUR_INVC."BUKRS", 
						CUR_INVC."WAERS",
						CUR_INVC."WAERS",
						CUR_INVC."CC_QUANTITY",
						CUR_INVC."CC_QUANTITY_UNIT",
						CUR_INVC."CC_QUANTITY_REL",
						CUR_INVC."ORIGDOC_COMP",
						CUR_INVC."ORIGDOC_LOGSYS",
						CUR_INVC."ORIGDOC_TYPE",					 					 
						CUR_INVC."CC_ORGDOC_ID",					 
						CUR_INVC."ZZ_BUDAT",
						CUR_INVC."ZZ_BUDAT",
						CUR_INVC."CC_FINAL_INVOICE",
						CUR_INVC."CC_EXCHANGE_RATE",	
						CUR_INVC."ZZ_BLDAT",
						CUR_INVC."ZZ_BUKRS",
						:LV_BATCH_ID,
						CUR_INVC."ZZ_BKTXT",  
						CUR_INVC."ZZ_BLDAT",
						CUR_INVC."ZZ_BUDAT", 
						CUR_INVC."ZZ_ICHKONT",
						CUR_INVC."ZZ_KOSTL",
						CUR_INVC."ZZ_LEGACY",  
						CUR_INVC."ZZ_MWSKZ", 
						CUR_INVC."ZZ_SGTXT",
						CUR_INVC."ZZ_TXJCD",
						CUR_INVC."ZZ_XBLNR",
						CUR_INVC."ZZ_ZUONR",
						CUR_INVC."CC_ZZ_OVERRIDE",
						CUR_INVC."CC_LC_TP", 
						CUR_INVC."CC_PL_ACCOUNT",
						CUR_INVC."CC_TP",
						CUR_INVC."CC_TP",
						CUR_INVC."CC_CATEGORY",
						CUR_INVC."CC_MAIN_COND_TYPE",
						CUR_INVC."KUNNR_SID",
						
					    ::SQL_ERROR_CODE,
			            ::SQL_ERROR_MESSAGE,
			            :LV_CUR_UTC);				
	             
		    LV_ERROR_FLAG := 'Y';

	    END;
	  
	  	--  Increment the commit count at every loop
	    LV_COMMIT_COUNT = :LV_COMMIT_COUNT + 1;
	--  When the commit count is at or over 10000, commit the records and reset the count
	    IF LV_COMMIT_COUNT >= 10000 THEN
	    	COMMIT;
	    	LV_COMMIT_COUNT = 0;
	    END IF;
	    
    --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
		IF CUR_INVC.CC_IS_SIBLING_ERROR = '1' OR CUR_INVC.ERROR_STATUS = '1' THEN
		
        --  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
			CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"( CUR_INVC."ERROR_CODE",
																		    ERROR_TAB, 
				                                                            RECORD_COUNT
				                                                          );	
        --  Loop through the Error Records
			FOR i IN 1 .. :RECORD_COUNT DO
				
            --  Fetch the Error Code
				CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
					  
           --	All erroneous records are inserted into MOBILITY Invc Main EH table 
			    INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_EH"(
					    "SRCDOC_COMP",
					    "SRCDOC_LOGSYS",
					    "SRCDOC_TYPE",
					    "SRCDOC_ID",
					    "TIMESTAMP_UTC",
					    "HEADER_ID",
					    "ITEM_ID",				
					    "BUKRS",
						"WAERS",
						"HWAER",
						"QUANTITY",
						"QUANTITY_UNIT",
						"QUANTITY_REL",
						"ORIGDOC_COMP",
						"ORIGDOC_LOGSYS",
						"ORIGDOC_TYPE",
						"ORIGDOC_ID",
						"DUE_DATE",
						"POSTING_DATE",
						"FINAL_INVOICE",
						"EXCHANGE_RATE",
						"BLDAT",
						"ZZ_BUKRS",
						"ZZ_BATCH_ID",
						"ZZ_BKTXT",
						"ZZ_BLDAT",
						"ZZ_BUDAT",
						"ZZ_ICHKONT",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MWSKZ",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"ZZ_OVERRIDE",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"BETRH",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"KUNNR",					
				        "ERROR_CODE",		    
				        "ERROR_CREATE_TS")
			    VALUES (CUR_INVC."SRCDOC_COMP",
						CUR_INVC."SRCDOC_LOGSYS",
						CUR_INVC."SRCDOC_TYPE",
						CUR_INVC."CC_SRCDOC_ID",					 
						CUR_INVC."JRNL_DT",
						CUR_INVC."BAN",
						CUR_INVC."CC_RAI_ITEM_ID",					 					 
						CUR_INVC."BUKRS", 
						CUR_INVC."WAERS",
						CUR_INVC."WAERS",
						CUR_INVC."CC_QUANTITY",
						CUR_INVC."CC_QUANTITY_UNIT",
						CUR_INVC."CC_QUANTITY_REL",
						CUR_INVC."ORIGDOC_COMP",
						CUR_INVC."ORIGDOC_LOGSYS",
						CUR_INVC."ORIGDOC_TYPE",					 					 
						CUR_INVC."CC_ORGDOC_ID",					 
						CUR_INVC."ZZ_BUDAT",
						CUR_INVC."ZZ_BUDAT",
						CUR_INVC."CC_FINAL_INVOICE",
						CUR_INVC."CC_EXCHANGE_RATE",	
						CUR_INVC."ZZ_BLDAT",
						CUR_INVC."ZZ_BUKRS",
						:LV_BATCH_ID,
						CUR_INVC."ZZ_BKTXT",  
						CUR_INVC."ZZ_BLDAT",
						CUR_INVC."ZZ_BUDAT", 
						CUR_INVC."ZZ_ICHKONT",
						CUR_INVC."ZZ_KOSTL",
						CUR_INVC."ZZ_LEGACY",  
						CUR_INVC."ZZ_MWSKZ", 
						CUR_INVC."ZZ_SGTXT",
						CUR_INVC."ZZ_TXJCD",
						CUR_INVC."ZZ_XBLNR",
						CUR_INVC."ZZ_ZUONR",
						CUR_INVC."CC_ZZ_OVERRIDE",
						CUR_INVC."CC_LC_TP", 
						CUR_INVC."CC_PL_ACCOUNT",
						CUR_INVC."CC_TP",
						CUR_INVC."CC_TP",
						CUR_INVC."CC_CATEGORY",
						CUR_INVC."CC_MAIN_COND_TYPE",
						CUR_INVC."KUNNR_SID",
						:CURRENT_ERROR,
				 		LV_CUR_UTC);
			
			-- 	Set Error Flag				        
				LV_ERROR_FLAG := 'Y';
				
			END FOR;
    --  Processing for Successful Records
	    ELSEIF CUR_INVC.CC_IS_SIBLING_ERROR = '0' AND CUR_INVC.ERROR_STATUS = '0' THEN
	   
	   	    BEGIN AUTONOMOUS TRANSACTION
	   	       
            --  All valid records are inserted into Invoice Main Temp table
			  INSERT INTO   "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_MAIN_TT"(
						    "SRCDOC_COMP",
						    "SRCDOC_LOGSYS",
						    "SRCDOC_TYPE",
						    "SRCDOC_ID",
						    "TIMESTAMP_UTC",
						    "HEADER_ID",
						    "ITEM_ID",				
						    "BUKRS",
							"WAERS",
							"HWAER",
							"QUANTITY",
							"QUANTITY_UNIT",
							"QUANTITY_REL",
							"ORIGDOC_COMP",
							"ORIGDOC_LOGSYS",
							"ORIGDOC_TYPE",
							"ORIGDOC_ID",
							"DUE_DATE",
							"POSTING_DATE",
							"FINAL_INVOICE",
							"EXCHANGE_RATE",
							"BLDAT",
							"ZZ_BUKRS",
							"ZZ_BATCH_ID",
							"ZZ_BKTXT",
							"ZZ_BLDAT",
							"ZZ_BUDAT",
							"ZZ_ICHKONT",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MWSKZ",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"ZZ_OVERRIDE",
							"INVOICE_TYPE",
							"KUNNR"
							)							
				VALUES (CUR_INVC."SRCDOC_COMP",
						CUR_INVC."SRCDOC_LOGSYS",
						CUR_INVC."SRCDOC_TYPE",
						CUR_INVC."CC_SRCDOC_ID",					 
						CUR_INVC."JRNL_DT",
						CUR_INVC."BAN",
						CUR_INVC."CC_RAI_ITEM_ID",					 					 
						CUR_INVC."BUKRS", 
						CUR_INVC."WAERS",
						CUR_INVC."WAERS",
						CUR_INVC."CC_QUANTITY",
						CUR_INVC."CC_QUANTITY_UNIT",
						CUR_INVC."CC_QUANTITY_REL",
						CUR_INVC."ORIGDOC_COMP",
						CUR_INVC."ORIGDOC_LOGSYS",
						CUR_INVC."ORIGDOC_TYPE",					 					 
						CUR_INVC."CC_ORGDOC_ID",					 
						CUR_INVC."ZZ_BUDAT",
						CUR_INVC."ZZ_BUDAT",
						CUR_INVC."CC_FINAL_INVOICE",
						CUR_INVC."CC_EXCHANGE_RATE",	
						CUR_INVC."ZZ_BLDAT",
						CUR_INVC."ZZ_BUKRS",
						:LV_BATCH_ID,
						CUR_INVC."ZZ_BKTXT",  
						CUR_INVC."ZZ_BLDAT",
						CUR_INVC."ZZ_BUDAT", 
						CUR_INVC."ZZ_ICHKONT",
						CUR_INVC."ZZ_KOSTL",
						CUR_INVC."ZZ_LEGACY",  
						CUR_INVC."ZZ_MWSKZ", 
						CUR_INVC."ZZ_SGTXT",
						CUR_INVC."ZZ_TXJCD",
						CUR_INVC."ZZ_XBLNR",
						CUR_INVC."ZZ_ZUONR",
						CUR_INVC."CC_ZZ_OVERRIDE",
						CUR_INVC."CC_INVOICE_TYPE",
						CUR_INVC."KUNNR_SID"
							);					
	
          --  All valid records are inserted into Invoice Main Temp table for TP(Transaction Price)
	 		  INSERT INTO   "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_COND_TT"(
				 		    "SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
						 	"BETRW",
						 	"BETRH",
							"WAERS",
							"HWAER",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
					VALUES (CUR_INVC."SRCDOC_COMP",
							CUR_INVC."SRCDOC_LOGSYS",
							CUR_INVC."SRCDOC_TYPE",
							CUR_INVC."CC_SRCDOC_ID",					 
							CUR_INVC."JRNL_DT",
							CUR_INVC."CC_LC_TP", 
							CUR_INVC."CC_PL_ACCOUNT",
							CUR_INVC."CC_TP",
							CUR_INVC."CC_TP",  
							CUR_INVC."WAERS",
							CUR_INVC."WAERS",
							CUR_INVC."CC_CATEGORY",
							CUR_INVC."CC_MAIN_COND_TYPE",
							LV_BATCH_ID);
	        END;        					 			 												          												 		   		        		   	   
	    END IF;  
	END FOR;

-- Commit the remaining EH records
	COMMIT;
	
	/*** PHASE 2 Processing, moving from TT into the final Invoice tables ***/ 
	
	-- Get the Order Main records with the sibling error information
	MOBL_INVC_MAIN_EH = SELECT  TT."SRCDOC_COMP",			
								TT."SRCDOC_LOGSYS",
								TT."SRCDOC_TYPE",
								TT."SRCDOC_ID",
								TT."TIMESTAMP_UTC",
								TT."HEADER_ID",
								TT."ITEM_ID",
								TT."BUKRS",
								TT."WAERS",
								TT."HWAER",
								TT."QUANTITY",
								TT."QUANTITY_UNIT",
								TT."QUANTITY_REL",
								TT."ORIGDOC_COMP",
								TT."ORIGDOC_LOGSYS",
								TT."ORIGDOC_TYPE",
								TT."ORIGDOC_ID",
								TT."DUE_DATE",
								TT."POSTING_DATE",
								TT."FINAL_INVOICE",
								TT."EXCHANGE_RATE",
								TT."BLDAT",
								TT."ZZ_BUKRS",
								TT."ZZ_BATCH_ID",
								TT."ZZ_BKTXT",
								TT."ZZ_BLDAT",
								TT."ZZ_BUDAT",
								TT."ZZ_ICHKONT",
								TT."ZZ_KOSTL",								
								TT."ZZ_LEGACY",								
								TT."ZZ_MWSKZ",								
								TT."ZZ_SGTXT",
								TT."ZZ_TXJCD",
								TT."ZZ_XBLNR",
								TT."ZZ_ZUONR",
								TT."INVOICE_TYPE",
								TT."ZZ_OVERRIDE",
								TT."KUNNR",							
								EH."HEADER_ID" AS "HEADER_ID_EH"
							FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_MAIN_TT" TT
							LEFT JOIN (SELECT "HEADER_ID" FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_EH" WHERE ZZ_BATCH_ID = LV_BATCH_ID GROUP BY "HEADER_ID") EH ON TT."HEADER_ID" = EH."HEADER_ID"
							WHERE TT.ZZ_BATCH_ID = LV_BATCH_ID;
	
	/** Insert valid records to final table**/						
	-- Insert order records w/o sibling errors	

            --  All valid records are inserted into Invoice Main table
			  INSERT INTO   "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_MAIN"(
						    "SRCDOC_COMP",
						    "SRCDOC_LOGSYS",
						    "SRCDOC_TYPE",
						    "SRCDOC_ID",
						    "TIMESTAMP_UTC",
						    "HEADER_ID",
						    "ITEM_ID",				
						    "BUKRS",
							"WAERS",
							"HWAER",
							"QUANTITY",
							"QUANTITY_UNIT",
							"QUANTITY_REL",
							"ORIGDOC_COMP",
							"ORIGDOC_LOGSYS",
							"ORIGDOC_TYPE",
							"ORIGDOC_ID",
							"DUE_DATE", 
							"POSTING_DATE",
							"FINAL_INVOICE",
							"EXCHANGE_RATE",
							"BLDAT",
							"ZZ_BUKRS",
							"ZZ_BATCH_ID",
							"ZZ_BKTXT",
							"ZZ_BLDAT",
							"ZZ_BUDAT",
							"ZZ_ICHKONT",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MWSKZ",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"ZZ_OVERRIDE",
							"INVOICE_TYPE",
							"KUNNR",
							"RAI_TS")    
                     SELECT "SRCDOC_COMP",
						    "SRCDOC_LOGSYS",
						    "SRCDOC_TYPE",
						    "SRCDOC_ID",
						    "TIMESTAMP_UTC",
						    "HEADER_ID",
						    "ITEM_ID",				
						    "BUKRS",
						    "WAERS",
						    "HWAER",
						    "QUANTITY",
						    "QUANTITY_UNIT",
						    "QUANTITY_REL",
						    "ORIGDOC_COMP",
						    "ORIGDOC_LOGSYS",
						    "ORIGDOC_TYPE",
						    "ORIGDOC_ID",
						    "DUE_DATE",
						    "POSTING_DATE",
						    "FINAL_INVOICE",
						    "EXCHANGE_RATE",
						    "BLDAT",
						    "ZZ_BUKRS",
						    "ZZ_BATCH_ID",
						    "ZZ_BKTXT",
						    "ZZ_BLDAT",
						    "ZZ_BUDAT",
						    "ZZ_ICHKONT",
						    "ZZ_KOSTL",
						    "ZZ_LEGACY",
						    "ZZ_MWSKZ",
						    "ZZ_SGTXT",
						    "ZZ_TXJCD",
						    "ZZ_XBLNR",
						    "ZZ_ZUONR",
						    "ZZ_OVERRIDE",
						    "INVOICE_TYPE",
						    "KUNNR",
						    :LV_CUR_UTC
					   FROM :MOBL_INVC_MAIN_EH WHERE HEADER_ID_EH IS NULL;

            --  All valid records are inserted into Invoice Cond table 
            --  for TP(Transaction Price)
	 		  INSERT INTO   "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_COND"(
				 		    "SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
						 	"BETRW",
						 	"BETRH",
							"WAERS",
							"HWAER",
							"CATEGORY",
							"MAIN_COND_TYPE")					  
					 SELECT COND."SRCDOC_COMP",
							COND."SRCDOC_LOGSYS",
							COND."SRCDOC_TYPE",
							COND."SRCDOC_ID",
							COND."TIMESTAMP_UTC",
							COND."CONDITION_TYPE",
							COND."PL_ACCOUNT",
						 	COND."BETRW",
						 	COND."BETRW",
							COND."WAERS",
							COND."HWAER",
							COND."CATEGORY",
							COND."MAIN_COND_TYPE"
					   FROM (SELECT * 
						           FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_COND_TT"
						          WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					        (SELECT "SRCDOC_ID" 
		                       FROM :MOBL_INVC_MAIN_EH
		                      WHERE "HEADER_ID_EH" IS NULL
		                        AND "ZZ_BATCH_ID" = LV_BATCH_ID 
		                   GROUP BY "SRCDOC_ID" -- Should not be necessary but saw some test data where SRCDOC_ID was duplicated
		                             ) MAIN_EH
	 	                      WHERE COND."SRCDOC_ID" = MAIN_EH."SRCDOC_ID";
		  						
		--  All records of the corresponding parent is inserted into INVC Main error table 
            INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_EH"(
					    "SRCDOC_COMP",
					    "SRCDOC_LOGSYS",
					    "SRCDOC_TYPE",
					    "SRCDOC_ID",
					    "TIMESTAMP_UTC",
					    "HEADER_ID",
					    "ITEM_ID",				
					    "BUKRS",
						"WAERS",
						"HWAER",
						"QUANTITY",
						"QUANTITY_UNIT",
						"QUANTITY_REL",
						"ORIGDOC_COMP",
						"ORIGDOC_LOGSYS",
						"ORIGDOC_TYPE",
						"ORIGDOC_ID",
						"DUE_DATE",
						"POSTING_DATE",
						"FINAL_INVOICE",
						"EXCHANGE_RATE",
						"BLDAT",
						"ZZ_BUKRS",
						"ZZ_BATCH_ID",
						"ZZ_BKTXT",
						"ZZ_BLDAT",
						"ZZ_BUDAT",
						"ZZ_ICHKONT",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MWSKZ",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"ZZ_OVERRIDE",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"BETRH",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"KUNNR",						
						"ERROR_CODE",
					    "ERROR_CREATE_TS")
			     SELECT EH."SRCDOC_COMP",
					    EH."SRCDOC_LOGSYS",
					    EH."SRCDOC_TYPE",
					    EH."SRCDOC_ID",
					    EH."TIMESTAMP_UTC",
					    EH."HEADER_ID",
					    EH."ITEM_ID",				
					    EH."BUKRS",
					    EH."WAERS",
					    EH."HWAER",
					    EH."QUANTITY",
					    EH."QUANTITY_UNIT",
					    EH."QUANTITY_REL",
					    EH."ORIGDOC_COMP",
					    EH."ORIGDOC_LOGSYS",
					    EH."ORIGDOC_TYPE",
					    EH."ORIGDOC_ID",
					    EH."DUE_DATE",
					    EH."POSTING_DATE",
					    EH."FINAL_INVOICE",
					    EH."EXCHANGE_RATE",
					    EH."BLDAT",
					    EH."ZZ_BUKRS",
					    EH."ZZ_BATCH_ID",
					    EH."ZZ_BKTXT",
					    EH."ZZ_BLDAT",
					    EH."ZZ_BUDAT",
					    EH."ZZ_ICHKONT",
					    EH."ZZ_KOSTL",
					    EH."ZZ_LEGACY",
					    EH."ZZ_MWSKZ",
					    EH."ZZ_SGTXT",
					    EH."ZZ_TXJCD",
					    EH."ZZ_XBLNR",
					    EH."ZZ_ZUONR",
					    EH."ZZ_OVERRIDE",
					  TEMP."CC_LC_TP", 
					  TEMP."CC_PL_ACCOUNT",
					  TEMP."CC_TP",
					  TEMP."CC_TP",
					  TEMP."CC_CATEGORY",
					  TEMP."CC_MAIN_COND_TYPE",
					    EH."KUNNR",						
						LC_SQL_ERROR,
						LV_CUR_UTC
                   FROM :MOBL_INVC_MAIN_EH EH, 
			            :MOBL_INVC_RAI_ITEM_TEMP TEMP
		          WHERE 
				    	EH.HEADER_ID = TEMP.BAN -- Checking for the contract
				    	AND (TEMP.ERROR_STATUS = '0' AND TEMP.CC_IS_SIBLING_ERROR = '0' ) -- Only valid record from calc view
					    AND ( EH.SRCDOC_ID != TEMP.CC_SRCDOC_ID
					    		AND EH.TIMESTAMP_UTC  != TEMP.JRNL_DT 
				    		) -- We avoid adding an error already present in EH table
				        AND EH."HEADER_ID_EH" IS NOT NULL;                 
                  

--          Updating RAI_TS and other custom RAI fields in corresponding NDB Tables
	
	 		INSERT INTO #UPDATE_MOBL_INVC(
	 		            BAN,
	 		            BILL_PRIMARY_KEY, -- RAID 534
				   	    ORIGDOC_ID,
				   	    SRCDOC_ID,
				   	    REFERENCE_ID,
				   	    RAI_ITEM_ID,
				   	    BATCH_ID)	   			    
			     SELECT A."BAN", 
			            A."BILL_PRIMARY_KEY", -- RAID 534
			   		    A."CC_ORGDOC_ID",
			   		    A."CC_SRCDOC_ID",
			   		    A."CC_REF_ID",
			   		    A."CC_RAI_ITEM_ID",
			   		    B."ZZ_BATCH_ID"		   		        
		   		  FROM :MOBL_INVC_RAI_ITEM A, 
   		    	       (SELECT "HEADER_ID","ZZ_BATCH_ID" 
   		    	          FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_MAIN"
   		    	         WHERE "ZZ_BATCH_ID" = LV_BATCH_ID) B 
		          WHERE A."BAN" = B."HEADER_ID";
			   		        
	       	 
	--------------------------------------------------------------------------------------------------
	-- Update NDB Tables
	-------------------------------------------------------------------------------------------------- 
			
	--  Updating the Source document Id, Reference Id, Header Id, RAI Item ID,Batch id 
	--  and RAI Timestamp in NDB INVOICE table for M2M Contracts
	
	UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_BILL" A
	  FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_BILL" A
     INNER JOIN #UPDATE_MOBL_INVC B
	    ON  A.BILL_PRIMARY_KEY = B.BILL_PRIMARY_KEY -- RAID 534
	   SET "SOURCE_DOC_ID"     = B."SRCDOC_ID",
		   "ORIG_DOC_ID"       = B."ORIGDOC_ID",
		   "REFERENCE_ID"      = B."REFERENCE_ID",			
		   "HEADER_ID"         = B."BAN",			
		   "RAI_ITEM_ID"       = B."RAI_ITEM_ID",
		   "BATCH_ID"          = B.BATCH_ID,			
		   "RAI_TS"            = LV_CUR_UTC
	 WHERE A."RAI_TS" IS NULL;
									 
	--  Update INVOICE Main Error Table
	
	UPDATE "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_EH" A
	  FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_EH" A
	 INNER JOIN (SELECT HEADER_ID FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_INVC_MAIN" 
	 WHERE "ZZ_BATCH_ID" = LV_BATCH_ID) B
		    ON A.HEADER_ID=B.HEADER_ID
		   SET  (DELETE_DATE, DELETED) = (CURRENT_DATE, 1); 

	-------------------------------------------------------------------------------------------------
	--  Set Overall Status
	-------------------------------------------------------------------------------------------------- 
	 
	--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
	--  executed successfully
	    IF(LV_ERROR_FLAG = 'Y') THEN		
	
	     OP_STATUS := LC_ERROR_TEXT; 
				
	    ELSE
	
	  	 OP_STATUS := LC_SUCCESS_TEXT; 	
					
		END IF;
	END;
END; 