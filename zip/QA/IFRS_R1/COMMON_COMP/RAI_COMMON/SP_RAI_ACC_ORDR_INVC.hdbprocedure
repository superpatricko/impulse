PROCEDURE "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::SP_RAI_ACC_ORDR_INVC"
(IN IP_DATE DATE,
 IN IP_BAN NVARCHAR(1000),
 OUT OP_STATUS NVARCHAR(1000)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	AS
	 
BEGIN

----------------------------------------------------------------------------------------------------
-- Procedure Title : IFRS_R1.COMMON_COMP.RAI_COMMON::SP_RAI_ACC_ORDR_INVC
-- Created By      : BC_EY94118(Prakhar)    
-- Date            : 29/05/2017
-- Description     : This Procedure will create the RAI order Items and invoice items based on
--	                 P77 Accessories NDB order data and P77 Accessories NDB billing data
--	                 If the Batch ID is blank in the NDB billing, then it will create 
--	                 Invoice RAI item .
--	                 Billing item with adjustments, overages services will be added as seperate POBs in the contract 
--	                 which is created for the Base services and the equipments   
                      
--	                 This Procedure has one parameter:
--	                 1. The  OP_STATUS parametere : This parameter give the status of the Procedure whether it is 
--	                 success or failure

--	                 DM_INVC_MAIN_EH and DM_INVC_COND_EH Table : Will be used to trace the errors/exceptions

--	                 FREQUENCY OF PROCEDURE EXECUTION: Daily

-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
-- M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
-- 08/08/2017  | BC_EZ23103       | CR 283 - Update to process the records based on input parameter as IP_BAN 
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
-- Description Of the changes 
----------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number>
-- Description of Changes Made> : <Description of Changes>        
----------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LV_BATCH_ID           INTEGER;
DECLARE LV_COUNT_ORDR         INTEGER;
DECLARE LV_COUNT_INVC         INTEGER;
DECLARE LV_ERROR_FLAG 		  NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC            TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE LV_CUR_DATE           DATE := CURRENT_DATE;
DECLARE LV_CUR_UTC_TIME       DECIMAL(15,2) 
                              := TO_DECIMAL(TO_CHAR(CURRENT_UTCTIMESTAMP,'YYYYMMDDHHMISS'),15,2);
DECLARE LC_SQL_ERROR          NVARCHAR(40) DEFAULT 'SQL_EXCEPTION : SIBLING ERROR';
DECLARE LC_ERROR_TEXT 		  NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	  NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LC_SET		  	      NVARCHAR(1)  DEFAULT 'X';
DECLARE CURRENT_ERROR		  NVARCHAR(100);
DECLARE ERROR_TAB 			  TABLE (ERROR_CODE NVARCHAR(100));
DECLARE RECORD_COUNT		  INTEGER;
DECLARE i					  INTEGER;
DECLARE IP_BAN_LIST           NVARCHAR(1000);
	
--------------------------------------------------------------------------------------------------
-- Temporary tables/Variables/Nodes Declaration to hold data from the final CVs
-------------------------------------------------------------------------------------------------- 


	DM_INVC_ORDR_RAI_ITEM_TEMP =
		SELECT
			 "FINAL_TRANS_PRC",
			 "CURRN",
			 "COMPANY_CD",
			 "REVNU_GL",
			 "INCEPTION_DATE",
			 "KUNNR",
			 "SCENARIO_IDENTIFIER",
			 "HEADER_ID",
			 "ITEM_ID",
			 "SRCDOC_COMP",
			 "SRCDOC_LOGSYS",
			 "SRCDOC_TYPE",
			 "BUKRS",
			 "WAERS",
			 "ORIGDOC_COMP",
			 "ORIGDOC_LOGSYS",
			 "ORIGDOC_TYPE",
			 "REFERENCE_TYPE",
			 "SRC_DOC_ID",
			 "POB_TYPE",
			 "REFERENCE_ID",
			 "VALUE_RELEVANT",
			 "CHARGE_TYPE",
			 "SRCDOC_ID_INV",
			 "QUANTITY",
			 "QUANTITY_UNIT",
			 "CATEGORY",
			 "XNEGATIVE_ITEM",
			 "BILREL",
			 "SSP",
			 "TP",
			 "MAIN_COND_TYPE",
			 "ERROR_STATUS",
			 "ERROR_CODE",
			 "IS_SIBLING_ERROR" 
		FROM "_SYS_BIC"."IFRS_R1.COMMON_COMP.RAI_COMMON/CA_ACC_ORDR_INVC_SIBLING_CHECK"
			(PLACEHOLDER."$$IP_BILL_DATE$$" => :IP_DATE);
 
--------------------------------------------------------------------------------------------------
--      FILTER KUNNR_SID as per CR 283
--------------------------------------------------------------------------------------------------	                
IF IP_BAN IS NULL THEN
 	IP_BAN_LIST := '1=1';
ELSE
 IP_BAN_LIST := 'KUNNR IN('||:IP_BAN||')';
END IF;

DM_INVC_ORDR_RAI_ITEM = APPLY_FILTER (:DM_INVC_ORDR_RAI_ITEM_TEMP,:IP_BAN_LIST);	     

BEGIN
	-------------------------------------------------------------------------------------------------
	-- Cursors Declaration for Invoice Order and Invoice
	--------------------------------------------------------------------------------------------------
	
	DECLARE CURSOR C_RAI_INVC_ORDR FOR SELECT * FROM :DM_INVC_ORDR_RAI_ITEM;
		  
	DECLARE CURSOR C_RAI_INVC_ORDR_PARENT FOR 
	        SELECT "HEADER_ID" 
	        FROM :DM_INVC_ORDR_RAI_ITEM 
	        WHERE "IS_SIBLING_ERROR" = '0' 
	        AND "ERROR_STATUS" = '0'
	        GROUP BY "HEADER_ID";
	
	--------------------------------------------------------------------------------------------------
	-- Batch ID creation for RAI processing
	-------------------------------------------------------------------------------------------------- 	
	
	SELECT "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::RAI_BATCH_ID".NEXTVAL INTO LV_BATCH_ID 
    FROM DUMMY;	
	
	--------------------------------------------------------------------------------------------------
	-- Local Temporary Tables Declaration
	-------------------------------------------------------------------------------------------------- 			 
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_ORDR_MAIN_DM (SRCDOC_ID NVARCHAR(35));
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_ORDR_COND_DM (SRCDOC_ID NVARCHAR(35));
	
	--------------------------------------------------------------------------------------------------
	-- Cursors Loop
	-------------------------------------------------------------------------------------------------- 
	
	FOR CUR_ORDER AS C_RAI_INVC_ORDR DO
	
	--  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
	 --  Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION	
		
     --  Do Nothing. Exception Handled to ensure SP does not get terminated			 			     
	      END;
	
	   --  Insert record into ORDER main error table
		   INSERT INTO  "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"XNEGATIVE_ITEM",
						"ZZ_BATCH_ID",
						"ZZ_MATNR_GRP",
						"ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS") 
				VALUES (CUR_ORDER."ORIGDOC_COMP",
					 	CUR_ORDER."ORIGDOC_LOGSYS",
					 	CUR_ORDER."ORIGDOC_TYPE",
					 	CUR_ORDER."SRC_DOC_ID",
					 	LV_CUR_UTC_TIME,
					 	CUR_ORDER."HEADER_ID",
					 	CUR_ORDER."ITEM_ID",
					 	CUR_ORDER."REFERENCE_TYPE",
					 	CUR_ORDER."REFERENCE_ID",
					 	CUR_ORDER."KUNNR",
					 	CUR_ORDER."BUKRS",
					 	CUR_ORDER."WAERS",
					 	CUR_ORDER."QUANTITY",
					 	CUR_ORDER."QUANTITY_UNIT",
					 	CUR_ORDER."BILREL",
					 	CUR_ORDER."REVNU_GL",
					 	CUR_ORDER."INCEPTION_DATE",
					 	CUR_ORDER."XNEGATIVE_ITEM",          					
 					 	LV_BATCH_ID,
 					 	CUR_ORDER."POB_TYPE",
						::SQL_ERROR_CODE,
						::SQL_ERROR_MESSAGE,
						LV_CUR_UTC);
				 
		--  Insert record into ORDER Condition error table for SSP(Standalone Selling Price)           
			INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_EH"(
		   	            "SRCDOC_COMP",
                        "SRCDOC_LOGSYS",
				        "SRCDOC_TYPE",
				        "SRCDOC_ID",
				        "TIMESTAMP_UTC",
				        "CONDITION_TYPE",
				        "PL_ACCOUNT",				
				        "BETRW",
				        "WAERS",				
				        "CATEGORY",
				        "BATCH_ID",
				        "ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				 VALUES(CUR_ORDER."ORIGDOC_COMP",
				        CUR_ORDER."ORIGDOC_LOGSYS",
				        CUR_ORDER."ORIGDOC_TYPE",
				        CUR_ORDER."SRC_DOC_ID",
				        LV_CUR_UTC_TIME,
				        CUR_ORDER."SSP",
				        CUR_ORDER."REVNU_GL",
				        CUR_ORDER."FINAL_TRANS_PRC",	
				        CUR_ORDER."WAERS",
				        CUR_ORDER."CATEGORY",
				        LV_BATCH_ID,
				        ::SQL_ERROR_CODE,
						::SQL_ERROR_MESSAGE,
						LV_CUR_UTC);
		        			
		   		  		
			 
	    --  Insert record into ORDER Condition error table for TP(Transaction Price)
	        INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_EH"(
		   	            "SRCDOC_COMP",
                        "SRCDOC_LOGSYS",
				        "SRCDOC_TYPE",
				        "SRCDOC_ID",
				        "TIMESTAMP_UTC",
				        "CONDITION_TYPE",
				        "PL_ACCOUNT",				
				        "BETRW",
				        "WAERS",				
				        "CATEGORY",
				        "MAIN_COND_TYPE",
				        "BETRH",
				        "HWAER",
				        "BATCH_ID",
				        "ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				 VALUES(CUR_ORDER."ORIGDOC_COMP",
				        CUR_ORDER."ORIGDOC_LOGSYS",
				        CUR_ORDER."ORIGDOC_TYPE",
				        CUR_ORDER."SRC_DOC_ID",
				        LV_CUR_UTC_TIME,
				        CUR_ORDER."TP",
				        CUR_ORDER."REVNU_GL",
				        CUR_ORDER."FINAL_TRANS_PRC",	
				        CUR_ORDER."WAERS",
				        CUR_ORDER."CATEGORY",
				        CUR_ORDER."MAIN_COND_TYPE",
				        CUR_ORDER."FINAL_TRANS_PRC",
				        CUR_ORDER."WAERS",
				        LV_BATCH_ID,
				        ::SQL_ERROR_CODE,
						::SQL_ERROR_MESSAGE,
						LV_CUR_UTC);
			 
		    LV_ERROR_FLAG := 'Y';
	
	    END;
	
	--  Check the Error Status of the Record. 
	--  If Record is with Error or the sibling is with Error, then send to Error Table
		IF CUR_ORDER.IS_SIBLING_ERROR = '1'
		OR CUR_ORDER.ERROR_STATUS     = '1'
		THEN
		
	    --  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
			CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_ORDER."ERROR_CODE", 
																		   ERROR_TAB, 
				                                                           RECORD_COUNT);	
	   
	    -- 	Loop through the Error Records
			FOR i IN 1 .. :RECORD_COUNT DO
				
	        --  Fetch the Error Code
				CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
				
	        --  All erroneous records are inserted into Order Main EH table 
				INSERT INTO  "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"XNEGATIVE_ITEM",
						"ZZ_BATCH_ID",
						"ZZ_MATNR_GRP",
						"ERROR_CODE",
						"ERROR_CREATE_TS") 
				VALUES (CUR_ORDER."ORIGDOC_COMP",
					 	CUR_ORDER."ORIGDOC_LOGSYS",
					 	CUR_ORDER."ORIGDOC_TYPE",
					 	CUR_ORDER."SRC_DOC_ID",
					 	LV_CUR_UTC_TIME,
					 	CUR_ORDER."HEADER_ID",
					 	CUR_ORDER."ITEM_ID",
					 	CUR_ORDER."REFERENCE_TYPE",
					 	CUR_ORDER."REFERENCE_ID",
					 	CUR_ORDER."KUNNR",
					 	CUR_ORDER."BUKRS",
					 	CUR_ORDER."WAERS",
					 	CUR_ORDER."QUANTITY",
					 	CUR_ORDER."QUANTITY_UNIT",
					 	CUR_ORDER."BILREL",	           				
					 	CUR_ORDER."REVNU_GL",
					 	CUR_ORDER."INCEPTION_DATE",
					 	CUR_ORDER."XNEGATIVE_ITEM",          					
 					 	LV_BATCH_ID,
 					 	CUR_ORDER."POB_TYPE",
						:CURRENT_ERROR,
						LV_CUR_UTC);

	        --  All erroneous records are inserted into Order Condition EH Table for SSP(Standalone Selling Price)
			    INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_EH"(
		   	            "SRCDOC_COMP",
                        "SRCDOC_LOGSYS",
				        "SRCDOC_TYPE",
				        "SRCDOC_ID",
				        "TIMESTAMP_UTC",
				        "CONDITION_TYPE",
				        "PL_ACCOUNT",				
				        "BETRW",
				        "WAERS",				
				        "CATEGORY",
				        "ERROR_CODE",
						"ERROR_CREATE_TS")
				 VALUES(CUR_ORDER."ORIGDOC_COMP",
				        CUR_ORDER."ORIGDOC_LOGSYS",
				        CUR_ORDER."ORIGDOC_TYPE",
				        CUR_ORDER."SRC_DOC_ID",
				        LV_CUR_UTC_TIME,
				        CUR_ORDER."SSP",
				        CUR_ORDER."REVNU_GL",
				        CUR_ORDER."FINAL_TRANS_PRC",	
				        CUR_ORDER."WAERS",
				        CUR_ORDER."CATEGORY",
				        :CURRENT_ERROR,
						LV_CUR_UTC);		
				
	        --  All erroneous records are inserted into Order Condition EH Table for TP(Transaction Price)
		        INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_EH"(
		   	            "SRCDOC_COMP",
                        "SRCDOC_LOGSYS",
				        "SRCDOC_TYPE",
				        "SRCDOC_ID",
				        "TIMESTAMP_UTC",
				        "CONDITION_TYPE",
				        "PL_ACCOUNT",				
				        "BETRW",
				        "WAERS",				
				        "CATEGORY",
				        "MAIN_COND_TYPE",
				        "BETRH",
				        "HWAER",
				        "ERROR_CODE",
						"ERROR_CREATE_TS")
				 VALUES(CUR_ORDER."ORIGDOC_COMP",
				        CUR_ORDER."ORIGDOC_LOGSYS",
				        CUR_ORDER."ORIGDOC_TYPE",
				        CUR_ORDER."SRC_DOC_ID",
				        LV_CUR_UTC_TIME,
				        CUR_ORDER."TP",
				        CUR_ORDER."REVNU_GL",
				        CUR_ORDER."FINAL_TRANS_PRC",	
				        CUR_ORDER."WAERS",
				        CUR_ORDER."CATEGORY",
				        CUR_ORDER."MAIN_COND_TYPE",
				        CUR_ORDER."FINAL_TRANS_PRC",
				        CUR_ORDER."WAERS",
				        :CURRENT_ERROR,
						LV_CUR_UTC);
			
	        --  Set Error Flag				        
		        LV_ERROR_FLAG := 'Y';
					
			END FOR;		
			
	--  Processing for Successful Records
		ELSEIF CUR_ORDER.IS_SIBLING_ERROR = '0' 
		   AND CUR_ORDER.ERROR_STATUS     = '0' 
		  THEN
			BEGIN AUTONOMOUS TRANSACTION
	        --  All valid records are inserted into Order Main Temp table 
			  INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_TT"(
						    "SRCDOC_COMP",
						    "SRCDOC_LOGSYS",
						    "SRCDOC_TYPE",
						    "SRCDOC_ID",
						    "TIMESTAMP_UTC",
						    "HEADER_ID",
						    "ITEM_ID",
						    "REFERENCE_TYPE",
						    "REFERENCE_ID",
						    "KUNNR",
						    "BUKRS",
						    "WAERS",
						    "QUANTITY",
						    "QUANTITY_UNIT",
						    "BILREL",
						    "RECEIV_ACCOUNT",
						    "INCEPTION_DATE",
						    "XNEGATIVE_ITEM",
						    "ZZ_BATCH_ID",
						    "ZZ_MATNR_GRP")
					VALUES( CUR_ORDER."ORIGDOC_COMP",
					 		CUR_ORDER."ORIGDOC_LOGSYS",
					 		CUR_ORDER."ORIGDOC_TYPE",
					 		CUR_ORDER."SRC_DOC_ID",
					 		LV_CUR_UTC_TIME,
					 		CUR_ORDER."HEADER_ID",
					 		CUR_ORDER."ITEM_ID",
					 		CUR_ORDER."REFERENCE_TYPE",
					 		CUR_ORDER."REFERENCE_ID",
					 		CUR_ORDER."KUNNR",
					 		CUR_ORDER."BUKRS",
					 		CUR_ORDER."WAERS",
					 		CUR_ORDER."QUANTITY",
					 		CUR_ORDER."QUANTITY_UNIT",
					 		CUR_ORDER."BILREL",	           				
					 		CUR_ORDER."REVNU_GL",
					 		CUR_ORDER."INCEPTION_DATE",
					 		CUR_ORDER."XNEGATIVE_ITEM",          					
 					 		LV_BATCH_ID,
 					 		CUR_ORDER."POB_TYPE");
					 
	        --  All valid records are inserted ORDER Condition table for SSP(Standalone Selling Price)           
				INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_TT"(
						  	"SRCDOC_COMP",
                          	"SRCDOC_LOGSYS",
				          	"SRCDOC_TYPE",
				          	"SRCDOC_ID",
				          	"TIMESTAMP_UTC",
				          	"CONDITION_TYPE",
				          	"PL_ACCOUNT",				
				          	"BETRW",
				          	"WAERS",
				          	"CATEGORY",
				          	"BATCH_ID")
				    VALUES( CUR_ORDER."ORIGDOC_COMP",
				        	CUR_ORDER."ORIGDOC_LOGSYS",
				        	CUR_ORDER."ORIGDOC_TYPE",
				        	CUR_ORDER."SRC_DOC_ID",
				        	LV_CUR_UTC_TIME,
				        	CUR_ORDER."SSP",
				        	CUR_ORDER."REVNU_GL",
				        	CUR_ORDER."FINAL_TRANS_PRC",	
				        	CUR_ORDER."WAERS",
				        	CUR_ORDER."CATEGORY",
				        	LV_BATCH_ID);		
					 
	        --  All valid records are inserted ORDER Condition table for TP(Transaction Price)
		        INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_TT"(
					      	"SRCDOC_COMP",
                          	"SRCDOC_LOGSYS",
				          	"SRCDOC_TYPE",
				          	"SRCDOC_ID",
				          	"TIMESTAMP_UTC",
				          	"CONDITION_TYPE",
				          	"PL_ACCOUNT",				
				          	"BETRW",
				          	"WAERS",				
				          	"CATEGORY",
				          	"MAIN_COND_TYPE",
				          	"BETRH",
				          	"HWAER",
				          	"BATCH_ID")
					VALUES (CUR_ORDER."ORIGDOC_COMP",
				        	CUR_ORDER."ORIGDOC_LOGSYS",
				        	CUR_ORDER."ORIGDOC_TYPE",
				        	CUR_ORDER."SRC_DOC_ID",
				        	LV_CUR_UTC_TIME,
				        	CUR_ORDER."TP",
				        	CUR_ORDER."REVNU_GL",
				        	CUR_ORDER."FINAL_TRANS_PRC",	
				        	CUR_ORDER."WAERS",
				        	CUR_ORDER."CATEGORY",
				        	CUR_ORDER."MAIN_COND_TYPE",
				        	CUR_ORDER."FINAL_TRANS_PRC",
				        	CUR_ORDER."WAERS",
				        	LV_BATCH_ID);
							
	        END;
	        
		END IF;
		
	END FOR;
	
	FOR CUR_ORDER_PARENT AS C_RAI_INVC_ORDR_PARENT DO
	
	--  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
	  --  Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION 
		
	  --  Do Nothing. Exception Handled to ensure SP does not get terminated
	      
	      END;
	      
	    --  All records of the corresponding parent is inserted into ORDER main error table	      
			INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"XNEGATIVE_ITEM",
						"ZZ_BATCH_ID",
						"ZZ_MATNR_GRP",
						"ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				 SELECT "SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"XNEGATIVE_ITEM",
						"ZZ_BATCH_ID",
						"ZZ_MATNR_GRP",
                 		::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
						LV_CUR_UTC	      	        		
                   FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_TT" AS TT
                  WHERE TT."HEADER_ID" = CUR_ORDER_PARENT."HEADER_ID"
                    AND "ZZ_BATCH_ID" = LV_BATCH_ID;

		--  All records of the corresponding parent is inserted into Order Condition EH Table for 
		--  SSP(Standalone Selling Price) and TP(Transaction Price)
			INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_EH"(
						"SRCDOC_COMP",
                        "SRCDOC_LOGSYS",
				        "SRCDOC_TYPE",
				        "SRCDOC_ID",
				        "TIMESTAMP_UTC",
				        "CONDITION_TYPE",
				        "PL_ACCOUNT",				
				        "BETRW",
				        "WAERS",				
				        "CATEGORY",
				        "ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				 SELECT COND."SRCDOC_COMP",
                        COND."SRCDOC_LOGSYS",
				        COND."SRCDOC_TYPE",
				        COND."SRCDOC_ID",
				        COND."TIMESTAMP_UTC",
				        COND."CONDITION_TYPE",
				        COND."PL_ACCOUNT",				
				        COND."BETRW",
				        COND."WAERS",				
				        COND."CATEGORY",
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
						LV_CUR_UTC
				   FROM (SELECT * 
				           FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_TT"
				          WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					    (SELECT "SRCDOC_ID" 
					       FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_TT" 
					      WHERE "HEADER_ID" = CUR_ORDER_PARENT."HEADER_ID"
					        AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE COND."SRCDOC_ID" = MAIN."SRCDOC_ID";
					
			LV_ERROR_FLAG := 'Y';
	    
	    END;

    --  Check if any siblings of the parent is in ORDR MAIN Error table.
    --  If Yes move the entire dataset of the corresponding parent into MAIN error and COND error tables.
		SELECT COUNT(*) INTO LV_COUNT_ORDR 
		  FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_EH"
	      WHERE "HEADER_ID" = CUR_ORDER_PARENT."HEADER_ID"
	      AND "ZZ_BATCH_ID" = LV_BATCH_ID;
		
		IF LV_COUNT_ORDR > 0 THEN
		
		--  All records of the corresponding parent is inserted into Order Main error table 
			INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"XNEGATIVE_ITEM",
						"ZZ_BATCH_ID",
						"ZZ_MATNR_GRP",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
				 SELECT "SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"XNEGATIVE_ITEM",
						"ZZ_BATCH_ID",
						"ZZ_MATNR_GRP",
						LC_SQL_ERROR,
						LV_CUR_UTC
				   FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_TT"
				  WHERE "HEADER_ID" = CUR_ORDER_PARENT."HEADER_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
		
		--  All records of the corresponding parent is inserted into Order Condition error Table for 
		--  SSP(Standalone Selling Price) and TP(Transaction price)
			INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_EH"(
						"SRCDOC_COMP",
                        "SRCDOC_LOGSYS",
				        "SRCDOC_TYPE",
				        "SRCDOC_ID",
				        "TIMESTAMP_UTC",
				        "CONDITION_TYPE",
				        "PL_ACCOUNT",				
				        "BETRW",
				        "WAERS",				
				        "CATEGORY",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
				 SELECT COND."SRCDOC_COMP",
                        COND."SRCDOC_LOGSYS",
				        COND."SRCDOC_TYPE",
				        COND."SRCDOC_ID",
				        COND."TIMESTAMP_UTC",
				        COND."CONDITION_TYPE",
				        COND."PL_ACCOUNT",				
				        COND."BETRW",
				        COND."WAERS",				
				        COND."CATEGORY",
						LC_SQL_ERROR,
						LV_CUR_UTC
				   FROM (SELECT * 
				           FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_TT"
				          WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					    (SELECT "SRCDOC_ID" 
					       FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_TT"
					      WHERE "HEADER_ID" = CUR_ORDER_PARENT."HEADER_ID"
					        AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE MAIN."SRCDOC_ID"=COND."SRCDOC_ID";
			  
		--  Set Error Flag				        
			LV_ERROR_FLAG := 'Y';	  
	
	--	Processing of successful records(none of the siblings of a corresponding parent are in error)
		ELSEIF LV_COUNT_ORDR = 0 THEN
		
			BEGIN AUTONOMOUS TRANSACTION
			
			--  All valid records are inserted into Order Main table 
				INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"XNEGATIVE_ITEM",
						"ZZ_BATCH_ID",
						"ZZ_MATNR_GRP")
				 SELECT "SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"XNEGATIVE_ITEM",
						"ZZ_BATCH_ID",
						"ZZ_MATNR_GRP"
				   FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_TT"
				  WHERE "HEADER_ID" = CUR_ORDER_PARENT."HEADER_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;

			--  All valid records are inserted ORDER Condition table for SSP(Standalone Selling Price) and TP(Transaction Price)         
				INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND"(
						"SRCDOC_COMP",
                        "SRCDOC_LOGSYS",
				        "SRCDOC_TYPE",
				        "SRCDOC_ID",
				        "TIMESTAMP_UTC",
				        "CONDITION_TYPE",
				        "PL_ACCOUNT",				
				        "BETRW",
				        "WAERS",				
				        "CATEGORY")
				 SELECT COND."SRCDOC_COMP",
                        COND."SRCDOC_LOGSYS",
				        COND."SRCDOC_TYPE",
				        COND."SRCDOC_ID",
				        COND."TIMESTAMP_UTC",
				        COND."CONDITION_TYPE",
				        COND."PL_ACCOUNT",				
				        COND."BETRW",
				        COND."WAERS",				
				        COND."CATEGORY"
				   FROM (SELECT * 
				           FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_TT"
				          WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					    (SELECT "SRCDOC_ID" 
					       FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_TT"
					      WHERE "HEADER_ID" = CUR_ORDER_PARENT."HEADER_ID"
					        AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE MAIN."SRCDOC_ID"=COND."SRCDOC_ID";
		    END;
                  				
	--      Insert PK of successfully processed Records into Local Temp Tables 
	--      for Updating the deleted flag in corresponding Error Tables records
				   		      
			INSERT INTO	#UPDATE_EH_DELETION_ORDR_MAIN_DM (SRCDOC_ID) 
				 SELECT "SRCDOC_ID" 
				   FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN"
				  WHERE "HEADER_ID" = CUR_ORDER_PARENT."HEADER_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
			   		
			INSERT INTO	#UPDATE_EH_DELETION_ORDR_COND_DM (SRCDOC_ID) 
				 SELECT COND."SRCDOC_ID" 
				   FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND" COND,
	                	(SELECT "SRCDOC_ID" 
	                	   FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN" 
					  	  WHERE "HEADER_ID" = CUR_ORDER_PARENT."HEADER_ID") MAIN 
				  WHERE MAIN."SRCDOC_ID"=COND."SRCDOC_ID";
							          												 		   		        		   	   
		END IF;
	
	END FOR;		    
		 
--  Update Order Main Error Table

    UPDATE "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_EH" A
   	  FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_EH" A
	 INNER JOIN #UPDATE_EH_DELETION_ORDR_MAIN_DM B
	    ON A.SRCDOC_ID=B.SRCDOC_ID
	   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1); 

--  Update Order Cond Error Table

    UPDATE "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_EH" A
      FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_COND_EH" A
	 INNER JOIN #UPDATE_EH_DELETION_ORDR_COND_DM B
	    ON A.SRCDOC_ID=B.SRCDOC_ID
	   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);
			
	-------------------------------------------------------------------------------------------			
	--INVOICE CREATION			
	-------------------------------------------------------------------------------------------
		 
	--------------------------------------------------------------------------------------------------
	-- Local Temporary Tables Declaration
	-------------------------------------------------------------------------------------------------- 			 
	   
    CREATE LOCAL TEMPORARY TABLE #UPDATE_DM_INVC(
        SRCDOC_ID                NVARCHAR(35),
	    REFERENCE_ID             NVARCHAR(30),
	    RAI_ITEM_ID              NVARCHAR(15),
	    BATCH_ID                 INTEGER,
	    HEADER_ID				 NVARCHAR(20),
	    INCEPTION_DATE			 DATE );
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_ORDR_MAIN_INVC_DM (SRCDOC_ID NVARCHAR(35));
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_ORDR_COND_INVC_DM (SRCDOC_ID NVARCHAR(35));
	
	--------------------------------------------------------------------------------------------------
	-- Invoice Cursors Loop
	-------------------------------------------------------------------------------------------------- 
	
	FOR CUR_INVC AS C_RAI_INVC_ORDR DO
	
    --  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
	  --  Define Exit Handler
	      DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION	
	  --  Do Nothing. Exception Handled to ensure SP does not get terminated			 			     
	      END;
	      
		--  Insert record into  INVC main error table
			INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_EH"(
					    "SRCDOC_COMP",
					    "SRCDOC_LOGSYS",
					    "SRCDOC_TYPE",
					    "SRCDOC_ID",
					    "TIMESTAMP_UTC",
					    "HEADER_ID",
					    "ITEM_ID",
					    "KUNNR",			
					    "BUKRS",
					    "WAERS",
					    "HWAER",
					    "QUANTITY",
					    "QUANTITY_UNIT",
					    "ORIGDOC_COMP",
					    "ORIGDOC_LOGSYS",
					    "ORIGDOC_TYPE",
					    "ORIGDOC_ID",
					    "DUE_DATE",
					    "FINAL_INVOICE",
					    "QUANTITY_REL",
					    "POSTING_DATE",		
					    "EXCHANGE_RATE"	,
					    "ZZ_BATCH_ID",
					    "ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS")						
				VALUES( CUR_INVC."SRCDOC_COMP",
 					    CUR_INVC."SRCDOC_LOGSYS",
 					    CUR_INVC."SRCDOC_TYPE",
 					    CUR_INVC."SRC_DOC_ID",
					    LV_CUR_UTC_TIME,
 					    CUR_INVC."HEADER_ID",
 					    CUR_INVC."ITEM_ID",
 					    CUR_INVC."KUNNR",
 					    CUR_INVC."BUKRS",
 					    CUR_INVC."WAERS",
 					    CUR_INVC."WAERS",
 					    CUR_INVC."QUANTITY",
 					    CUR_INVC."QUANTITY_UNIT",
 					    CUR_INVC."ORIGDOC_COMP",
 					    CUR_INVC."ORIGDOC_LOGSYS",
 					    CUR_INVC."ORIGDOC_TYPE",
 					    CUR_INVC."SRCDOC_ID_INV",
					    LV_CUR_DATE,
					    LC_SET,
					    LC_SET,
					    LV_CUR_DATE,
 					    CUR_INVC."QUANTITY",
					    LV_BATCH_ID,
					    ::SQL_ERROR_CODE,
			    	    ::SQL_ERROR_MESSAGE,
			            LV_CUR_UTC);				
			
		--  Insert record into DM INVC Condition error table for SSP(Standalone Selling Price)           
			INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_EH"(
						SRCDOC_COMP,
						SRCDOC_LOGSYS,
						SRCDOC_TYPE,
						SRCDOC_ID,
						TIMESTAMP_UTC,
						CONDITION_TYPE,
						PL_ACCOUNT,
						BETRW,
						WAERS,
						BETRH,
						HWAER,
						CATEGORY,
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS")
				VALUES( CUR_INVC."SRCDOC_COMP",
 						CUR_INVC."SRCDOC_LOGSYS",
  						CUR_INVC."SRCDOC_TYPE",
  						CUR_INVC."SRC_DOC_ID",
 						LV_CUR_UTC_TIME,
 						CUR_INVC."SSP", 
  						CUR_INVC."REVNU_GL",
 						CUR_INVC."FINAL_TRANS_PRC",
  						CUR_INVC."WAERS",
 						CUR_INVC."FINAL_TRANS_PRC",
  						CUR_INVC."WAERS",
  						CUR_INVC."CATEGORY",
						::SQL_ERROR_CODE,
			    	    ::SQL_ERROR_MESSAGE,
			            LV_CUR_UTC);
						 
        -- 	Insert record into ORDER Condition error table for TP(Transaction Price)           
			INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_EH"(
						SRCDOC_COMP,
						SRCDOC_LOGSYS,
						SRCDOC_TYPE,
						SRCDOC_ID,
						TIMESTAMP_UTC,
						CONDITION_TYPE,
						PL_ACCOUNT,
						BETRW,
						WAERS,
						BETRH,
						HWAER,
						CATEGORY,
						MAIN_COND_TYPE,
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS" )
				VALUES( CUR_INVC."SRCDOC_COMP",
 		 				CUR_INVC."SRCDOC_LOGSYS",
  		 				CUR_INVC."SRCDOC_TYPE",
  		 				CUR_INVC."SRC_DOC_ID",
 		 				LV_CUR_UTC_TIME,
 		 				CUR_INVC."TP",
  		 				CUR_INVC."REVNU_GL",
 		 				CUR_INVC."FINAL_TRANS_PRC",
  		 				CUR_INVC."WAERS",
 		 				CUR_INVC."FINAL_TRANS_PRC",
  		 				CUR_INVC."WAERS",
  		 				CUR_INVC."CATEGORY",
 		 				CUR_INVC."MAIN_COND_TYPE",
 		 				::SQL_ERROR_CODE,
			    	    ::SQL_ERROR_MESSAGE,
			            LV_CUR_UTC);
	             
		    LV_ERROR_FLAG := 'Y';

	    END;
	  
    --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
		IF CUR_INVC.IS_SIBLING_ERROR = '1' 
		OR CUR_INVC.ERROR_STATUS     = '1' 
		THEN
		
        --  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
			CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"( CUR_INVC."ERROR_CODE",
																		    ERROR_TAB, 
				                                                            RECORD_COUNT
				                                                          );	
        --  Loop through the Error Records
			FOR i IN 1 .. :RECORD_COUNT DO
				
            --  Fetch the Error Code
				CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
					  
           --	All erroneous records are inserted into DM Invc Main EH table 
			    INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_EH"(
					    "SRCDOC_COMP",
					    "SRCDOC_LOGSYS",
					    "SRCDOC_TYPE",
					    "SRCDOC_ID",
					    "TIMESTAMP_UTC",
					    "HEADER_ID",
					    "ITEM_ID",
					    "KUNNR",			
					    "BUKRS",
					    "WAERS",
					    "HWAER",
					    "QUANTITY",
					    "QUANTITY_UNIT",
					    "ORIGDOC_COMP",
					    "ORIGDOC_LOGSYS",
					    "ORIGDOC_TYPE",
					    "ORIGDOC_ID",
					    "DUE_DATE",
					    "FINAL_INVOICE",
					    "QUANTITY_REL",
					    "POSTING_DATE",		
					    "EXCHANGE_RATE",
					    "ZZ_BATCH_ID",
					    "ERROR_CODE",
					    "ERROR_CREATE_TS")						
				VALUES( CUR_INVC."SRCDOC_COMP",
 					    CUR_INVC."SRCDOC_LOGSYS",
 					    CUR_INVC."SRCDOC_TYPE",
 					    CUR_INVC."SRC_DOC_ID",
					    LV_CUR_UTC_TIME,
 					    CUR_INVC."HEADER_ID",
 					    CUR_INVC."ITEM_ID",
 					    CUR_INVC."KUNNR",
 					    CUR_INVC."BUKRS",
 					    CUR_INVC."WAERS",
 					    CUR_INVC."WAERS",
 					    CUR_INVC."QUANTITY",
 					    CUR_INVC."QUANTITY_UNIT",
 					    CUR_INVC."ORIGDOC_COMP",
 					    CUR_INVC."ORIGDOC_LOGSYS",
 					    CUR_INVC."ORIGDOC_TYPE",
 					    CUR_INVC."SRCDOC_ID_INV",
					    LV_CUR_DATE,
					    LC_SET,
					    LC_SET,
					    LV_CUR_DATE,
 					    CUR_INVC."QUANTITY",
					    LV_BATCH_ID,
					    :CURRENT_ERROR,
			            LV_CUR_UTC);
			 			
            -- 	All erroneous records are inserted into Invoice Condition EH Table for SSP(Standalone Selling Price)
		   		INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_EH"(
	                    	"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
							"BETRW",
							"WAERS",
							"BETRH",
							"HWAER",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"ERROR_CODE",
					    	"ERROR_CREATE_TS")
					VALUES( CUR_INVC."SRCDOC_COMP",
 			 				CUR_INVC."SRCDOC_LOGSYS",
  			 				CUR_INVC."SRCDOC_TYPE",
  		 					CUR_INVC."SRC_DOC_ID",
 		 					LV_CUR_UTC_TIME,
 		 					CUR_INVC."SSP",
  		 					CUR_INVC."REVNU_GL",
	 		 				CUR_INVC."FINAL_TRANS_PRC",
  			 				CUR_INVC."WAERS",
 			 				CUR_INVC."FINAL_TRANS_PRC",
  		 					CUR_INVC."WAERS",
  		 					CUR_INVC."CATEGORY",
 		 					CUR_INVC."MAIN_COND_TYPE",
	 		 				:CURRENT_ERROR,
			            	LV_CUR_UTC);
			
			--  All erroneous records are inserted into Invoice Condition EH Table for TP( Transaction Price)
		   	 	INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_EH"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
							"BETRW",
							"WAERS",
							"BETRH",
							"HWAER",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"ERROR_CODE",					    	
					    	"ERROR_CREATE_TS" )
					VALUES( CUR_INVC."SRCDOC_COMP",
 			 				CUR_INVC."SRCDOC_LOGSYS",
  			 				CUR_INVC."SRCDOC_TYPE",
  		 					CUR_INVC."SRC_DOC_ID",
 		 					LV_CUR_UTC_TIME,
 		 					CUR_INVC."TP",
  		 					CUR_INVC."REVNU_GL",
 		 					CUR_INVC."FINAL_TRANS_PRC",
  			 				CUR_INVC."WAERS",
 				 			CUR_INVC."FINAL_TRANS_PRC",
  		 					CUR_INVC."WAERS",
  		 					CUR_INVC."CATEGORY",
 		 					CUR_INVC."MAIN_COND_TYPE",
 			 				:CURRENT_ERROR,
			            	LV_CUR_UTC);
			 			 	
			-- 	Set Error Flag				        
				LV_ERROR_FLAG := 'Y';
				
			END FOR;
    --  Processing for Successful Records
	    ELSEIF CUR_INVC.IS_SIBLING_ERROR = '0' 
		   AND CUR_INVC.ERROR_STATUS        = '0' 
		  THEN
	   
	   	    BEGIN AUTONOMOUS TRANSACTION
	   	       
            --  All valid records are inserted into Invoice Main Temp table
			  INSERT INTO   "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_TT"(
						    "SRCDOC_COMP",
    					    "SRCDOC_LOGSYS",
	    				    "SRCDOC_TYPE",
		    			    "SRCDOC_ID",
			    		    "TIMESTAMP_UTC",
				    	    "HEADER_ID",
					        "ITEM_ID",
					        "KUNNR",			
    					    "BUKRS",
	        			    "WAERS",
			    		    "HWAER",
				    	    "QUANTITY",
					        "QUANTITY_UNIT",
					        "ORIGDOC_COMP",
    					    "ORIGDOC_LOGSYS",
		    			    "ORIGDOC_TYPE",
			    		    "ORIGDOC_ID",
				    	    "DUE_DATE",
					        "FINAL_INVOICE",
					        "QUANTITY_REL",
    					    "POSTING_DATE",		
	    				    "EXCHANGE_RATE",
		    			    "ZZ_BATCH_ID")							
					VALUES( CUR_INVC."SRCDOC_COMP",
 					    	CUR_INVC."SRCDOC_LOGSYS",
 					    	CUR_INVC."SRCDOC_TYPE",
 					    	CUR_INVC."SRC_DOC_ID",
					    	LV_CUR_UTC_TIME,
 					    	CUR_INVC."HEADER_ID",
 					    	CUR_INVC."ITEM_ID",
 					    	CUR_INVC."KUNNR",
 					    	CUR_INVC."BUKRS",
 					    	CUR_INVC."WAERS",
 					    	CUR_INVC."WAERS",
 					    	CUR_INVC."QUANTITY",
 					    	CUR_INVC."QUANTITY_UNIT",
 					    	CUR_INVC."ORIGDOC_COMP",
 					    	CUR_INVC."ORIGDOC_LOGSYS",
 					    	CUR_INVC."ORIGDOC_TYPE",
 					    	CUR_INVC."SRCDOC_ID_INV",
					    	LV_CUR_DATE,
					    	LC_SET,
					    	LC_SET,
					    	LV_CUR_DATE,
 					    	CUR_INVC."QUANTITY",
					    	LV_BATCH_ID);					
	
          --  All valid records are inserted into Invoice Main Temp table for SSP(Standalone Selling Price) 
			  INSERT INTO   "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_TT"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
							"BETRW",
							"WAERS",
							"BETRH",
							"HWAER",
							"CATEGORY",
							"MAIN_COND_TYPE",
					    	"BATCH_ID")				
					VALUES( CUR_INVC."SRCDOC_COMP",
 			 				CUR_INVC."SRCDOC_LOGSYS",
  			 				CUR_INVC."SRCDOC_TYPE",
  		 					CUR_INVC."SRC_DOC_ID",
 		 					LV_CUR_UTC_TIME,
 		 					CUR_INVC."SSP",
  		 					CUR_INVC."REVNU_GL",
	 		 				CUR_INVC."FINAL_TRANS_PRC",
  			 				CUR_INVC."WAERS",
 			 				CUR_INVC."FINAL_TRANS_PRC",
  		 					CUR_INVC."WAERS",
  		 					CUR_INVC."CATEGORY",
 		 					LC_SET,
 		 					LV_BATCH_ID);
						 
          --  All valid records are inserted into Invoice Main Temp table for TP(Transaction Price)
	 		  INSERT INTO   "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_TT"(
				 		    "SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
							"BETRW",
							"WAERS",
							"BETRH",
							"HWAER",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
					VALUES( CUR_INVC."SRCDOC_COMP",
 			 				CUR_INVC."SRCDOC_LOGSYS",
  			 				CUR_INVC."SRCDOC_TYPE",
  		 					CUR_INVC."SRC_DOC_ID",
 		 					LV_CUR_UTC_TIME,
 		 					CUR_INVC."TP",
  		 					CUR_INVC."REVNU_GL",
 		 					CUR_INVC."FINAL_TRANS_PRC",
  			 				CUR_INVC."WAERS",
 				 			CUR_INVC."FINAL_TRANS_PRC",
  		 					CUR_INVC."WAERS",
  		 					CUR_INVC."CATEGORY",
 		 					CUR_INVC."MAIN_COND_TYPE",
 		 					LV_BATCH_ID );
	        END;        					 			 												          												 		   		        		   	   
	    END IF;  
	END FOR;

	FOR CUR_INVC_PARENT AS C_RAI_INVC_ORDR_PARENT DO
	
	--  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
	  --  Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION 
		
	  --    Do Nothing. Exception Handled to ensure SP does not get terminated
	      
	      END;
		  
		--	All erraneous records of the corresponding parent is inserted into INVC main error table	
            INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_EH"(
					    "SRCDOC_COMP",
    					"SRCDOC_LOGSYS",
	    				"SRCDOC_TYPE",
		    			"SRCDOC_ID",
			    		"TIMESTAMP_UTC",
				    	"HEADER_ID",
					    "ITEM_ID",
					    "KUNNR",			
    					"BUKRS",
	        			"WAERS",
			    		"HWAER",
				    	"QUANTITY",
					    "QUANTITY_UNIT",
					    "ORIGDOC_COMP",
    					"ORIGDOC_LOGSYS",
		    			"ORIGDOC_TYPE",
			    		"ORIGDOC_ID",
				    	"DUE_DATE",
					    "FINAL_INVOICE",
					    "QUANTITY_REL",
    					"POSTING_DATE",		
	    				"EXCHANGE_RATE",
		    			"ZZ_BATCH_ID",
			            "ERROR_CODE",
			            "TECHNICAL_MESSAGE",	    
			            "ERROR_CREATE_TS")
			     SELECT "SRCDOC_COMP",
    					"SRCDOC_LOGSYS",
	    				"SRCDOC_TYPE",
		    			"SRCDOC_ID",
			    		"TIMESTAMP_UTC",
				    	"HEADER_ID",
					    "ITEM_ID",
					    "KUNNR",			
    					"BUKRS",
	        			"WAERS",
			    		"HWAER",
				    	"QUANTITY",
					    "QUANTITY_UNIT",
					    "ORIGDOC_COMP",
    					"ORIGDOC_LOGSYS",
		    			"ORIGDOC_TYPE",
			    		"ORIGDOC_ID",
				    	"DUE_DATE",
					    "FINAL_INVOICE",
					    "QUANTITY_REL",
    					"POSTING_DATE",		
	    				"EXCHANGE_RATE",
		    			"ZZ_BATCH_ID",
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
						LV_CUR_UTC
                   FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_TT" 
                  WHERE "HEADER_ID" = CUR_INVC_PARENT."HEADER_ID"
                    AND "ZZ_BATCH_ID" = LV_BATCH_ID;		
                  
		--	All erraneous records of the corresponding parent is inserted into INVC cond error table
		--  SSP(Standalone Selling Price) and TP(Transaction Price)          
			INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",
						"BETRW",
						"WAERS",
						"BETRH",
						"HWAER",
						"CATEGORY",
						"MAIN_COND_TYPE",
					    "BATCH_ID",
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS")
				SELECT  COND."SRCDOC_COMP",
						COND."SRCDOC_LOGSYS",
						COND."SRCDOC_TYPE",
						COND."SRCDOC_ID",
						COND."TIMESTAMP_UTC",
						COND."CONDITION_TYPE",
						COND."PL_ACCOUNT",
						COND."BETRW",
						COND."WAERS",
						COND."BETRH",
						COND."HWAER",
						COND."CATEGORY",
						COND."MAIN_COND_TYPE",
					    COND."BATCH_ID", 
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
						LV_CUR_UTC
				   FROM (SELECT * 
				           FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_TT"
				          WHERE"BATCH_ID" = LV_BATCH_ID) COND,
					    (SELECT "SRCDOC_ID" 
					       FROM  "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_TT"
					      WHERE "HEADER_ID" = CUR_INVC_PARENT."HEADER_ID"
					        AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE COND."SRCDOC_ID" = MAIN."SRCDOC_ID";
	             
		    LV_ERROR_FLAG := 'Y';

	    END;
	    
	    LV_COUNT_ORDR := 0;
	    
    --  Check if any siblings of the parent is in ORDR MAIN Error or ORDR INVC error  table.
    --  If Yes move the entire dataset of the corresponding parent into INVC MAIN error 
    --  and INVC COND error tables.
		SELECT COUNT(*) INTO LV_COUNT_ORDR 
		  FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_ORDR_MAIN_EH"
	     WHERE "HEADER_ID" = CUR_INVC_PARENT."HEADER_ID"
	       AND "ZZ_BATCH_ID" = LV_BATCH_ID;
	     
	    SELECT COUNT(*) INTO LV_COUNT_INVC 
	      FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_EH"
	     WHERE "HEADER_ID" = CUR_INVC_PARENT."HEADER_ID"
	       AND "ZZ_BATCH_ID" = LV_BATCH_ID;
		
		IF LV_COUNT_ORDR > 0 OR LV_COUNT_INVC > 0  THEN	
		
		--  All records of the corresponding parent is inserted into INVC Main error table 
            INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_EH"(
					    "SRCDOC_COMP",
    					"SRCDOC_LOGSYS",
	    				"SRCDOC_TYPE",
		    			"SRCDOC_ID",
			    		"TIMESTAMP_UTC",
				    	"HEADER_ID",
					    "ITEM_ID",
					    "KUNNR",			
    					"BUKRS",
	        			"WAERS",
			    		"HWAER",
				    	"QUANTITY",
					    "QUANTITY_UNIT",
					    "ORIGDOC_COMP",
    					"ORIGDOC_LOGSYS",
		    			"ORIGDOC_TYPE",
			    		"ORIGDOC_ID",
				    	"DUE_DATE",
					    "FINAL_INVOICE",
					    "QUANTITY_REL",
    					"POSTING_DATE",		
	    				"EXCHANGE_RATE",
		    			"ZZ_BATCH_ID",
			            "ERROR_CODE",
			            "ERROR_CREATE_TS")
			     SELECT "SRCDOC_COMP",
    					"SRCDOC_LOGSYS",
	    				"SRCDOC_TYPE",
		    			"SRCDOC_ID",
			    		"TIMESTAMP_UTC",
				    	"HEADER_ID",
					    "ITEM_ID",
					    "KUNNR",			
    					"BUKRS",
	        			"WAERS",
			    		"HWAER",
				    	"QUANTITY",
					    "QUANTITY_UNIT",
					    "ORIGDOC_COMP",
    					"ORIGDOC_LOGSYS",
		    			"ORIGDOC_TYPE",
			    		"ORIGDOC_ID",
				    	"DUE_DATE",
					    "FINAL_INVOICE",
					    "QUANTITY_REL",
    					"POSTING_DATE",		
	    				"EXCHANGE_RATE",
		    			"ZZ_BATCH_ID",
						LC_SQL_ERROR,
						LV_CUR_UTC
                   FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_TT" 
                  WHERE "HEADER_ID" = CUR_INVC_PARENT."HEADER_ID"
                    AND "ZZ_BATCH_ID" = LV_BATCH_ID;			
                  
		--	All erraneous records of the corresponding parent is inserted into INVC cond error table
		--  SSP(Standalone Selling Price) and TP(Transaction Price)          
			INSERT INTO "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_EH" (
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",
						"BETRW",
						"WAERS",
						"BETRH",
						"HWAER",
						"CATEGORY",
						"MAIN_COND_TYPE",
					    "BATCH_ID",
						"ERROR_CODE",
					    "ERROR_CREATE_TS")
				SELECT  COND."SRCDOC_COMP",
						COND."SRCDOC_LOGSYS",
						COND."SRCDOC_TYPE",
						COND."SRCDOC_ID",
						COND."TIMESTAMP_UTC",
						COND."CONDITION_TYPE",
						COND."PL_ACCOUNT",
						COND."BETRW",
						COND."WAERS",
						COND."BETRH",
						COND."HWAER",
						COND."CATEGORY",
						COND."MAIN_COND_TYPE",
					    COND."BATCH_ID", 
						:LC_SQL_ERROR,
						LV_CUR_UTC
				   FROM (SELECT * 
				           FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_TT"
				          WHERE"BATCH_ID" = LV_BATCH_ID) COND,
					    (SELECT "SRCDOC_ID" 
					       FROM  "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_TT"
					      WHERE "HEADER_ID" = CUR_INVC_PARENT."HEADER_ID"
					        AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE COND."SRCDOC_ID" = MAIN."SRCDOC_ID";

		--  Set Error Flag				        
			LV_ERROR_FLAG := 'Y';	  
	
	--	Processing of successful records(none of the siblings of a corresponding parent are in error)
		ELSEIF LV_COUNT_ORDR = 0 AND LV_COUNT_INVC = 0  THEN	
		
			BEGIN AUTONOMOUS TRANSACTION	

            --  All valid records are inserted into Invoice Main table
			  INSERT INTO   "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN" (
						    "SRCDOC_COMP",
    						"SRCDOC_LOGSYS",
	    					"SRCDOC_TYPE",
		    				"SRCDOC_ID",
			    			"TIMESTAMP_UTC",
				    		"HEADER_ID",
					    	"ITEM_ID",
					    	"KUNNR",			
    						"BUKRS",
	        				"WAERS",
			    			"HWAER",
				    		"QUANTITY",
					    	"QUANTITY_UNIT",
					    	"ORIGDOC_COMP",
    						"ORIGDOC_LOGSYS",
		    				"ORIGDOC_TYPE",
			    			"ORIGDOC_ID",
				    		"DUE_DATE",
					    	"FINAL_INVOICE",
					    	"QUANTITY_REL",
    						"POSTING_DATE",		
	    					"EXCHANGE_RATE",
		    				"ZZ_BATCH_ID")
			     	SELECT 	"SRCDOC_COMP",
    						"SRCDOC_LOGSYS",
	    					"SRCDOC_TYPE",
		    				"SRCDOC_ID",
			    			"TIMESTAMP_UTC",
				    		"HEADER_ID",
					    	"ITEM_ID",
					    	"KUNNR",			
    						"BUKRS",
	        				"WAERS",
			    			"HWAER",
				    		"QUANTITY",
					    	"QUANTITY_UNIT",
					    	"ORIGDOC_COMP",
    						"ORIGDOC_LOGSYS",
		    				"ORIGDOC_TYPE",
			    			"ORIGDOC_ID",
				    		"DUE_DATE",
					    	"FINAL_INVOICE",
					    	"QUANTITY_REL",
    						"POSTING_DATE",		
	    					"EXCHANGE_RATE",
		    				"ZZ_BATCH_ID"
                   FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_TT" 
                  WHERE "HEADER_ID" = CUR_INVC_PARENT."HEADER_ID"
                    AND "ZZ_BATCH_ID" = LV_BATCH_ID;

            --  All valid records are inserted into Invoice Cond table 
            --  for SSP(Standalone Selling Price) and TP(Transaction Price)
	 		  INSERT INTO   "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND"(
				 		    "SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",
						 	"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE")					  
					 SELECT COND."SRCDOC_COMP",
							COND."SRCDOC_LOGSYS",
							COND."SRCDOC_TYPE",
							COND."SRCDOC_ID",
							LV_CUR_UTC_TIME,
							COND."CONDITION_TYPE",
							COND."PL_ACCOUNT",
						 	COND."BETRW",
							COND."WAERS",
							COND."CATEGORY",
							COND."MAIN_COND_TYPE"
					   FROM (SELECT * 
					           FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_TT"
					          WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					        (SELECT "SRCDOC_ID" 
					           FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_TT"
					          WHERE "HEADER_ID" = CUR_INVC_PARENT."HEADER_ID"
					            AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				      WHERE COND."SRCDOC_ID" = MAIN."SRCDOC_ID";
		    END;				      
								
--          Insert PK of successfully processed Records into Local Temp Tables 
--          for Updating NDB_TS in corresponding Landing Tables records
	
	 		INSERT INTO #UPDATE_DM_INVC(
			   		    SRCDOC_ID,                
			   		    REFERENCE_ID,
			   		    RAI_ITEM_ID,   
			   		    BATCH_ID,          
			   		    HEADER_ID,
			   		    INCEPTION_DATE
			   		    )	   			    
			     SELECT A.SRC_DOC_ID,                
			   		    A.REFERENCE_ID,
			   		    A.ITEM_ID,   
			   		    B."ZZ_BATCH_ID"	,          
			   		    A.HEADER_ID,
			   		    A.INCEPTION_DATE       		        		   		        
		   		  FROM :DM_INVC_ORDR_RAI_ITEM  A, 
   		    	       (SELECT "HEADER_ID","ZZ_BATCH_ID" 
   		    	          FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN"
   		    	         WHERE "HEADER_ID" =  CUR_INVC_PARENT."HEADER_ID"
   		    	           AND "ZZ_BATCH_ID" = LV_BATCH_ID) B 
		          WHERE B."HEADER_ID" = A."HEADER_ID";
			   		        
	        INSERT INTO	#UPDATE_EH_DELETION_ORDR_MAIN_INVC_DM (SRCDOC_ID) 
	        	 SELECT "SRCDOC_ID" 
	        	   FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN"
				  WHERE "HEADER_ID" = CUR_INVC_PARENT."HEADER_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
			   		
			INSERT INTO	 #UPDATE_EH_DELETION_ORDR_COND_INVC_DM (SRCDOC_ID)				
			     SELECT COND."SRCDOC_ID" 
			       FROM  "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND" COND,
	                	(SELECT "SRCDOC_ID" 
	                	   FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN"
					  	  WHERE "HEADER_ID" = CUR_INVC_PARENT."HEADER_ID"
					  	    AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE MAIN."SRCDOC_ID"=COND."SRCDOC_ID";
				  
		END IF;
	
	END FOR;				  
	--------------------------------------------------------------------------------------------------
	-- Update NDB Tables
	-------------------------------------------------------------------------------------------------- 
			
	--  Updating the Source document Id, Reference Id, Header Id, RAI Item ID,Batch id 
	--  and RAI Timestamp in NDB INVOICE table for M2M Contracts
	
	UPDATE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::P77_TRANS_ACSY" A
	  FROM "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::P77_TRANS_ACSY" A
     INNER JOIN #UPDATE_DM_INVC B
	    ON A."KUNNR_SID"        	  = B."HEADER_ID"
       AND A."ACT_POST_DT"      	  = B."INCEPTION_DATE"
	   AND  A."SCENARIO_IDENTIFIER"   in ('ACSY','DBT-MEMO')
	   SET "SRCDOC_ID"     = B."SRCDOC_ID",
		   "REFERENCE_ID"  = B."REFERENCE_ID",			
		   "HEADER_ID"     = B."HEADER_ID",			
		   "RAI_ITEM_ID"   = B."RAI_ITEM_ID",
		   "BATCH_ID"      = B."BATCH_ID",			
		   "RAI_TS"        = LV_CUR_UTC
	 WHERE A."RAI_TS" IS NULL;
									 
									 
	--  Update INVOICE Main Error Table
	
	UPDATE "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_EH" A
	  FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_MAIN_EH" A
	 INNER JOIN #UPDATE_EH_DELETION_ORDR_MAIN_INVC_DM B
	    ON A.SRCDOC_ID=B.SRCDOC_ID
	   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1); 

	--  Update Order Cond Error Table
	
	UPDATE "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_EH" A
	  FROM "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::ACC_INV_COND_EH" A
	 INNER JOIN #UPDATE_EH_DELETION_ORDR_COND_INVC_DM B
		ON A.SRCDOC_ID=B.SRCDOC_ID
	   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);									           
	
	-------------------------------------------------------------------------------------------------
	--  Set Overall Status
	-------------------------------------------------------------------------------------------------- 
	
	--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
	--  executed successfully
	    IF(LV_ERROR_FLAG = 'Y') THEN		
	
	     OP_STATUS := LC_ERROR_TEXT; 
				
	    ELSE
	
	  	 OP_STATUS := LC_SUCCESS_TEXT; 	
					
		END IF;
	END;
END;
