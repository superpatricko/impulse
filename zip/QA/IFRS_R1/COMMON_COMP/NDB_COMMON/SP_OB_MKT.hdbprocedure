PROCEDURE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::SP_OB_MKT" (OUT OT_STATUS NVARCHAR(1000)) 
LANGUAGE SQLSCRIPT SQL SECURITY INVOKER --DEFAULT SCHEMA <default_schema_name>
 --READS SQL DATA 
 AS 
 
 /*Global Variable */
 
GV_CURR_DATE DATE := CURRENT_DATE; 
 
BEGIN /***************************** Write your procedure logic *****************************/ 
	----------------------------------------------------------------------
-- Procedure Title : SP_OB_MKT
--
-- Created By      : BC_EY94108 (Pravin Jaiswal)          Date : 08/12/2016
-- 
-- Procedure Description : It is used to INSERT/UPDATE data in NDB Table
--                         from Calculation view CA_OB_MKT_VW.
--                         NDB_TS is updated in Landing Table         
--                         after data is loaded in NDB.
--Project :Bell Canda
--
--
----------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
----------------------------------------------------------------------
-- 08/12/2016  | BC_EY94118       | Added error and control logs
---------------|------------------|-----------------------------------

-- Description Of the changes 
----------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> :<Description of Changes>       
----------------------------------------------------------------------


DECLARE LC_EVENTID    			NVARCHAR(30) DEFAULT 'NDB_MOBL_ORDER';
DECLARE LV_CUR_UTC 				TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE LC_ERROR_TEXT 			NVARCHAR(120) 
            					DEFAULT 'OUT STATUS IS 1 : PROCEDURE IFRS_R1.COMMON_COMP.NDB_COMMON::SP_OB_MKT
INSERT/UPDATE EXECUTION FAILED';
DECLARE LC_START_TEXT 			NVARCHAR(30) DEFAULT 'START_TIME';
DECLARE LC_END_TEXT   			NVARCHAR(30) DEFAULT 'END_TIME';
DECLARE LC_SUCCESS_TEXT 		NVARCHAR(120) 
								DEFAULT 'OUT STATUS IS 1 : PROCEDURE IFRS_R1.COMMON_COMP.NDB_COMMON::SP_OB_MKT
INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LC_ERROR     			NVARCHAR(5)  DEFAULT 'ERROR';
DECLARE LC_SUCCESS     			NVARCHAR(10) DEFAULT 'SUCCESS';
DECLARE LC_NODATA_MOD           NVARCHAR(100)DEFAULT 'NO MODIFICATION DATA FOUND FOR PROCESSING';
  

/* Exception handling: Capture standard error and rollback, if any error is encountered.  
   The autonomous transaction is independent from the main procedure, if the error occurs
   at any place in the procedure, then this part of the code will execute and roll back the 
   updated records and insert into the error Log table with Standard error. */   
   
DECLARE EXIT HANDLER FOR SQLEXCEPTION 
BEGIN AUTONOMOUS TRANSACTION 
	INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::ERROR_LOG"
	(
		EVENT,
		PROC_ID,
		ERROR_CODE,
		ERROR_MESSAGE,
		START_END_TIME
	)
	VALUES
	(
		:LC_EVENTID,
		::CURRENT_OBJECT_NAME,
		::SQL_ERROR_CODE,
		::SQL_ERROR_MESSAGE,
		LV_CUR_UTC
	);
		
/* STATUS 1: Send the Error message to scheduling tool to confirm whether procedure is 
   successful or not */
	OT_STATUS := LC_ERROR_TEXT;
		
	COMMIT;
	RESIGNAL;
END;


/* Process Control Table: It will track the start time with User Id. */
CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::SP_PROCESS_CONTROL" 
(
	:LC_EVENTID,					--IP:Event ID
	::CURRENT_OBJECT_NAME,			--IP:Current Object 
	LV_CUR_UTC,						--IP:Current Timestamp
	LC_START_TEXT,					--IP:Start / endtime Text
	CURRENT_USER					--IP:Current User
);

/* Select all the modification data from Harmonization view CA_OB_MKT_VW in a variable
 so that we have the data in memory for the session and do not need to fetch data everytime from database */ 

--Update Statement--
		
		UPDATE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_MARKET" NDB 
		SET (REFERENCE_EXPIRY_DT,
			 MODIFIED_TS) = (SELECT
			 ADD_DAYS(EFF_DT,
			 -1),
			GV_CURR_DATE 
			FROM "_SYS_BIC"."IFRS_R1.COMMON_COMP.LAND_COMMON/CA_OB_MKT_VW" LAND 
			WHERE LAND."MARKET_CODE" = NDB."MARKET_CODE" ) 
		WHERE EXISTS (SELECT
			 'X' 
			FROM "_SYS_BIC"."IFRS_R1.COMMON_COMP.LAND_COMMON/CA_OB_MKT_VW" LAND1 
			WHERE LAND1.MARKET_CODE = NDB.MARKET_CODE 
			AND LAND1.EFF_DT < NDB.REFERENCE_EXPIRY_DT); 
		 COMMIT;

		 
--Insert Statement--

		INSERT 
		INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_MARKET" ("MARKET_CODE",
			 "MARKET_NAME",
			 "RELATED_MARKET",
			 "ALT_MARKET_NAME",
			 "REFERENCE_EFFECTIVE_DT",
			 "REFERENCE_EXPIRY_DT",
			 "INSERT_TS" -- on inserting insert_ts is filled with current date
		 ) SELECT
			 LAND."MARKET_CODE",
			 LAND."MARKET_NAME",
			 LAND."RELATED_MARKET",
			 LAND."ALT_MARKET_NAME",
			 LAND.EFF_DT,
			 LAND.EXPY_DT,
			 CURRENT_DATE 
		FROM "_SYS_BIC"."IFRS_R1.COMMON_COMP.LAND_COMMON/CA_OB_MKT_VW" LAND 
		WHERE NOT EXISTS (SELECT
			 NDB."MARKET_CODE" 
			FROM "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_MARKET" NDB 
			WHERE NDB."MARKET_CODE" = LAND."MARKET_CODE" 
			AND NDB."REFERENCE_EFFECTIVE_DT" > LAND."EFF_DT");
		 COMMIT;
 
--Update NDB_TS--

		UPDATE "LAND"."IFRS_R1.LAND::IFRS_OB_MARKET" AS A 
		SET NDB_TS= GV_CURR_DATE 
		WHERE NDB_TS IS NULL 
		AND EXISTS (SELECT
			 'X' 
			FROM "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_MARKET" B 
			WHERE A."MARKET_CODE" = B."MARKET_CODE" 
			AND (B.INSERT_TS = GV_CURR_DATE 
				or B.MODIFIED_TS = GV_CURR_DATE )
			AND B."REFERENCE_EFFECTIVE_DT" = A."EFF_DT");
		 COMMIT;
		 
SELECT CURRENT_TIMESTAMP INTO LV_CUR_UTC FROM DUMMY;

/* Process Control Table:will track the end time*/
	    CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::SP_PROCESS_CONTROL" 
		(
			:LC_EVENTID,					--IP:Event ID
			::CURRENT_OBJECT_NAME,			--IP:Current Object 
			:LV_CUR_UTC,				    --IP:Current Timestamp
			:LC_END_TEXT,					--IP:Start / endtime Text
			CURRENT_USER					--IP:Current User
	    );
	                         

/* STATUS 0: Send the success message to scheduling tool to confirm whether this procedure has been
executed successfully. */
		OT_STATUS := LC_SUCCESS_TEXT; 		 
	 
END;
 