PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_INT_SERV_AGRMNT"
(IN IP_EFF_DT DATE,
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_INT_SERV_AGRMNT
-- Created By      : BC_EY96110  (Arpit)       
-- Create Date     : 03-18-2017
-- Description     : Data Inserted using Calculation View - CA_INT_SERV_AGRMT_VW.
--                   to NDB Table - INT_SERV_AGRMNT Using this stored procedure.
--                   Internet Service Aggrement includes data from landing table INT_SERV_AGRMT.			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
 DECLARE CURSOR C_SRV_AGRMNT FOR
		  SELECT "BAN",
				 "SUBSCRIBER_NO",
				 "SOC",
				 "SOC_SEQ_NO",
				 "SOC_VER_NO",
				 "SERVICE_TYPE",
				 "REFERENCE_EFFECTIVE_DT",
				 "REFERENCE_EXPIRY_DT",
				 "PST_TAX_CATEGORY",
				 "TAX_CATEGORY",
				 "FEATURE_CODE",
				 "SRVC_FTR_SEQ_NO",
				 "FTR_SOC_VER_NO",
				 "REVENUE_CODE",
				 "PRODUCT_TYPE",
				 "EFFECTIVE_DATE_PREV_DAY",
				 "FLAG_EXISTING_RECORD" 
		    FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_INT_SERV_AGRMT"
		         (PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
		ORDER BY "REFERENCE_EFFECTIVE_DT","REFERENCE_EXPIRY_DT";
		
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 
CREATE LOCAL TEMPORARY TABLE #UPDATE_INT_SERV_AGRMT (BAN NVARCHAR(9), SUBSCRIBER_NO NVARCHAR(20), SOC NVARCHAR(9),
SOC_SEQ_NO NVARCHAR(9),SOC_VER_NO INTEGER,SRVC_FTR_SEQ_NO INTEGER,FTR_SOC_VER_NO  INTEGER,
REFERENCE_EFFECTIVE_DT  DATE,PRODUCT_TYPE NVARCHAR(1));

CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (BAN NVARCHAR(9), SUBSCRIBER_NO NVARCHAR(20), SOC NVARCHAR(9),
SOC_SEQ_NO NVARCHAR(9),SOC_VER_NO INTEGER,SRVC_FTR_SEQ_NO INTEGER,FTR_SOC_VER_NO  INTEGER,
REFERENCE_EFFECTIVE_DT  DATE,PRODUCT_TYPE NVARCHAR(1));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------  

FOR CUR_SRV_AGRMNT AS C_SRV_AGRMNT DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
			
   -- Insert record into error table
   	    INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_SERV_AGRMNT_EH"(
   	  			    "BAN",
					"SUBSCRIBER_NO",
					"SOC",
					"SOC_SEQ_NO",
					"SOC_VER_NO",
					"SERVICE_TYPE",
					"REFERENCE_EFFECTIVE_DT",
					"REFERENCE_EXPIRY_DT",
					"PST_TAX_CATEGORY",
					"TAX_CATEGORY",
					"FEATURE_CODE",
					"SRVC_FTR_SEQ_NO",
					"FTR_SOC_VER_NO",
					"REVENUE_CODE",
					"PRODUCT_TYPE",
					"EFFECTIVE_DATE",
					"EXPIRATION_DATE",
					"ERROR_CODE",
					"TECHNICAL_MESSAGE",
					"ERROR_CREATE_TS")
		    VALUES (CUR_SRV_AGRMNT."BAN",
					CUR_SRV_AGRMNT."SUBSCRIBER_NO",
					CUR_SRV_AGRMNT."SOC",
					CUR_SRV_AGRMNT."SOC_SEQ_NO",
					CUR_SRV_AGRMNT."SOC_VER_NO",
					CUR_SRV_AGRMNT."SERVICE_TYPE",
					CUR_SRV_AGRMNT."REFERENCE_EFFECTIVE_DT",
					CUR_SRV_AGRMNT."REFERENCE_EXPIRY_DT",
					CUR_SRV_AGRMNT."PST_TAX_CATEGORY",
					CUR_SRV_AGRMNT."TAX_CATEGORY",
					CUR_SRV_AGRMNT."FEATURE_CODE",
					CUR_SRV_AGRMNT."SRVC_FTR_SEQ_NO",
					CUR_SRV_AGRMNT."FTR_SOC_VER_NO",
					CUR_SRV_AGRMNT."REVENUE_CODE",
					CUR_SRV_AGRMNT."PRODUCT_TYPE",
		   			CUR_SRV_AGRMNT."REFERENCE_EFFECTIVE_DT",
					CUR_SRV_AGRMNT."REFERENCE_EXPIRY_DT",
					::SQL_ERROR_CODE,
		            ::SQL_ERROR_MESSAGE,
		            LV_CUR_UTC);

	  	LV_ERROR_FLAG := 'Y';
    
    END;
   
  END; 
 
-- Processing for Successful Records
   

--   If Record exists in the Target NDB Table
 IF CUR_SRV_AGRMNT.FLAG_EXISTING_RECORD = 'U' THEN

	BEGIN AUTONOMOUS TRANSACTION 
	
--     Update the target NDB table
	   UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_SERV_AGRMNT" NDB 
		  SET NDB.REFERENCE_EXPIRY_DT = CUR_SRV_AGRMNT.EFFECTIVE_DATE_PREV_DAY,
	 		  NDB.MODIFIED_TS = LV_CUR_UTC 
		WHERE CUR_SRV_AGRMNT."BAN"             		  = NDB."BAN" AND 
			  CUR_SRV_AGRMNT."SUBSCRIBER_NO"   		  = NDB."SUBSCRIBER_NO" AND 
			  CUR_SRV_AGRMNT."SOC"            		  = NDB."SOC" AND 
			  CUR_SRV_AGRMNT."SOC_SEQ_NO"             = NDB."SOC_SEQ_NO" AND 
			  CUR_SRV_AGRMNT."SOC_VER_NO"             = NDB."SOC_VER_NO" AND 
			  CUR_SRV_AGRMNT."SRVC_FTR_SEQ_NO"        = NDB."SRVC_FTR_SEQ_NO" AND 
              CUR_SRV_AGRMNT."FTR_SOC_VER_NO"         = NDB."FTR_SOC_VER_NO" AND 
   			  CUR_SRV_AGRMNT."PRODUCT_TYPE"           = NDB."PRODUCT_TYPE" AND 
   			  NDB.REFERENCE_EXPIRY_DT                 = '99991231';
		  
--    Insert the Incoming new record
        INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_SERV_AGRMNT"(
   	  			    "BAN",
					"SUBSCRIBER_NO",
					"SOC",
					"SOC_SEQ_NO",
					"SOC_VER_NO",
					"SERVICE_TYPE",
					"REFERENCE_EFFECTIVE_DT",
					"REFERENCE_EXPIRY_DT",
					"PST_TAX_CATEGORY",
					"TAX_CATEGORY",
					"FEATURE_CODE",
					"SRVC_FTR_SEQ_NO",
					"FTR_SOC_VER_NO",
					"REVENUE_CODE",
					"PRODUCT_TYPE",
					"EFFECTIVE_DATE",
					"EXPIRATION_DATE",
					"INSERT_TS",
                    "MODIFIED_TS")
		    VALUES (CUR_SRV_AGRMNT."BAN",
					CUR_SRV_AGRMNT."SUBSCRIBER_NO",
					CUR_SRV_AGRMNT."SOC",
					CUR_SRV_AGRMNT."SOC_SEQ_NO",
					CUR_SRV_AGRMNT."SOC_VER_NO",
					CUR_SRV_AGRMNT."SERVICE_TYPE",
					CUR_SRV_AGRMNT."REFERENCE_EFFECTIVE_DT",
					CUR_SRV_AGRMNT."REFERENCE_EXPIRY_DT",
					CUR_SRV_AGRMNT."PST_TAX_CATEGORY",
					CUR_SRV_AGRMNT."TAX_CATEGORY",
					CUR_SRV_AGRMNT."FEATURE_CODE",
					CUR_SRV_AGRMNT."SRVC_FTR_SEQ_NO",
					CUR_SRV_AGRMNT."FTR_SOC_VER_NO",
					CUR_SRV_AGRMNT."REVENUE_CODE",
					CUR_SRV_AGRMNT."PRODUCT_TYPE",
		            CUR_SRV_AGRMNT."REFERENCE_EFFECTIVE_DT",
					CUR_SRV_AGRMNT."REFERENCE_EXPIRY_DT",
		            LV_CUR_UTC,
                    LV_CUR_UTC);
                    
    END;
					 
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_INT_SERV_AGRMT
					   ("BAN", 
					    "SUBSCRIBER_NO", 
					   	"SOC",
					   	"SOC_SEQ_NO",
					   	"SOC_VER_NO",
					   	"SRVC_FTR_SEQ_NO",
					   	"FTR_SOC_VER_NO",
					   	"REFERENCE_EFFECTIVE_DT",
					   	"PRODUCT_TYPE") 
			    VALUES (CUR_SRV_AGRMNT."BAN", 
				 		CUR_SRV_AGRMNT."SUBSCRIBER_NO", 
					   	CUR_SRV_AGRMNT."SOC",
					   	CUR_SRV_AGRMNT."SOC_SEQ_NO", 
				 		CUR_SRV_AGRMNT."SOC_VER_NO", 
				 		CUR_SRV_AGRMNT."SRVC_FTR_SEQ_NO", 
				 		CUR_SRV_AGRMNT."FTR_SOC_VER_NO",
					   	CUR_SRV_AGRMNT."REFERENCE_EFFECTIVE_DT", 
				 		CUR_SRV_AGRMNT."PRODUCT_TYPE");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("BAN", 
					    "SUBSCRIBER_NO", 
					   	"SOC",
					   	"SOC_SEQ_NO",
					   	"SOC_VER_NO",
					   	"SRVC_FTR_SEQ_NO",
					   	"FTR_SOC_VER_NO",
					   	"REFERENCE_EFFECTIVE_DT",
					   	"PRODUCT_TYPE") 
			    VALUES (CUR_SRV_AGRMNT."BAN", 
				 		CUR_SRV_AGRMNT."SUBSCRIBER_NO", 
					   	CUR_SRV_AGRMNT."SOC",
					   	CUR_SRV_AGRMNT."SOC_SEQ_NO", 
				 		CUR_SRV_AGRMNT."SOC_VER_NO",
				 		CUR_SRV_AGRMNT."SRVC_FTR_SEQ_NO", 
					   	CUR_SRV_AGRMNT."FTR_SOC_VER_NO",
					   	CUR_SRV_AGRMNT."REFERENCE_EFFECTIVE_DT", 
				 		CUR_SRV_AGRMNT."PRODUCT_TYPE");         
                    	
         ELSEIF CUR_SRV_AGRMNT.FLAG_EXISTING_RECORD = 'I' THEN
    
--    Insert Records into the target NDB table
		       INSERT INTO  "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_SERV_AGRMNT"(
		   	  			    "BAN",
							"SUBSCRIBER_NO",
							"SOC",
							"SOC_SEQ_NO",
							"SOC_VER_NO",
							"SERVICE_TYPE",
							"REFERENCE_EFFECTIVE_DT",
							"REFERENCE_EXPIRY_DT",
							"PST_TAX_CATEGORY",
							"TAX_CATEGORY",
							"FEATURE_CODE",
							"SRVC_FTR_SEQ_NO",
							"FTR_SOC_VER_NO",
							"REVENUE_CODE",
							"PRODUCT_TYPE",
						    "EFFECTIVE_DATE",
						    "EXPIRATION_DATE",
						    "INSERT_TS")
				   VALUES  (CUR_SRV_AGRMNT."BAN",
							CUR_SRV_AGRMNT."SUBSCRIBER_NO",
							CUR_SRV_AGRMNT."SOC",
							CUR_SRV_AGRMNT."SOC_SEQ_NO",
							CUR_SRV_AGRMNT."SOC_VER_NO",
							CUR_SRV_AGRMNT."SERVICE_TYPE",
							CUR_SRV_AGRMNT."REFERENCE_EFFECTIVE_DT",
							CUR_SRV_AGRMNT."REFERENCE_EXPIRY_DT",
							CUR_SRV_AGRMNT."PST_TAX_CATEGORY",
							CUR_SRV_AGRMNT."TAX_CATEGORY",
							CUR_SRV_AGRMNT."FEATURE_CODE",
							CUR_SRV_AGRMNT."SRVC_FTR_SEQ_NO",
							CUR_SRV_AGRMNT."FTR_SOC_VER_NO",
							CUR_SRV_AGRMNT."REVENUE_CODE",
							CUR_SRV_AGRMNT."PRODUCT_TYPE",
		                    CUR_SRV_AGRMNT."REFERENCE_EFFECTIVE_DT",
							CUR_SRV_AGRMNT."REFERENCE_EXPIRY_DT",
							LV_CUR_UTC);
		
					 
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		    INSERT INTO #UPDATE_INT_SERV_AGRMT
					   ("BAN", 
					    "SUBSCRIBER_NO", 
					   	"SOC",
					   	"SOC_SEQ_NO",
					   	"SOC_VER_NO",
					   	"SRVC_FTR_SEQ_NO",
					   	"FTR_SOC_VER_NO",
					   	"REFERENCE_EFFECTIVE_DT",
					   	"PRODUCT_TYPE") 
			    VALUES (CUR_SRV_AGRMNT."BAN", 
				 		CUR_SRV_AGRMNT."SUBSCRIBER_NO", 
					   	CUR_SRV_AGRMNT."SOC",
					   	CUR_SRV_AGRMNT."SOC_SEQ_NO", 
				 		CUR_SRV_AGRMNT."SOC_VER_NO",
				 		CUR_SRV_AGRMNT."SRVC_FTR_SEQ_NO", 
					   	CUR_SRV_AGRMNT."FTR_SOC_VER_NO",
					   	CUR_SRV_AGRMNT."REFERENCE_EFFECTIVE_DT", 
				 		CUR_SRV_AGRMNT."PRODUCT_TYPE");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("BAN", 
					    "SUBSCRIBER_NO", 
					   	"SOC",
					   	"SOC_SEQ_NO",
					   	"SOC_VER_NO",
					   	"SRVC_FTR_SEQ_NO",
					   	"FTR_SOC_VER_NO",
					   	"REFERENCE_EFFECTIVE_DT",
					   	"PRODUCT_TYPE"
					   	)
			    VALUES (CUR_SRV_AGRMNT."BAN", 
				 		CUR_SRV_AGRMNT."SUBSCRIBER_NO", 
					   	CUR_SRV_AGRMNT."SOC",
					   	CUR_SRV_AGRMNT."SOC_SEQ_NO", 
				 		CUR_SRV_AGRMNT."SOC_VER_NO",
				 		CUR_SRV_AGRMNT."SRVC_FTR_SEQ_NO", 
					   	CUR_SRV_AGRMNT."FTR_SOC_VER_NO",
					   	CUR_SRV_AGRMNT."REFERENCE_EFFECTIVE_DT", 
				 		CUR_SRV_AGRMNT."PRODUCT_TYPE");       
    					   	 
           END IF;
    
END FOR;	
				   			    
--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::INT_SERV_AGRMT
UPDATE "LAND"."IFRS_R1.LAND::INT_SERV_AGRMT"  A
  FROM "LAND"."IFRS_R1.LAND::INT_SERV_AGRMT"  A 
 INNER JOIN #UPDATE_INT_SERV_AGRMT B 
    ON A."BAN"              = B."BAN"
   AND A."SUB_NO"           = B."SUBSCRIBER_NO"
   AND A."SOC"              = B."SOC"
   AND A."SOC_SEQ_NO"       = B."SOC_SEQ_NO"
   AND A."SOC_VER_NO"       = B."SOC_VER_NO"
   AND A."SRVC_FTR_SEQ_NO"  = B."SRVC_FTR_SEQ_NO"
   AND A."FTR_SOC_VER_NO"   = B."FTR_SOC_VER_NO"
   AND A."PRODUCT_TYPE"     = B."PRODUCT_TYPE"
   SET NDB_TS               = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_SERV_AGRMNT_EH" A
   FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_SERV_AGRMNT_EH" A 
   INNER JOIN #UPDATE_EH_DELETION B
   ON A."BAN"                     = B."BAN"
   AND A."SUBSCRIBER_NO"          = B."SUBSCRIBER_NO"
   AND A."SOC"                    = B."SOC"
   AND A."SOC_SEQ_NO"             = B."SOC_SEQ_NO"
   AND A."SOC_VER_NO"             = B."SOC_VER_NO"
   AND A."SRVC_FTR_SEQ_NO"        = B."SRVC_FTR_SEQ_NO"
   AND A."FTR_SOC_VER_NO"         = B."FTR_SOC_VER_NO"
   AND A."PRODUCT_TYPE"           = B."PRODUCT_TYPE"
   SET (DELETE_DATE, DELETED)     = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;