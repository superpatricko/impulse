PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_INT_TAP_ACCOUNT_HIST" (IN IP_EFF_DT DATE,
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	AS
BEGIN 
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_INT_CUST
-- Created By      : BC_EZ08920 (Pooja Dahiya)       
-- Create Date     : 07-06-2017
-- Description     : Data Inserted using Calculation View - CA_INT_TAP_ACCOUNT_HIST
--                   to NDB Table - INT_TAP_ACCOUNT_HIST Using this stored procedure.
--                   Internet tap account includes data from landing table INT_TAP_ACCOUNT_HIST.			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 			  NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	      NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		      NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			      TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			      TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					      INTEGER;
DECLARE RECORD_COUNT		      INTEGER;
DECLARE CURRENT_ERROR		      NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG    INTEGER := 0;
DECLARE LV_PREV_RECORD	      NVARCHAR(100) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------   

DECLARE CURSOR INT_TAP_ACCOUNT_HIST FOR
SELECT
	 "ACCOUNT_NUMBER",
	 "CUSTOMER_NUMBER",
	 "METHOD_OF_PAYMENT_RD",
	 "STATE_RD",
	 "CYCLE_NAME",
	 "LANGUAGE_RD",
	 "STATE_DATE",
	 "AUDIT_UPDATE_USER_ID",
	 "CUSTOMER_ACCOUNT_ID",
	 "DIRECT_DEBIT_AUTHORIZ_DATE",
	 "EFF_DT",
	 "REFERENCE_EFFECTIVE_DT",
	 "REFERENCE_EXPIRY_DT",
	 "ODS_SYST_CD",
	 "FLAG_EXISTING_RECORD",
	 "EFFECTIVE_DATE_PREV_DAY" ,
	 "ERROR_STATUS",
	 "ERROR_CODE"
FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_INT_TAP_ACCOUNT_HIST"
(PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
ORDER BY "ACCOUNT_NUMBER","REFERENCE_EFFECTIVE_DT";
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_INT_TAP_ACCOUNT_HIST(ACCOUNT_NUMBER NVARCHAR(20),EFF_DT DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (ACCOUNT_NUMBER NVARCHAR(100),REFERENCE_EFFECTIVE_DT NVARCHAR(100));    

--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------     
FOR CUR_TAP AS INT_TAP_ACCOUNT_HIST DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;

 
	 --  Insert record into error table	 
	    INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_ACCOUNT_HIST_EH"(
                    "ACCOUNT_NUMBER",
	 				"CUSTOMER_NUMBER",
	 				"METHOD_OF_PAYMENT_RD",
	 				"STATE_RD",
	 				"CYCLE_NAME",
	 				"LANGUAGE_RD",
	 				"STATE_DATE",
	 				"AUDIT_UPDATE_USER_ID",
	 				"CUSTOMER_ACCOUNT_ID",
	 				"DIRECT_DEBIT_AUTHORIZ_DATE",
	 				"REFERENCE_EFFECTIVE_DT",
	 				"REFERENCE_EXPIRY_DT",
	 				"ODS_SYST_CD",
					"ERROR_CODE",
				 	"TECHNICAL_MESSAGE",
					"ERROR_CREATE_TS")
		VALUES      (CUR_TAP."ACCOUNT_NUMBER",
	 				CUR_TAP."CUSTOMER_NUMBER",
	 				CUR_TAP."METHOD_OF_PAYMENT_RD",
	 				CUR_TAP."STATE_RD",
	 				CUR_TAP."CYCLE_NAME",
	 				CUR_TAP."LANGUAGE_RD",
	 				CUR_TAP."STATE_DATE",
	 				CUR_TAP."AUDIT_UPDATE_USER_ID",
	 				CUR_TAP."CUSTOMER_ACCOUNT_ID",
	 				CUR_TAP."DIRECT_DEBIT_AUTHORIZ_DATE",
					CUR_TAP."EFF_DT",
					CUR_TAP."REFERENCE_EXPIRY_DT",
					CUR_TAP."ODS_SYST_CD",
					::SQL_ERROR_CODE,
		            ::SQL_ERROR_MESSAGE,
		            LV_CUR_UTC);
		             
	  	LV_ERROR_FLAG := 'Y';    
        LV_LOOP_ERROR_FLAG := 1;
         
    END;
    
    -- FOR CLEARING THE VARIABLES

	IF ((LV_PREV_RECORD IS NULL )OR (CUR_TAP."ACCOUNT_NUMBER" != LV_PREV_RECORD)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "CUR_TAP"."ACCOUNT_NUMBER";
		
    END IF;
    
    --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_TAP.ERROR_STATUS = '1'  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_TAP."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
		
    --  Insert record into error table	 
	    INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_ACCOUNT_HIST_EH"(
                    "ACCOUNT_NUMBER",
	 				"CUSTOMER_NUMBER",
	 				"METHOD_OF_PAYMENT_RD",
	 				"STATE_RD",
	 				"CYCLE_NAME",
	 				"LANGUAGE_RD",
	 				"STATE_DATE",
	 				"AUDIT_UPDATE_USER_ID",
	 				"CUSTOMER_ACCOUNT_ID",
	 				"DIRECT_DEBIT_AUTHORIZ_DATE",
	 				"REFERENCE_EFFECTIVE_DT",
	 				"REFERENCE_EXPIRY_DT",
	 				"ODS_SYST_CD",
					"INSERT_TS",
					"ERROR_CODE",
					"ERROR_CREATE_TS")
		VALUES      (CUR_TAP."ACCOUNT_NUMBER",
	 				CUR_TAP."CUSTOMER_NUMBER",
	 				CUR_TAP."METHOD_OF_PAYMENT_RD",
	 				CUR_TAP."STATE_RD",
	 				CUR_TAP."CYCLE_NAME",
	 				CUR_TAP."LANGUAGE_RD",
	 				CUR_TAP."STATE_DATE",
	 				CUR_TAP."AUDIT_UPDATE_USER_ID",
	 				CUR_TAP."CUSTOMER_ACCOUNT_ID",
	 				CUR_TAP."DIRECT_DEBIT_AUTHORIZ_DATE",
					CUR_TAP."EFF_DT",
					CUR_TAP."REFERENCE_EXPIRY_DT",
					CUR_TAP."ODS_SYST_CD",
					LV_CUR_UTC,
					:CURRENT_ERROR,
		            LV_CUR_UTC);
	
    END FOR ; 
    
    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
    
       ELSE 
         IF CUR_TAP.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
    --  Insert record into error table	 
	    INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_ACCOUNT_HIST_EH"(
                    "ACCOUNT_NUMBER",
	 				"CUSTOMER_NUMBER",
	 				"METHOD_OF_PAYMENT_RD",
	 				"STATE_RD",
	 				"CYCLE_NAME",
	 				"LANGUAGE_RD",
	 				"STATE_DATE",
	 				"AUDIT_UPDATE_USER_ID",
	 				"CUSTOMER_ACCOUNT_ID",
	 				"DIRECT_DEBIT_AUTHORIZ_DATE",
	 				"REFERENCE_EFFECTIVE_DT",
	 				"REFERENCE_EXPIRY_DT",
	 				"ODS_SYST_CD",
					"INSERT_TS",
					"ERROR_CODE",
					"ERROR_CREATE_TS")
		VALUES      (CUR_TAP."ACCOUNT_NUMBER",
	 				CUR_TAP."CUSTOMER_NUMBER",
	 				CUR_TAP."METHOD_OF_PAYMENT_RD",
	 				CUR_TAP."STATE_RD",
	 				CUR_TAP."CYCLE_NAME",
	 				CUR_TAP."LANGUAGE_RD",
	 				CUR_TAP."STATE_DATE",
	 				CUR_TAP."AUDIT_UPDATE_USER_ID",
	 				CUR_TAP."CUSTOMER_ACCOUNT_ID",
	 				CUR_TAP."DIRECT_DEBIT_AUTHORIZ_DATE",
					CUR_TAP."EFF_DT",
					CUR_TAP."REFERENCE_EXPIRY_DT",
					CUR_TAP."ODS_SYST_CD",
					LV_CUR_UTC,
					'PREVIOUS VERSION IN ERROR',
		            LV_CUR_UTC);
	
--  Processing for Successful Records   
--  If Record exists in the Target NDB Table
   ELSE IF CUR_TAP.FLAG_EXISTING_RECORD = 'U' THEN
    
       BEGIN AUTONOMOUS TRANSACTION 

	--     Update the target NDB table
	UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_ACCOUNT_HIST" NDB 
	   SET  NDB.REFERENCE_EXPIRY_DT     = CUR_TAP.EFFECTIVE_DATE_PREV_DAY,
		 	NDB.MODIFIED_TS             = LV_CUR_UTC 
     WHERE CUR_TAP."ACCOUNT_NUMBER"     = NDB."ACCOUNT_NUMBER" 
	   AND NDB.REFERENCE_EXPIRY_DT      = '99991231';	
			   
			    --     Insert the Incoming new record
	INSERT INTO  "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_ACCOUNT_HIST"(
		                    "ACCOUNT_NUMBER",
	 						"CUSTOMER_NUMBER",
	 						"METHOD_OF_PAYMENT_RD",
	 						"STATE_RD",
	 						"CYCLE_NAME",
	 						"LANGUAGE_RD",
	 						"STATE_DATE",
	 						"AUDIT_UPDATE_USER_ID",
	 						"CUSTOMER_ACCOUNT_ID",
	 						"DIRECT_DEBIT_AUTHORIZ_DATE",
	 						"REFERENCE_EFFECTIVE_DT",
	 						"REFERENCE_EXPIRY_DT",
	 						"ODS_SYST_CD",
							"INSERT_TS")
				     VALUES (CUR_TAP."ACCOUNT_NUMBER",
	 						CUR_TAP."CUSTOMER_NUMBER",
	 						CUR_TAP."METHOD_OF_PAYMENT_RD",
	 						CUR_TAP."STATE_RD",
	 						CUR_TAP."CYCLE_NAME",
	 						CUR_TAP."LANGUAGE_RD",
	 						CUR_TAP."STATE_DATE",
	 						CUR_TAP."AUDIT_UPDATE_USER_ID",
	 						CUR_TAP."CUSTOMER_ACCOUNT_ID",
	 						CUR_TAP."DIRECT_DEBIT_AUTHORIZ_DATE",
	 						CUR_TAP."EFF_DT",
	 						CUR_TAP."REFERENCE_EXPIRY_DT",
	 						CUR_TAP."ODS_SYST_CD",
		                    LV_CUR_UTC);
       END;
				   
			  
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_INT_TAP_ACCOUNT_HIST
					   ("ACCOUNT_NUMBER",  
					    "EFF_DT") 
			    VALUES (CUR_TAP."ACCOUNT_NUMBER", 
					    CUR_TAP."EFF_DT");
					     		   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("ACCOUNT_NUMBER",  
					    "REFERENCE_EFFECTIVE_DT") 
			    VALUES (CUR_TAP."ACCOUNT_NUMBER",  
					    CUR_TAP."REFERENCE_EFFECTIVE_DT");
					   	
		  ELSEIF CUR_TAP.FLAG_EXISTING_RECORD = 'I' THEN
		 
		 	 BEGIN AUTONOMOUS TRANSACTION 
		  
     	 --     Insert Records into the target NDB table
		        INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_ACCOUNT_HIST"(
		                    "ACCOUNT_NUMBER",
	 						"CUSTOMER_NUMBER",
	 						"METHOD_OF_PAYMENT_RD",
	 						"STATE_RD",
	 						"CYCLE_NAME",
	 						"LANGUAGE_RD",
	 						"STATE_DATE",
	 						"AUDIT_UPDATE_USER_ID",
	 						"CUSTOMER_ACCOUNT_ID",
	 						"DIRECT_DEBIT_AUTHORIZ_DATE",
	 						"REFERENCE_EFFECTIVE_DT",
	 						"REFERENCE_EXPIRY_DT",
	 						"ODS_SYST_CD",
							"INSERT_TS")
				     VALUES(CUR_TAP."ACCOUNT_NUMBER",
	 						CUR_TAP."CUSTOMER_NUMBER",
	 						CUR_TAP."METHOD_OF_PAYMENT_RD",
	 						CUR_TAP."STATE_RD",
	 						CUR_TAP."CYCLE_NAME",
	 						CUR_TAP."LANGUAGE_RD",
	 						CUR_TAP."STATE_DATE",
	 						CUR_TAP."AUDIT_UPDATE_USER_ID",
	 						CUR_TAP."CUSTOMER_ACCOUNT_ID",
	 						CUR_TAP."DIRECT_DEBIT_AUTHORIZ_DATE",
	 						CUR_TAP."REFERENCE_EFFECTIVE_DT",
	 						CUR_TAP."REFERENCE_EXPIRY_DT",
	 						CUR_TAP."ODS_SYST_CD",
		                    LV_CUR_UTC);
		          
		        END ; -- 	 END AUTONOMOUS TRANSACTION 
		                     
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_INT_TAP_ACCOUNT_HIST
					   ("ACCOUNT_NUMBER",  
					    "EFF_DT") 
			    VALUES (CUR_TAP."ACCOUNT_NUMBER", 
					    CUR_TAP."EFF_DT");
					     		   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("ACCOUNT_NUMBER",  
					    "REFERENCE_EFFECTIVE_DT") 
			    VALUES (CUR_TAP."ACCOUNT_NUMBER",  
					    CUR_TAP."REFERENCE_EFFECTIVE_DT");
					   	
     END IF;   
    END IF;
   END IF;
  END IF; 
END FOR;
    
--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::IFRS_OB_CHRG_INFO
UPDATE "LAND"."IFRS_R1.LAND::INT_TAP_ACCOUNT_HIST" A
  FROM "LAND"."IFRS_R1.LAND::INT_TAP_ACCOUNT_HIST" A
 INNER JOIN #UPDATE_INT_TAP_ACCOUNT_HIST B
    ON A."ACCOUNT_NUMBER"    = B."ACCOUNT_NUMBER"
   AND A."EFF_DT"            = B."EFF_DT"
   SET NDB_TS                = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_ACCOUNT_HIST_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_ACCOUNT_HIST_EH" A
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."ACCOUNT_NUMBER"         = B."ACCOUNT_NUMBER"
   AND A."REFERENCE_EFFECTIVE_DT" = B."REFERENCE_EFFECTIVE_DT"
   SET (DELETE_DATE, DELETED)     = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
	
END;
