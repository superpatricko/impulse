PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_ORDER_SOC"
(OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN 
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_ORDER_SOC
-- Created By      : BC_EY94118  (Prakhar)       
-- Create Date     : 03-28-2017
-- Description     : Data Inserted using Calculation View - CA_ORDER_SOC
--                   to NDB Table - INT_ORDER Using this stored procedure.			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
 DECLARE CURSOR C_SOC FOR
		 SELECT
			   "ALTN_CONTR_NUM",
			   "PRM_CONTR_CUST",
			   "BO_CODE",
			   "AO_CODE",
			   "OTC_AO_CODE",
			   "SOC",
			   "ERROR_STATUS",
			   "ERROR_CODE" 
		  FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_ORDER_SOC";  

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (ALTN_CONTR_NUM NVARCHAR(35), PRM_CONTR_CUST NVARCHAR(35),
BO_CODE NVARCHAR(40), AO_CODE NVARCHAR(50), OTC_AO_CODE NVARCHAR(20));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------  

FOR CUR_SOC AS C_SOC DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
	--  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
		
		
		END;		
	   -- Insert record into error table
	   	    INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_ORDER_EH"(
	   	  			    "ALTN_CONTR_NUM",
					    "PRM_CONTR_CUST",
					    "BO_CODE",
					    "AO_CODE",
					    "OTC_AO_CODE",
					    "SOC",
					    "ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
			   VALUES (	CUR_SOC."ALTN_CONTR_NUM",
						CUR_SOC."PRM_CONTR_CUST",
						CUR_SOC."BO_CODE",
						CUR_SOC."AO_CODE",
						CUR_SOC."OTC_AO_CODE",
						CUR_SOC."SOC",
						::SQL_ERROR_CODE,
			            ::SQL_ERROR_MESSAGE,
			            LV_CUR_UTC);
	
		  	LV_ERROR_FLAG := 'Y';
	    
     END;

--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_SOC.ERROR_STATUS = '1' THEN
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_SOC."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		 -- Insert into the Error Table
		    INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_ORDER_EH"(
	   	  			    "ALTN_CONTR_NUM",
					    "PRM_CONTR_CUST",
					    "BO_CODE",
					    "AO_CODE",
					    "OTC_AO_CODE",
					    "SOC",
					    "ERROR_CODE",
						"ERROR_CREATE_TS")
			   VALUES (	CUR_SOC."ALTN_CONTR_NUM",
						CUR_SOC."PRM_CONTR_CUST",
						CUR_SOC."BO_CODE",
						CUR_SOC."AO_CODE",
						CUR_SOC."OTC_AO_CODE",
						CUR_SOC."SOC",
						:CURRENT_ERROR,
					    LV_CUR_UTC);
					
	      END FOR;

-- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';

-- Processing for Successful Records

   ELSEIF CUR_SOC.ERROR_STATUS = '0' THEN
   
    --     Update the target NDB table   	
           UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_ORDER" ORD
              SET ORD.SOC         = CUR_SOC.SOC
            WHERE(ORD.BO_CODE     = CUR_SOC.BO_CODE
               OR ORD.AO_CODE     = CUR_SOC.AO_CODE
               OR ORD.OTC_AO_CODE = CUR_SOC.OTC_AO_CODE);
               
               
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("PRM_CONTR_CUST", 
					    "ALTN_CONTR_NUM", 
					   	"BO_CODE",
					   	"AO_CODE",
					   	"OTC_AO_CODE") 
			    VALUES (CUR_SOC."PRM_CONTR_CUST", 
					    CUR_SOC."ALTN_CONTR_NUM", 
					   	CUR_SOC."BO_CODE",
					   	CUR_SOC."AO_CODE",
					   	CUR_SOC."OTC_AO_CODE");
					   	 
    END IF;
    
END FOR;               
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_ORDER_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_ORDER_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."BO_CODE"            = B."BO_CODE"
   AND A."AO_CODE"            = B."AO_CODE"
   AND A."OTC_AO_CODE"        = B."OTC_AO_CODE"
   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;		