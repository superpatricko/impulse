PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_INT_PP_RC_RT" (IN IP_EFF_DT DATE,
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	AS 
BEGIN
--------- -----------------------------------------------------------------------------------------
-- Procedure Title : SP_INT_PP_RC_RT
-- Created By      : BC_EY94106 (Rohit)       
-- Create Date     : 05-17-2017
-- Description     : Data Inserted using Calculation View - CA_INT_PP_RC_RT
--                   to NDB Table - INT_PP_RC_RT Using this stored procedure.
--                   INT PP_RC_RT includes data from table INT_PP_RC_RT.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG    INTEGER := 0;
DECLARE LV_PREV_RECORD	      NVARCHAR(100) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
  
 DECLARE CURSOR INT_PP_RC_RT FOR
 SELECT
	 "EFFECTIVE_DATE",
	 "ODS_SYST_CD",
	 "EXPIRATION_DATE",
	 "FEAT_CD",
	 "RT",
	 "SOC",
	 "SUSPNSN_AMT",
	 "TIER_LEV_CD",
	 "EFF_DT",
	 "REFERENCE_EFFECTIVE_DT",
	 "REFERENCE_EXPIRY_DT",
	 "FLAG_EXISTING_RECORD",
	 "EFFECTIVE_DATE_PREV_DAY" ,
	 "ERROR_STATUS",
	 "ERROR_CODE",
	 "CONCAT_PK"
FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_INT_PP_RC_RT"
(PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
ORDER BY
EFFECTIVE_DATE,FEAT_CD,SOC,TIER_LEV_CD,REFERENCE_EFFECTIVE_DT;

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_INT_PP_RC_RT (EFFECTIVE_DATE DATE, FEAT_CD NVARCHAR(6),SOC NVARCHAR(9), TIER_LEV_CD INTEGER, EFF_DT DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (EFFECTIVE_DATE NVARCHAR(100), FEAT_CD NVARCHAR(100),SOC NVARCHAR(100), TIER_LEV_CD NVARCHAR(100), REFERENCE_EFFECTIVE_DT NVARCHAR(100));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------

FOR RC_RT AS INT_PP_RC_RT DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
	
		 -- Insert record into error table
		 INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_RC_RT_EH"(
	 					"EFFECTIVE_DATE",
	 					"ODS_SYST_CD",
	 					"EXPIRATION_DATE",
	 					"FEAT_CD",
	 					"RT",
	 					"SOC",
	 					"SUSPNSN_AMT",
	 					"TIER_LEV_CD",
	 					"REFERENCE_EFFECTIVE_DT",
	 					"REFERENCE_EXPIRY_DT",
						"ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				 VALUES(RC_RT."EFFECTIVE_DATE",
	 					RC_RT."ODS_SYST_CD",
	 					RC_RT."EXPIRATION_DATE",
	 					RC_RT."FEAT_CD",
	 					RC_RT."RT",
	 					RC_RT."SOC",
	 					RC_RT."SUSPNSN_AMT",
	 					RC_RT."TIER_LEV_CD",
	 					RC_RT."EFF_DT",
	 					RC_RT."REFERENCE_EXPIRY_DT",						
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
					    LV_CUR_UTC);
					    
		  	   LV_ERROR_FLAG := 'Y';
	           LV_LOOP_ERROR_FLAG := 1;
	  END;       
    
        -- FOR CLEARING THE VARIABLES

	IF ((LV_PREV_RECORD IS NULL )OR (RC_RT."CONCAT_PK" != LV_PREV_RECORD)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "RC_RT"."CONCAT_PK";
		
    END IF;
    
    --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF RC_RT.ERROR_STATUS = '1'  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(RC_RT."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
     INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_RC_RT_EH"(
	 					"EFFECTIVE_DATE",
	 					"ODS_SYST_CD",
	 					"EXPIRATION_DATE",
	 					"FEAT_CD",
	 					"RT",
	 					"SOC",
	 					"SUSPNSN_AMT",
	 					"TIER_LEV_CD",
	 					"REFERENCE_EFFECTIVE_DT",
	 					"REFERENCE_EXPIRY_DT",
						"INSERT_TS",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
				 VALUES(RC_RT."EFFECTIVE_DATE",
	 					RC_RT."ODS_SYST_CD",
	 					RC_RT."EXPIRATION_DATE",
	 					RC_RT."FEAT_CD",
	 					RC_RT."RT",
	 					RC_RT."SOC",
	 					RC_RT."SUSPNSN_AMT",
	 					RC_RT."TIER_LEV_CD",
	 					RC_RT."EFF_DT",
	 					RC_RT."REFERENCE_EXPIRY_DT",						
						LV_CUR_UTC,
						:CURRENT_ERROR,
					    LV_CUR_UTC);
					
       END FOR;
    
    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
    
   ELSE 
         IF RC_RT.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
	     INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_RC_RT_EH"(
	 					"EFFECTIVE_DATE",
	 					"ODS_SYST_CD",
	 					"EXPIRATION_DATE",
	 					"FEAT_CD",
	 					"RT",
	 					"SOC",
	 					"SUSPNSN_AMT",
	 					"TIER_LEV_CD",
	 					"REFERENCE_EFFECTIVE_DT",
	 					"REFERENCE_EXPIRY_DT",
						"INSERT_TS",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
				 VALUES(RC_RT."EFFECTIVE_DATE",
	 					RC_RT."ODS_SYST_CD",
	 					RC_RT."EXPIRATION_DATE",
	 					RC_RT."FEAT_CD",
	 					RC_RT."RT",
	 					RC_RT."SOC",
	 					RC_RT."SUSPNSN_AMT",
	 					RC_RT."TIER_LEV_CD",
	 					RC_RT."EFF_DT",
	 					RC_RT."REFERENCE_EXPIRY_DT",						
						LV_CUR_UTC,
						'PREVIOUS VERSION IN ERROR',
					    LV_CUR_UTC);
	   
        -- Processing for Successful Records
    --   If Record exists in the Target NDB Table
    ELSE IF RC_RT.FLAG_EXISTING_RECORD = 'U' THEN
     
     	BEGIN AUTONOMOUS TRANSACTION  
     
          --     Update the target NDB table
	          UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_RC_RT" NDB 
	   		     SET  NDB.REFERENCE_EXPIRY_DT        = RC_RT.EFFECTIVE_DATE_PREV_DAY,
	 		          NDB."MODIFIED_TS"              = LV_CUR_UTC
			   WHERE  NDB.EFFECTIVE_DATE         	 = RC_RT.EFFECTIVE_DATE
			   AND    NDB.FEAT_CD                  	 = RC_RT.FEAT_CD
			   AND    NDB.SOC                        = RC_RT.SOC
			   AND    NDB.TIER_LEV_CD                = RC_RT.TIER_LEV_CD
			   AND    NDB.REFERENCE_EXPIRY_DT        = '99991231';
			   
--    Insert the Incoming new record			   
		 INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_RC_RT"(
	 					"EFFECTIVE_DATE",
	 					"ODS_SYST_CD",
	 					"EXPIRATION_DATE",
	 					"FEAT_CD",
	 					"RT",
	 					"SOC",
	 					"SUSPNSN_AMT",
	 					"TIER_LEV_CD",
	 					"REFERENCE_EFFECTIVE_DT",
	 					"REFERENCE_EXPIRY_DT",
	 					"INSERT_TS"
	 					)
				 VALUES(RC_RT."EFFECTIVE_DATE",
	 					RC_RT."ODS_SYST_CD",
	 					RC_RT."EXPIRATION_DATE",
	 					RC_RT."FEAT_CD",
	 					RC_RT."RT",
	 					RC_RT."SOC",
	 					RC_RT."SUSPNSN_AMT",
	 					RC_RT."TIER_LEV_CD",
	 					RC_RT."EFF_DT",
	 					RC_RT."REFERENCE_EXPIRY_DT",
					    LV_CUR_UTC);
					    
  END;
  
 --         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	

			   INSERT INTO #UPDATE_INT_PP_RC_RT
						   ("EFFECTIVE_DATE",
						    "FEAT_CD",
						    "SOC",
						    "TIER_LEV_CD",
						    "EFF_DT")
				    VALUES (RC_RT."EFFECTIVE_DATE",
						    RC_RT."FEAT_CD",
						    RC_RT."SOC",
						    RC_RT."TIER_LEV_CD",
						    RC_RT."EFF_DT");

						   					   	    		
			   INSERT INTO #UPDATE_EH_DELETION
						   ("EFFECTIVE_DATE",
						    "FEAT_CD",
						    "SOC",
						    "TIER_LEV_CD",
						    "REFERENCE_EFFECTIVE_DT")
				    VALUES (RC_RT."EFFECTIVE_DATE",
						    RC_RT."FEAT_CD",
						    RC_RT."SOC",
						    RC_RT."TIER_LEV_CD",
						    RC_RT."EFF_DT");

    ELSEIF RC_RT.FLAG_EXISTING_RECORD = 'I' THEN

      BEGIN AUTONOMOUS TRANSACTION  

--    Insert the Incoming new record			
		 INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_RC_RT"(
	 					"EFFECTIVE_DATE",
	 					"ODS_SYST_CD",
	 					"EXPIRATION_DATE",
	 					"FEAT_CD",
	 					"RT",
	 					"SOC",
	 					"SUSPNSN_AMT",
	 					"TIER_LEV_CD",
	 					"REFERENCE_EFFECTIVE_DT",
	 					"REFERENCE_EXPIRY_DT",
	 					"INSERT_TS")
				 VALUES(RC_RT."EFFECTIVE_DATE",
	 					RC_RT."ODS_SYST_CD",
	 					RC_RT."EXPIRATION_DATE",
	 					RC_RT."FEAT_CD",
	 					RC_RT."RT",
	 					RC_RT."SOC",
	 					RC_RT."SUSPNSN_AMT",
	 					RC_RT."TIER_LEV_CD",
	 					RC_RT."REFERENCE_EFFECTIVE_DT",
	 					RC_RT."REFERENCE_EXPIRY_DT",
					    LV_CUR_UTC);
	 
	  END;  --    END AUTONOMOUS TRANSACTION  
	 							
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	

			   INSERT INTO #UPDATE_INT_PP_RC_RT
						   ("EFFECTIVE_DATE",
						    "FEAT_CD",
						    "SOC",
						    "TIER_LEV_CD",
						    "EFF_DT")
				    VALUES (RC_RT."EFFECTIVE_DATE",
						    RC_RT."FEAT_CD",
						    RC_RT."SOC",
						    RC_RT."TIER_LEV_CD",
						    RC_RT."EFF_DT");
						    

						   					   	    		
			   INSERT INTO #UPDATE_EH_DELETION
						   ("EFFECTIVE_DATE",
						    "FEAT_CD",
						    "SOC",
						    "TIER_LEV_CD",
						    "REFERENCE_EFFECTIVE_DT")
				    VALUES (RC_RT."EFFECTIVE_DATE",
						    RC_RT."FEAT_CD",
						    RC_RT."SOC",
						    RC_RT."TIER_LEV_CD",
						    RC_RT."EFF_DT");

	 END IF;   
    END IF;
   END IF;
  END IF; 
END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::INT_PP_RC_RT
UPDATE "LAND"."IFRS_R1.LAND::INT_PP_RC_RT" A
  FROM "LAND"."IFRS_R1.LAND::INT_PP_RC_RT" A 
 INNER JOIN #UPDATE_INT_PP_RC_RT B 
    ON A."EFFECTIVE_DATE"  = B."EFFECTIVE_DATE"
    AND A."FEAT_CD"        = B."FEAT_CD"
    AND A."SOC"            = B."SOC"
    AND A."TIER_LEV_CD"    = B."TIER_LEV_CD" 
    AND A.EFF_DT           = B.EFF_DT
    SET NDB_TS             = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_RC_RT_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_RC_RT_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."EFFECTIVE_DATE"  	     = B."EFFECTIVE_DATE"
    AND A."FEAT_CD"              = B."FEAT_CD"
    AND A."SOC"                  = B."SOC"
    AND A."TIER_LEV_CD"          = B."TIER_LEV_CD"
    AND A.REFERENCE_EFFECTIVE_DT = B.REFERENCE_EFFECTIVE_DT 
   SET (DELETE_DATE, DELETED)    = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

       OP_STATUS := LC_ERROR_TEXT;
			
    ELSE
 
  	   OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;					   	

 