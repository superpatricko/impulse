PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_INT_TAP_PROMO_SUB_HIST" (IN  IP_EFF_DT DATE,
 OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name> 
	 AS
BEGIN 
----------------------------------------------------------------------
-- Procedure Title : SP_INT_TAP_PROMO_SUB_HIST
-- Created By      : BC_EZ08920 (Pooja Dahiya)       
-- Create Date     : 07-07-2017
-- Description     : Data Inserted using Calculation View - CA_INT_TAP_PROMO_SUB_HIST
--                   To NDB Table - CA_INT_TAP_PROMO_SUB_HIST Using this stored procedure.
--                   CA_INT_TAP_PROMO_SUB_HIST includes data from table LANDING IFRS_INT_TAP_PROMO_SUB_HIST	
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------END;
DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG    INTEGER := 0;
DECLARE LV_PREV_RECORD	      NVARCHAR(100) := NULL;



--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------   
DECLARE CURSOR INT_TAP_PROMO_SUB_HIST FOR
		SELECT	"EFFECTIVE_DATE_PREV_DAY",
				"PRODUCT_SUBSCRIPTION_ID",
	 			"PROMOTION_SUBSCRIPTION_ID",
	 			"ODS_SYST_CD",
	 			"ACCOUNT_NUMBER",
	 			"START_DATE",
	 			"END_DATE",
	 			"PROMOTION_CODE",
	 			"AUDIT_UPDATE_USER_ID",
	 			"APPLY_DATE",
	 			"TERMINATION_DATE",
	 			"PROD_PROMO_STS_CD",
	 			"EFF_DT",
	 			"REFERENCE_EFFECTIVE_DT",
			 	"REFERENCE_EXPIRY_DT",
				"FLAG_EXISTING_RECORD",
				"ERROR_CODE",
				"ERROR_STATUS",
				"CONCAT_PK"
		   FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_INT_TAP_PROMO_SUB_HIST"
				(PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
		ORDER BY  "PROMOTION_SUBSCRIPTION_ID","PRODUCT_SUBSCRIPTION_ID","REFERENCE_EFFECTIVE_DT";	  	     
			
----------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-----------------------------------------------------------------------------------------------------

CREATE LOCAL TEMPORARY TABLE #UPDATE_IFRS_TAP_PROMO_SUB_HIST("PROMOTION_SUBSCRIPTION_ID" NVARCHAR(16),"PRODUCT_SUBSCRIPTION_ID" NVARCHAR(16),"EFF_DT" DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION ("PROMOTION_SUBSCRIPTION_ID" NVARCHAR(100),"PRODUCT_SUBSCRIPTION_ID" NVARCHAR(100),"REFERENCE_EFFECTIVE_DT" NVARCHAR(100)); 
 
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 
FOR TAP_PROMO AS INT_TAP_PROMO_SUB_HIST DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
 	  
 	   --  Insert record into error table	 
   INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_PROMO_SUB_HIST_EH"
	 		   ("PRODUCT_SUBSCRIPTION_ID",
	 			"PROMOTION_SUBSCRIPTION_ID",
	 			"ODS_SYST_CD",
	 			"ACCOUNT_NUMBER",
	 			"START_DATE",
	 			"END_DATE",
	 			"PROMOTION_CODE",
	 			"AUDIT_UPDATE_USER_ID",
	 			"APPLY_DATE",
	 			"TERMINATION_DATE",
	 			"PROD_PROMO_STS_CD",
	 			"INSERT_TS",
	 			"REFERENCE_EFFECTIVE_DT",
			 	"REFERENCE_EXPIRY_DT",
			 	"ERROR_CODE",
				"TECHNICAL_MESSAGE",
				"ERROR_CREATE_TS")
		VALUES (TAP_PROMO."PRODUCT_SUBSCRIPTION_ID",
	 			TAP_PROMO."PROMOTION_SUBSCRIPTION_ID",
	 			TAP_PROMO."ODS_SYST_CD",
	 			TAP_PROMO."ACCOUNT_NUMBER",
	 			TAP_PROMO."START_DATE",
	 			TAP_PROMO."END_DATE",
	 			TAP_PROMO."PROMOTION_CODE",
	 			TAP_PROMO."AUDIT_UPDATE_USER_ID",
	 			TAP_PROMO."APPLY_DATE",
	 			TAP_PROMO."TERMINATION_DATE",
	 			TAP_PROMO."PROD_PROMO_STS_CD",
	 			LV_CUR_UTC,
	 			TAP_PROMO."EFF_DT",
			 	TAP_PROMO."REFERENCE_EXPIRY_DT",
	 			::SQL_ERROR_CODE,
		        ::SQL_ERROR_MESSAGE,
		        LV_CUR_UTC);
		             
		    LV_ERROR_FLAG := 'Y';
	       LV_LOOP_ERROR_FLAG := 1;   
         
    END;
	    
-- FOR CLEARING THE VARIABLES

	IF ((LV_PREV_RECORD IS NULL )OR (TAP_PROMO."CONCAT_PK" != LV_PREV_RECORD)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "TAP_PROMO"."CONCAT_PK";
		
    END IF;
	    
	        --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF TAP_PROMO.ERROR_STATUS = '1'  THEN
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(TAP_PROMO."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
	    --  Insert record into error table	 
   INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_PROMO_SUB_HIST_EH"
	 		   ("PRODUCT_SUBSCRIPTION_ID",
	 			"PROMOTION_SUBSCRIPTION_ID",
	 			"ODS_SYST_CD",
	 			"ACCOUNT_NUMBER",
	 			"START_DATE",
	 			"END_DATE",
	 			"PROMOTION_CODE",
	 			"AUDIT_UPDATE_USER_ID",
	 			"APPLY_DATE",
	 			"TERMINATION_DATE",
	 			"PROD_PROMO_STS_CD",
	 			"INSERT_TS",
	 			"REFERENCE_EFFECTIVE_DT",
			 	"REFERENCE_EXPIRY_DT",
			 	"ERROR_CODE",
				"ERROR_CREATE_TS")
		VALUES (TAP_PROMO."PRODUCT_SUBSCRIPTION_ID",
	 			TAP_PROMO."PROMOTION_SUBSCRIPTION_ID",
	 			TAP_PROMO."ODS_SYST_CD",
	 			TAP_PROMO."ACCOUNT_NUMBER",
	 			TAP_PROMO."START_DATE",
	 			TAP_PROMO."END_DATE",
	 			TAP_PROMO."PROMOTION_CODE",
	 			TAP_PROMO."AUDIT_UPDATE_USER_ID",
	 			TAP_PROMO."APPLY_DATE",
	 			TAP_PROMO."TERMINATION_DATE",
	 			TAP_PROMO."PROD_PROMO_STS_CD",
	 			LV_CUR_UTC,
	 			TAP_PROMO."EFF_DT",
			 	TAP_PROMO."REFERENCE_EXPIRY_DT",
	 			:CURRENT_ERROR,
		        LV_CUR_UTC);
		
	    END FOR ;
	    
	    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
    
   ELSE 
         IF TAP_PROMO.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
	       --  Insert record into error table	 
   INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_PROMO_SUB_HIST_EH"
	 		   ("PRODUCT_SUBSCRIPTION_ID",
	 			"PROMOTION_SUBSCRIPTION_ID",
	 			"ODS_SYST_CD",
	 			"ACCOUNT_NUMBER",
	 			"START_DATE",
	 			"END_DATE",
	 			"PROMOTION_CODE",
	 			"AUDIT_UPDATE_USER_ID",
	 			"APPLY_DATE",
	 			"TERMINATION_DATE",
	 			"PROD_PROMO_STS_CD",
	 			"INSERT_TS",
	 			"REFERENCE_EFFECTIVE_DT",
			 	"REFERENCE_EXPIRY_DT",
			 	"ERROR_CODE",
				"ERROR_CREATE_TS")
		VALUES (TAP_PROMO."PRODUCT_SUBSCRIPTION_ID",
	 			TAP_PROMO."PROMOTION_SUBSCRIPTION_ID",
	 			TAP_PROMO."ODS_SYST_CD",
	 			TAP_PROMO."ACCOUNT_NUMBER",
	 			TAP_PROMO."START_DATE",
	 			TAP_PROMO."END_DATE",
	 			TAP_PROMO."PROMOTION_CODE",
	 			TAP_PROMO."AUDIT_UPDATE_USER_ID",
	 			TAP_PROMO."APPLY_DATE",
	 			TAP_PROMO."TERMINATION_DATE",
	 			TAP_PROMO."PROD_PROMO_STS_CD",
	 			LV_CUR_UTC,
	 			TAP_PROMO."EFF_DT",
			 	TAP_PROMO."REFERENCE_EXPIRY_DT",
	 			'PREVIOUS VERSION IN ERROR',
		        LV_CUR_UTC);
	    
--  Processing for Successful Records   
--  If Record exists in the Target NDB Table
   ELSE IF TAP_PROMO.FLAG_EXISTING_RECORD = 'U' THEN
    
       BEGIN AUTONOMOUS TRANSACTION 

	--     Update the target NDB table
		   UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_PROMO_SUB_HIST" NDB 
			  SET  NDB.REFERENCE_EXPIRY_DT                 = TAP_PROMO.EFFECTIVE_DATE_PREV_DAY,
		 		   NDB.MODIFIED_TS                         = LV_CUR_UTC 
        	 WHERE TAP_PROMO."PRODUCT_SUBSCRIPTION_ID"     = NDB."PRODUCT_SUBSCRIPTION_ID" 
			   AND TAP_PROMO."PROMOTION_SUBSCRIPTION_ID"   = NDB."PROMOTION_SUBSCRIPTION_ID"
			   AND NDB.REFERENCE_EXPIRY_DT      		   = '99991231';	
				    			
			 	
				 --     Insert the Incoming new record
	   INSERT INTO  "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_PROMO_SUB_HIST"
		        ("PRODUCT_SUBSCRIPTION_ID",
	 			"PROMOTION_SUBSCRIPTION_ID",
	 			"ODS_SYST_CD",
	 			"ACCOUNT_NUMBER",
	 			"START_DATE",
	 			"END_DATE",
	 			"PROMOTION_CODE",
	 			"AUDIT_UPDATE_USER_ID",
	 			"APPLY_DATE",
	 			"TERMINATION_DATE",
	 			"PROD_PROMO_STS_CD",
	 			"REFERENCE_EFFECTIVE_DT",
			 	"REFERENCE_EXPIRY_DT",
	 			"INSERT_TS")
		 VALUES ( TAP_PROMO."PRODUCT_SUBSCRIPTION_ID",
	 			TAP_PROMO."PROMOTION_SUBSCRIPTION_ID",
	 			TAP_PROMO."ODS_SYST_CD",
	 			TAP_PROMO."ACCOUNT_NUMBER",
	 			TAP_PROMO."START_DATE",
	 			TAP_PROMO."END_DATE",
	 			TAP_PROMO."PROMOTION_CODE",
	 			TAP_PROMO."AUDIT_UPDATE_USER_ID",
	 			TAP_PROMO."APPLY_DATE",
	 			TAP_PROMO."TERMINATION_DATE",
	 			TAP_PROMO."PROD_PROMO_STS_CD",
	 			TAP_PROMO."EFF_DT",
			 	TAP_PROMO."REFERENCE_EXPIRY_DT",
		        LV_CUR_UTC);
       END;
  
	  
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_IFRS_TAP_PROMO_SUB_HIST
					   ("PRODUCT_SUBSCRIPTION_ID",
	 					"PROMOTION_SUBSCRIPTION_ID",
					    "EFF_DT") 
			    VALUES (TAP_PROMO."PRODUCT_SUBSCRIPTION_ID",  
					    TAP_PROMO."PROMOTION_SUBSCRIPTION_ID",
					    TAP_PROMO."EFF_DT");		 	
			 	 
			 	 			     		   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("PRODUCT_SUBSCRIPTION_ID",
	 					"PROMOTION_SUBSCRIPTION_ID",
					    "REFERENCE_EFFECTIVE_DT") 
			    VALUES (TAP_PROMO."PRODUCT_SUBSCRIPTION_ID",
	 					TAP_PROMO."PROMOTION_SUBSCRIPTION_ID",
					    TAP_PROMO."REFERENCE_EFFECTIVE_DT");
					    
	ELSEIF TAP_PROMO.FLAG_EXISTING_RECORD = 'I' THEN
	
	     BEGIN AUTONOMOUS TRANSACTION 
     
     	 --     Insert Records into the target NDB table
		    INSERT INTO  "IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_PROMO_SUB_HIST"
		    			("PRODUCT_SUBSCRIPTION_ID",
	 					"PROMOTION_SUBSCRIPTION_ID",
	 					"ODS_SYST_CD",
	 					"ACCOUNT_NUMBER",
	 					"START_DATE",
	 					"END_DATE",
	 					"PROMOTION_CODE",
	 					"AUDIT_UPDATE_USER_ID",
	 					"APPLY_DATE",
	 					"TERMINATION_DATE",
	 					"PROD_PROMO_STS_CD",
	 					"REFERENCE_EFFECTIVE_DT",
			 			"REFERENCE_EXPIRY_DT",
	 					"INSERT_TS")
		 		VALUES	( TAP_PROMO."PRODUCT_SUBSCRIPTION_ID",
	 					TAP_PROMO."PROMOTION_SUBSCRIPTION_ID",
	 					TAP_PROMO."ODS_SYST_CD",
	 					TAP_PROMO."ACCOUNT_NUMBER",
	 					TAP_PROMO."START_DATE",
	 					TAP_PROMO."END_DATE",
	 					TAP_PROMO."PROMOTION_CODE",
	 					TAP_PROMO."AUDIT_UPDATE_USER_ID",
	 					TAP_PROMO."APPLY_DATE",
	 					TAP_PROMO."TERMINATION_DATE",
	 					TAP_PROMO."PROD_PROMO_STS_CD",
	 					TAP_PROMO."REFERENCE_EFFECTIVE_DT",
			 			TAP_PROMO."REFERENCE_EXPIRY_DT",
		                LV_CUR_UTC);
		               		
		   END ; --        BEGIN AUTONOMOUS TRANSACTION 
		               		                     
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		  INSERT INTO #UPDATE_IFRS_TAP_PROMO_SUB_HIST
					   ( "PRODUCT_SUBSCRIPTION_ID",
	 					"PROMOTION_SUBSCRIPTION_ID",
					    "EFF_DT") 
			    VALUES (TAP_PROMO."PRODUCT_SUBSCRIPTION_ID",  
					    TAP_PROMO."PROMOTION_SUBSCRIPTION_ID",
					    TAP_PROMO."EFF_DT");		 	
			 	 
			 	 			     		   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("PRODUCT_SUBSCRIPTION_ID",
	 					"PROMOTION_SUBSCRIPTION_ID",
					    "REFERENCE_EFFECTIVE_DT") 
			    VALUES (TAP_PROMO."PRODUCT_SUBSCRIPTION_ID",
	 					TAP_PROMO."PROMOTION_SUBSCRIPTION_ID",
					    TAP_PROMO."REFERENCE_EFFECTIVE_DT");
					    		   	
  
	 END IF;   
    END IF;
   END IF;
  END IF; 
END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::IFRS_OB_CHRG_INFO
UPDATE "LAND"."IFRS_R1.LAND::INT_TAP_PROMO_SUB_HIST" A
  FROM "LAND"."IFRS_R1.LAND::INT_TAP_PROMO_SUB_HIST" A
 INNER JOIN #UPDATE_IFRS_TAP_PROMO_SUB_HIST B
    ON A."PRODUCT_SUBSCRIPTION_ID"      = B."PRODUCT_SUBSCRIPTION_ID"
   AND A."PROMOTION_SUBSCRIPTION_ID"    = B."PROMOTION_SUBSCRIPTION_ID"
   AND A."EFF_DT"            = B."EFF_DT"
   SET NDB_TS                = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_PROMO_SUB_HIST_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_TAP_PROMO_SUB_HIST_EH" A
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."PRODUCT_SUBSCRIPTION_ID"           = B."PRODUCT_SUBSCRIPTION_ID"
   AND A."PROMOTION_SUBSCRIPTION_ID"         = B."PROMOTION_SUBSCRIPTION_ID"
   AND A."REFERENCE_EFFECTIVE_DT" = B."REFERENCE_EFFECTIVE_DT"
   SET (DELETE_DATE, DELETED)     = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
	
END;
       