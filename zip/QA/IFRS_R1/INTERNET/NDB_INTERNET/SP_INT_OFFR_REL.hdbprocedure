PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_INT_OFFR_REL"  
(IN IP_EFF_DT DATE,  
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN 
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_INT_OFFR_REL
-- Created By      : BC_EY94106 (Rohit)       
-- Create Date     : 03-18-2017
-- Description     : Data Inserted using Calculation View - CA_INT_OFFR_REL
--                   to NDB Table - INT_OFFR_REL Using this stored procedure.
--                   Internet OFFER RELATION includes data from table INT_OFFR_REL.		
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG        INTEGER := 0;
DECLARE LV_PREV_RECORD		      NVARCHAR(48) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
DECLARE CURSOR INT_OFFR_REL FOR
			SELECT	 
			      "ODS_SYST_CD",
				  "OFFR_CD",
				  "OFFR_EFF_DT",
				  "REL_CODE",
				  "REL_TY",
				  "REUSE_STRTERKIT_IND",
				  "EFF_DT",
				  "REFERENCE_EFFECTIVE_DT",
				  "REFERENCE_EXPIRY_DT",
				  "CYCL_ID",
				  "EFFECTIVE_DATE_PREV_DAY",
				  "FLAG_EXISTING_RECORD",
				  "ERROR_STATUS",
				  "ERROR_CODE",
				  "CONCAT_PK" 
		     FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_INT_OFFR_REL"
			      (PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
		 ORDER BY "OFFR_CD", "OFFR_EFF_DT", "REL_CODE", "REL_TY", "REFERENCE_EFFECTIVE_DT";  

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_INT_OFFR_REL (OFFR_CD NVARCHAR(30),OFFR_EFF_DT DATE,REL_CODE NVARCHAR(9), REL_TY NVARCHAR(1), EFF_DT DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION  (OFFR_CD NVARCHAR(100),OFFR_EFF_DT NVARCHAR(100),REL_CODE NVARCHAR(100), REL_TY NVARCHAR(100), REFERENCE_EFFECTIVE_DT NVARCHAR(100));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------  

FOR OFFR_REL AS INT_OFFR_REL DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
		
--    Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		    BEGIN AUTONOMOUS TRANSACTION 	
		    
		    
		    END;
		
		  -- Insert record into error table
	   	    INSERT INTO  "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_REL_EH"(
						 "ODS_SYST_CD",
						 "OFFR_CD",
						 "OFFR_EFF_DT",
						 "REFERENCE_EFFECTIVE_DT",
						 "REFERENCE_EXPIRY_DT",
						 "REL_CODE",
						 "REL_TY",
						 "REUSE_STRTERKIT_IND",
						 "INSERT_TS",
						 "ERROR_CODE",
						 "TECHNICAL_MESSAGE",
						 "ERROR_CREATE_TS")
			     VALUES  (OFFR_REL."ODS_SYST_CD",
						  OFFR_REL."OFFR_CD",
						  OFFR_REL."OFFR_EFF_DT",
						  OFFR_REL."EFF_DT",
						  OFFR_REL."REFERENCE_EXPIRY_DT",					  
						  OFFR_REL."REL_CODE",
						  OFFR_REL."REL_TY",
						  OFFR_REL."REUSE_STRTERKIT_IND",
						  LV_CUR_UTC,
						  ::SQL_ERROR_CODE,
			              ::SQL_ERROR_MESSAGE,
			              LV_CUR_UTC);					 
	
		  	LV_ERROR_FLAG := 'Y';
            LV_LOOP_ERROR_FLAG := 1;
        
    END;
    
    -- FOR CLEARING THE VARIABLES

	IF ((LV_PREV_RECORD IS NULL ) OR (OFFR_REL."CONCAT_PK" != LV_PREV_RECORD)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "OFFR_REL"."CONCAT_PK";
					 	   
    END IF;
       
   --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF OFFR_REL.ERROR_STATUS = '1'  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(OFFR_REL."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
         -- Insert into the Error Table
	   	    INSERT INTO  "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_REL_EH"(
						 "ODS_SYST_CD",
						 "OFFR_CD",
						 "OFFR_EFF_DT",
						 "REFERENCE_EFFECTIVE_DT",
						 "REFERENCE_EXPIRY_DT",
						 "REL_CODE",
						 "REL_TY",
						 "REUSE_STRTERKIT_IND",
						 "INSERT_TS",
						 "ERROR_CODE",
						 "ERROR_CREATE_TS")
			     VALUES  (OFFR_REL."ODS_SYST_CD",
						  OFFR_REL."OFFR_CD",
						  OFFR_REL."OFFR_EFF_DT",
						  OFFR_REL."EFF_DT",
						  OFFR_REL."REFERENCE_EXPIRY_DT",					  
						  OFFR_REL."REL_CODE",
						  OFFR_REL."REL_TY",
						  OFFR_REL."REUSE_STRTERKIT_IND",
						  LV_CUR_UTC,
						  :CURRENT_ERROR,						  
			              LV_CUR_UTC);	
			              
        END FOR ;
    
    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
	       
    ELSE 
         IF OFFR_REL.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
             -- Insert into the Error Table			              
	   	    INSERT INTO  "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_REL_EH"(
						 "ODS_SYST_CD",
						 "OFFR_CD",
						 "OFFR_EFF_DT",
						 "REFERENCE_EFFECTIVE_DT",
						 "REFERENCE_EXPIRY_DT",
						 "REL_CODE",
						 "REL_TY",
						 "REUSE_STRTERKIT_IND",
						 "INSERT_TS",
						 "ERROR_CODE",
						 "ERROR_CREATE_TS")
			     VALUES  (OFFR_REL."ODS_SYST_CD",
						  OFFR_REL."OFFR_CD",
						  OFFR_REL."OFFR_EFF_DT",
						  OFFR_REL."EFF_DT",
						  OFFR_REL."REFERENCE_EXPIRY_DT",					  
						  OFFR_REL."REL_CODE",
						  OFFR_REL."REL_TY",
						  OFFR_REL."REUSE_STRTERKIT_IND",
						  LV_CUR_UTC,
			              'PREVIOUS VERSION IN ERROR',
			              LV_CUR_UTC);				                      
    
--If Record exists in the Target NDB Table
     	ELSE IF OFFR_REL.FLAG_EXISTING_RECORD = 'U' THEN
	         BEGIN AUTONOMOUS TRANSACTION 	
	
	--Update the target NDB table	 
		    UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_REL" NDB 
		   	   SET  NDB.REFERENCE_EXPIRY_DT   = OFFR_REL.EFFECTIVE_DATE_PREV_DAY,
		 		    NDB."MODIFIED_TS"         = LV_CUR_UTC
		 	 WHERE  NDB."OFFR_CD"             = OFFR_REL."OFFR_CD"
	           AND  NDB."OFFR_EFF_DT"         = OFFR_REL."OFFR_EFF_DT"
	           AND  NDB."REL_CODE"            = OFFR_REL."REL_CODE"
	           AND  NDB."REL_TY"              = OFFR_REL."REL_TY"
	           AND  NDB."REFERENCE_EXPIRY_DT" =  '99991231';
	            
	 --Insert the Incoming new record
		     INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_REL"( 
						 "ODS_SYST_CD",
						 "OFFR_CD",
						 "OFFR_EFF_DT",
						 "REL_CODE",
						 "REL_TY",
						 "INSERT_TS",
						 "REUSE_STRTERKIT_IND",
						 "REFERENCE_EFFECTIVE_DT",
						 "REFERENCE_EXPIRY_DT")
				  VALUES (OFFR_REL."ODS_SYST_CD",
						  OFFR_REL."OFFR_CD",
						  OFFR_REL."OFFR_EFF_DT",
						  OFFR_REL."REL_CODE",
						  OFFR_REL."REL_TY",
						  LV_CUR_UTC,
						  OFFR_REL."REUSE_STRTERKIT_IND",
						  OFFR_REL."EFF_DT",
						  OFFR_REL."REFERENCE_EXPIRY_DT");	 
		      END;
--Insert PK of successfully processed Records into Local Temp Tables 
--for Updating NDB_TS in corresponding Landing Tables records		 
			INSERT INTO #UPDATE_INT_OFFR_REL
						(OFFR_CD, 
						OFFR_EFF_DT,
						REL_CODE,
						REL_TY,
						EFF_DT) 
				VALUES (OFFR_REL."OFFR_CD", 
						OFFR_REL."OFFR_EFF_DT", 
						OFFR_REL."REL_CODE",
						OFFR_REL."REL_TY",
						OFFR_REL."EFF_DT");		
							   					   	    		
			INSERT INTO #UPDATE_EH_DELETION
						(OFFR_CD, 
						OFFR_EFF_DT,
						REL_CODE,
						REL_TY,
						REFERENCE_EFFECTIVE_DT) 
				VALUES (OFFR_REL."OFFR_CD", 
						OFFR_REL."OFFR_EFF_DT", 
						OFFR_REL."REL_CODE",
						OFFR_REL."REL_TY",
						OFFR_REL."REFERENCE_EFFECTIVE_DT");
						
	    ELSE IF OFFR_REL.FLAG_EXISTING_RECORD = 'I' THEN
	    
	    BEGIN AUTONOMOUS TRANSACTION	    	    
--Insert Records into the target NDB table				   	
			 INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_REL"( 
					     "ODS_SYST_CD",
						 "OFFR_CD",
						 "OFFR_EFF_DT",
						 "REL_CODE",
						 "REL_TY",
						 "INSERT_TS",
						 "REUSE_STRTERKIT_IND",
						 "REFERENCE_EFFECTIVE_DT",
						 "REFERENCE_EXPIRY_DT")
			      VALUES (OFFR_REL."ODS_SYST_CD",
					      OFFR_REL."OFFR_CD",
					 	  OFFR_REL."OFFR_EFF_DT",
						  OFFR_REL."REL_CODE",
						  OFFR_REL."REL_TY",
						  LV_CUR_UTC,
						  OFFR_REL."REUSE_STRTERKIT_IND",
						  OFFR_REL."REFERENCE_EFFECTIVE_DT",
						  OFFR_REL."REFERENCE_EXPIRY_DT");	
	    END;				 
--Insert PK of successfully processed Records into Local Temp Tables 
--for Updating NDB_TS in corresponding Landing Tables records					 
			   INSERT INTO #UPDATE_INT_OFFR_REL
					   (OFFR_CD, 
					    OFFR_EFF_DT,
					    REL_CODE,
					    REL_TY,
					    EFF_DT) 
			    VALUES (OFFR_REL."OFFR_CD", 
				 		OFFR_REL."OFFR_EFF_DT", 
					   	OFFR_REL."REL_CODE",
					   	OFFR_REL."REL_TY",
					   	OFFR_REL."EFF_DT");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   (OFFR_CD, 
					    OFFR_EFF_DT,
					    REL_CODE,
					    REL_TY,
					    REFERENCE_EFFECTIVE_DT) 
			    VALUES (OFFR_REL."OFFR_CD", 
				 		OFFR_REL."OFFR_EFF_DT", 
					   	OFFR_REL."REL_CODE",
					   	OFFR_REL."REL_TY",
					   	OFFR_REL."REFERENCE_EFFECTIVE_DT");					  	   	
					   	 
        END IF;
     
      END IF;
  
    END IF;
  
  END IF;  
 
 END IF ; 
 
END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

--Update Landing Table IFRS_R1.LAND::INT_OFFR_REL
UPDATE "LAND"."IFRS_R1.LAND::INT_OFFR_REL" A
  FROM "LAND"."IFRS_R1.LAND::INT_OFFR_REL" A 
 INNER JOIN #UPDATE_INT_OFFR_REL B 
    ON A."OFFR_CD"       = B."OFFR_CD"
   AND A."OFFR_EFF_DT"   = B."OFFR_EFF_DT"
   AND A."REL_CODE"      = B."REL_CODE"
   AND A."REL_TY"        = B."REL_TY"
   AND A."EFF_DT"        = B."EFF_DT"   
   SET NDB_TS            = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_REL_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_OFFR_REL_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."OFFR_CD"                       = B."OFFR_CD"
   AND A."OFFR_EFF_DT"                   = B."OFFR_EFF_DT"
   AND A."REL_CODE"                      = B."REL_CODE"
   AND A."REL_TY"                        = B."REL_TY"
   AND A."REFERENCE_EFFECTIVE_DT"        = B."REFERENCE_EFFECTIVE_DT"
   SET (DELETE_DATE, DELETED)            = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;								     		