diff --git a/controllers/indexController.js b/controllers/indexController.js
index a6600e2..4fd2be7 100644
--- a/controllers/indexController.js
+++ b/controllers/indexController.js
@@ -1,78 +1,28 @@
-var async = require('async');
+var diff2html = require("diff2html").Diff2Html
 var fs = require('fs');
-var path = require('path');
-var dir = require('node-dir');
-var jsdiff = require('diff');
+var exec = require('child_process').exec;
 
-exports.index = function(req, res) {
-	var devDirectory = "./zip/DEV";
-	var totaldiff = '';
-
-	// Get all the paths
-	dir.paths(devDirectory, true, function(err, paths) {
-		if (err) throw err;
 
-		// Iterate through paths
-		async.eachSeries(paths, function(sPath, pathsCb) {
-			// Keep only file paths
-			fs.stat(sPath, function(err, stats) {
-				if (stats.isFile()) {
-					// Read and compare paths
-					async.parallel({
-						DEV: function(devCb) {
-							fs.readFile(sPath, 'utf8', function read(err, data) {
-								if (err) {
-									devCb(err);
-									return;
-								}
 
-								devCb(null, data);
-							});
-						},
-						QA: function(qaCb) {
-							var qaPath = sPath.replace(/DEV/g, 'QA');
-							fs.readFile(qaPath, 'utf8', function read(err, data) {
-								if (err && err.code === 'ENOENT') {
-									totaldiff += "FILE NOT FOUND IN QA: " + err.path + "\n";
-									qaCb("ENOENT");
-									return;
-								}
-
-								qaCb(null, data);
-							})
-						}
-					}, function(err, results) {
-						// Compare and update the totaldiff
+exports.index = function(req, res) {
+	// res.set('Content-Type', 'text/plain');
+	// exec("diff -arc zip\\DEV\\IFRS_R1\\ zip\\QA\\IFRS_R1", function (err, stdout, stderr) {
+	// 	var x = stdout;
+	// 	console.log(x);
+	// 	res.send(diff2html.getJsonFromDiff(x));
+	// });
 
-						// ENOENT isn't an actual error in our case
-						if (err === "ENOENT") {
-							pathsCb();
-							return;
-						}
 
-						if (err) {
-							pathsCb(err);
-							return;
-						}
+	fs.readFile("./zip/text.txt", 'utf8', function read(err, data) {
+		if (err) {
+			return;
+		}
+		res.send("foo");
 
-						totaldiff += jsdiff.createTwoFilesPatch(sPath.replace(/zip\\DEV/, ''), sPath.replace(/zip\\DEV/, ''), results.DEV, results.QA) + "\n";
-						pathsCb();
-					})
-				} else {
-					// have to call back if it's a directory
-					pathsCb();
-				}
-			})
+		console.log(diff2html.getJsonFromDiff(data));
+	});
 
-		}, function(err) {
-			if (err) {
-				console.log(err);
-				res.json(err);
-				return;
-			}
 
-			res.set('Content-Type', 'text/plain');
-			res.send(totaldiff);
-		})
-	})
+	// res.set('Content-Type', 'text/plain');
+	// res.send(totaldiff);
 };
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index a5397af..a293894 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -7,8 +7,7 @@
     "abbrev": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
-      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
-      "dev": true
+      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
     },
     "accepts": {
       "version": "1.3.4",
@@ -448,6 +447,17 @@
       "resolved": "https://registry.npmjs.org/diff/-/diff-3.4.0.tgz",
       "integrity": "sha512-QpVuMTEoJMF7cKzi6bvWhRulU1fZqZnvyVQgNhPaxxuTYwyjn/j1v9falseQ/uXWwPnO56RBfwtg4h/EQXmucA=="
     },
+    "diff2html": {
+      "version": "2.3.2",
+      "resolved": "https://registry.npmjs.org/diff2html/-/diff2html-2.3.2.tgz",
+      "integrity": "sha1-HFhkJm1DcUi8Zv3WbUrXUBAtf+0=",
+      "requires": {
+        "diff": "3.4.0",
+        "hogan.js": "3.0.2",
+        "lodash": "4.17.4",
+        "whatwg-fetch": "2.0.3"
+      }
+    },
     "doctypes": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/doctypes/-/doctypes-1.1.0.tgz",
@@ -752,6 +762,15 @@
       "integrity": "sha1-6CB68cx7MNRGzHC3NLXovhj4jVE=",
       "dev": true
     },
+    "hogan.js": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/hogan.js/-/hogan.js-3.0.2.tgz",
+      "integrity": "sha1-TNnhq9QpQUbnZ55B14mHMrAse/0=",
+      "requires": {
+        "mkdirp": "0.3.0",
+        "nopt": "1.0.10"
+      }
+    },
     "http-errors": {
       "version": "1.6.2",
       "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.2.tgz",
@@ -1211,6 +1230,11 @@
       "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
       "dev": true
     },
+    "mkdirp": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.0.tgz",
+      "integrity": "sha1-G79asbqCevI1dRQ0kEJkVfSB/h4="
+    },
     "morgan": {
       "version": "1.8.2",
       "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.8.2.tgz",
@@ -1273,7 +1297,6 @@
       "version": "1.0.10",
       "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
       "integrity": "sha1-bd0hvSoxQXuScn3Vhfim83YI6+4=",
-      "dev": true,
       "requires": {
         "abbrev": "1.1.1"
       }
@@ -2044,6 +2067,11 @@
       "resolved": "https://registry.npmjs.org/void-elements/-/void-elements-2.0.1.tgz",
       "integrity": "sha1-wGavtYK7HLQSjWDqkjkulNXp2+w="
     },
+    "whatwg-fetch": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/whatwg-fetch/-/whatwg-fetch-2.0.3.tgz",
+      "integrity": "sha1-nITsLc9oGH/wC8ZOEnS0QhduHIQ="
+    },
     "which": {
       "version": "1.3.0",
       "resolved": "https://registry.npmjs.org/which/-/which-1.3.0.tgz",
diff --git a/package.json b/package.json
index 1fbd5ae..87f1ec8 100644
--- a/package.json
+++ b/package.json
@@ -12,6 +12,7 @@
     "cookie-parser": "~1.4.3",
     "debug": "~2.6.3",
     "diff": "^3.4.0",
+    "diff2html": "^2.3.2",
     "express": "~4.15.2",
     "morgan": "~1.8.1",
     "node-dir": "^0.1.17",
