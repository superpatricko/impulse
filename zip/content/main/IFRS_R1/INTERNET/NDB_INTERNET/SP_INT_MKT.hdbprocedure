PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_INT_MKT" 
(IN IP_EFF_DT DATE,
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	AS
BEGIN 
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_INT_MKT
-- Created By      : BC_EY94106 (Rohit)       
-- Create Date     : 05-17-2017
-- Description     : Data Inserted using Calculation View - CA_INT_MKT
--                   to NDB Table - INT_MKT Using this stored procedure.
--                   INT MKT includes data from table INT_MKT.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG        INTEGER := 0;
DECLARE LV_PREV_RECORD		      NVARCHAR(3) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
  
 DECLARE CURSOR INT_MKT FOR
SELECT   
		"MKT_CD", 
		"ODS_SYST_CD", 
		"MKT_NM", 
		"MKT_TY", 
		"RELATED_MKT", 
		"BUS_ENTT_CD", 
		"PROV", 
		"PST_TAX_CAT", 
		"EFF_DT",
		"REFERENCE_EFFECTIVE_DT",
		"REFERENCE_EXPIRY_DT",
		"FLAG_EXISTING_RECORD", 
		"EFFECTIVE_DATE_PREV_DAY",
		"ERROR_STATUS",
		"ERROR_CODE"
FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_INT_MKT"
(PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
	ORDER BY "MKT_CD", "REFERENCE_EFFECTIVE_DT";

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 


CREATE LOCAL TEMPORARY TABLE #UPDATE_INT_MKT (MKT_CD NVARCHAR(3),EFF_DT DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (MKT_CD NVARCHAR(100),REFERENCE_EFFECTIVE_DT NVARCHAR(100));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------

FOR MKT AS INT_MKT DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
	
		 -- Insert record into error table
		   		
			   	INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MKT_EH"(
			   			"MKT_CD",
			   			"ODS_SYST_CD", 
						"MKT_NM", 
						"MKT_TY", 
						"RELATED_MKT", 
						"BUS_ENTT_CD", 
						"PROV", 
						"PST_TAX_CAT",
						"REFERENCE_EFFECTIVE_DT",
						"REFERENCE_EXPIRY_DT",
						"INSERT_TS",
						"ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
						
			    VALUES (MKT."MKT_CD",
			    		MKT."ODS_SYST_CD",
						MKT."MKT_NM",
						MKT."MKT_TY",
						MKT."RELATED_MKT",
						MKT."BUS_ENTT_CD",
						MKT."PROV",
						MKT."PST_TAX_CAT",
			    		MKT."EFF_DT",		
						MKT."REFERENCE_EXPIRY_DT",
						"LV_CUR_UTC",						
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
					    LV_CUR_UTC);
					    
		  	   LV_ERROR_FLAG := 'Y';
		  	   LV_LOOP_ERROR_FLAG := 1;
	         
	  END;      
	  
-- FOR CLEARING THE VARIABLES

	IF ((LV_PREV_RECORD IS NULL ) OR (MKT."MKT_CD" != LV_PREV_RECORD)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "MKT"."MKT_CD";
					 	   
    END IF;
    
   
   --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF MKT.ERROR_STATUS = '1'  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(MKT."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
-- Insert into the Error Table
			   	INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MKT_EH"(
			   			"MKT_CD",
			   			"ODS_SYST_CD", 
						"MKT_NM", 
						"MKT_TY", 
						"RELATED_MKT", 
						"BUS_ENTT_CD", 
						"PROV", 
						"PST_TAX_CAT",
						"REFERENCE_EFFECTIVE_DT",
						"REFERENCE_EXPIRY_DT",
						"INSERT_TS",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
						
			    VALUES (MKT."MKT_CD",
			    		MKT."ODS_SYST_CD",
						MKT."MKT_NM",
						MKT."MKT_TY",
						MKT."RELATED_MKT",
						MKT."BUS_ENTT_CD",
						MKT."PROV",
						MKT."PST_TAX_CAT",
			    		MKT."EFF_DT",		
						MKT."REFERENCE_EXPIRY_DT",	
						"LV_CUR_UTC",					
						:CURRENT_ERROR,
					    LV_CUR_UTC);	  
    
    END FOR;
    
    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
	    
    
    ELSE 
         IF MKT.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
 -- Insert into the Error Table    
			   	INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MKT_EH"(
			   			"MKT_CD",
			   			"ODS_SYST_CD", 
						"MKT_NM", 
						"MKT_TY", 
						"RELATED_MKT", 
						"BUS_ENTT_CD", 
						"PROV",  
						"PST_TAX_CAT",
						"REFERENCE_EFFECTIVE_DT",
						"REFERENCE_EXPIRY_DT",
						"INSERT_TS",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
						
			    VALUES (MKT."MKT_CD",
			    		MKT."ODS_SYST_CD",
						MKT."MKT_NM",
						MKT."MKT_TY",
						MKT."RELATED_MKT",
						MKT."BUS_ENTT_CD",
						MKT."PROV",
						MKT."PST_TAX_CAT",
			    		MKT."EFF_DT",		
						MKT."REFERENCE_EXPIRY_DT",						
						"LV_CUR_UTC",
					    'PREVIOUS VERSION IN ERROR',
					    LV_CUR_UTC);        
    ELSE
    --   If Record exists in the Target NDB Table
     IF MKT.FLAG_EXISTING_RECORD = 'U' THEN
     
     	BEGIN AUTONOMOUS TRANSACTION  
     
          --     Update the target NDB table
	          UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MKT" NDB 
	   		     SET  NDB.REFERENCE_EXPIRY_DT        = MKT.EFFECTIVE_DATE_PREV_DAY,
	 		          NDB."MODIFIED_TS"              = LV_CUR_UTC
			   WHERE  NDB.MKT_CD                  	 = MKT.MKT_CD
			     AND  NDB.REFERENCE_EXPIRY_DT  = '99991231';
			 
--    Insert the Incoming new record
			   	INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MKT"(
			   			"MKT_CD", 
						"ODS_SYST_CD", 
						"MKT_NM", 
						"MKT_TY", 
						"RELATED_MKT", 
						"BUS_ENTT_CD", 
						"PROV", 
						"PST_TAX_CAT",
						"REFERENCE_EFFECTIVE_DT",
						"REFERENCE_EXPIRY_DT",
					    "INSERT_TS")
												
			    VALUES (MKT."MKT_CD",
						MKT."ODS_SYST_CD",
						MKT."MKT_NM",
						MKT."MKT_TY",
						MKT."RELATED_MKT",
						MKT."BUS_ENTT_CD",
						MKT."PROV",
						MKT."PST_TAX_CAT",
			    		MKT."EFF_DT",		
						MKT."REFERENCE_EXPIRY_DT",						
						LV_CUR_UTC);
					    
					    
	END;
	
	
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	

			   INSERT INTO #UPDATE_INT_MKT
						   ("MKT_CD", 
						    "EFF_DT")
				    VALUES (MKT."MKT_CD", 
					 		 MKT."EFF_DT");

						   					   	    		
			   INSERT INTO #UPDATE_EH_DELETION
						   ("MKT_CD", 
						    "REFERENCE_EFFECTIVE_DT")
				     VALUES (MKT."MKT_CD", 
					 		 MKT."REFERENCE_EFFECTIVE_DT");

    ELSEIF MKT.FLAG_EXISTING_RECORD = 'I' THEN
    
      BEGIN AUTONOMOUS TRANSACTION
--    Insert the Incoming new record
			   	INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MKT"(
			   			"MKT_CD", 
						"ODS_SYST_CD", 
						"MKT_NM", 
						"MKT_TY", 
						"RELATED_MKT", 
						"BUS_ENTT_CD", 
						"PROV", 
						"PST_TAX_CAT",
						"REFERENCE_EFFECTIVE_DT",
						"REFERENCE_EXPIRY_DT",
					    "INSERT_TS")
												
			    VALUES (MKT."MKT_CD",
						MKT."ODS_SYST_CD",
						MKT."MKT_NM",
						MKT."MKT_TY",
						MKT."RELATED_MKT",
						MKT."BUS_ENTT_CD",
						MKT."PROV",
						MKT."PST_TAX_CAT",
			    		MKT."REFERENCE_EFFECTIVE_DT",		
						MKT."REFERENCE_EXPIRY_DT",						
					    LV_CUR_UTC);
					    
	  END;
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	

			   INSERT INTO #UPDATE_INT_MKT
						   ("MKT_CD", 
						    "EFF_DT")
				    VALUES (MKT."MKT_CD", 
					 		 MKT."EFF_DT");

						   					   	    		
			   INSERT INTO #UPDATE_EH_DELETION
						   ("MKT_CD", 
						    "REFERENCE_EFFECTIVE_DT")
				     VALUES (MKT."MKT_CD", 
					 		 MKT."REFERENCE_EFFECTIVE_DT");			    					    
						
        END IF;
    
      END IF;
    
    END IF;
    
  END IF;  

END FOR;


--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::INT_MKT
UPDATE "LAND"."IFRS_R1.LAND::INT_MKT" A
  FROM "LAND"."IFRS_R1.LAND::INT_MKT" A 
 INNER JOIN #UPDATE_INT_MKT B 
    ON A."MKT_CD"        = B."MKT_CD"
   AND A."EFF_DT"        = B."EFF_DT" 
   SET NDB_TS             = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MKT_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MKT_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."MKT_CD"                  = B."MKT_CD"
   AND A."REFERENCE_EFFECTIVE_DT"  = B."REFERENCE_EFFECTIVE_DT" 
   SET (DELETE_DATE, DELETED)      = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

       OP_STATUS := LC_ERROR_TEXT;
			
    ELSE
 
  	   OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;