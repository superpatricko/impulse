PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_INT_ORDER_RAC_CD"    
(OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_RAC_CD
-- Created By      : BC_EY96110 (Arpit)       
-- Create Date     : 07-06-2017
-- Description     : Data updated using Calculation View - CA_ZINTERNET_RAC
--                   to NDB Table - INT_ORDER Using this stored procedure.
--                   CA_ZINTERNET_RAC includes data from SDA table ZINTERNET_RAC.			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
 DECLARE CURSOR C_ORDER FOR
		 SELECT	 "RAC_CD",
				 "PRDCT_TYP",
				 "ALTN_CONTR_NUM",
				 "EFFECTIVE_DATE",
				 "COMPOUND_KEY",
				 "REFERENCE_EFFECTIVE_DT" 
FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_ZINTERNET_RAC"
	   WITH HINT (NO_REMOTE_JOIN_RELOCATION);
    
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (ALTN_CONTR_NUM NVARCHAR(9),PRDCT_TYP NVARCHAR(1),REFERENCE_EFFECTIVE_DT DATE,COMPOUND_KEY NVARCHAR(18));    
   
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------
FOR CUR_ORDER AS C_ORDER DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
		--  Define Exit Handler
			DECLARE EXIT HANDLER FOR SQLEXCEPTION 
			BEGIN AUTONOMOUS TRANSACTION
			
			END; 
					
		   -- Insert record into error table
		   	  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_ORDER_EH"(
					      "RAC_CD",
						  "PRDCT_TYP",
						  "ALTN_CONTR_NUM",
						  "EFFECTIVE_DATE",
						  "COMPOUND_KEY" ,
						  "REFERENCE_EFFECTIVE_DT",
			 	  	      "ERROR_CODE",
				          "TECHNICAL_MESSAGE",
				          "ERROR_CREATE_TS")
			 	   VALUES (CUR_ORDER."RAC_CD",
			               CUR_ORDER."PRDCT_TYP",
			 			   CUR_ORDER."ALTN_CONTR_NUM",
			 	  	       CUR_ORDER."EFFECTIVE_DATE",
			 	  	       CUR_ORDER."COMPOUND_KEY",
			 	  	       CUR_ORDER."REFERENCE_EFFECTIVE_DT",
			 	  	       ::SQL_ERROR_CODE,
				           ::SQL_ERROR_MESSAGE,
				           LV_CUR_UTC);
				           
		      LV_ERROR_FLAG := 'Y';
     END;     
  
	--    Update the target NDB table
		  UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_ORDER" NDB 
			 SET  NDB.RAC_CD                	= CUR_ORDER.RAC_CD
		   WHERE  CUR_ORDER."ALTN_CONTR_NUM" 	= NDB."ALTN_CONTR_NUM"
		     AND  CUR_ORDER."PRDCT_TYP"   		= NDB."PRDCT_TYP"
		     AND  CUR_ORDER."REFERENCE_EFFECTIVE_DT"    = NDB."REFERENCE_EFFECTIVE_DT"
		     AND  CUR_ORDER."COMPOUND_KEY"      = NDB."COMPOUND_KEY" ;
		   
		  
	--     Insert PK of successfully processed Records into Local Temp Tables 
		   INSERT INTO #UPDATE_EH_DELETION
				       (ALTN_CONTR_NUM, 
					    PRDCT_TYP,
					    REFERENCE_EFFECTIVE_DT,
					    COMPOUND_KEY
					    ) 
			    VALUES (CUR_ORDER."ALTN_CONTR_NUM", 
						CUR_ORDER."PRDCT_TYP",
						CUR_ORDER."REFERENCE_EFFECTIVE_DT",
						CUR_ORDER."COMPOUND_KEY"
						);	   
		    
END FOR;   		
		
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_ORDER_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_ORDER_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON  A."ALTN_CONTR_NUM"      = B."ALTN_CONTR_NUM"
   AND  A."PRDCT_TYP"        = B."PRDCT_TYP"
   AND  A."REFERENCE_EFFECTIVE_DT"          = B."REFERENCE_EFFECTIVE_DT"
   AND  A."COMPOUND_KEY"          = B."COMPOUND_KEY"
   SET  (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
  
END;     