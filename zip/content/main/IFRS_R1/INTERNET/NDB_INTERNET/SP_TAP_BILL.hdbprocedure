PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_TAP_BILL"
(IN IP_CID_DATE DATE,
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_TAP_BILL
-- Created By      : BC_EZ08930 (Rakesh)       
-- Create Date     : 03-18-2017
-- Description     : Data Inserted using Calculation View - CA_TAP_BILL
--                   to NDB Table - INT_CUST Using this stored procedure.
--                   Internet Customer includes data from landing table TAP_BILL.			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
DECLARE CURSOR C_TAP_BILL FOR

				   SELECT
						 "AMT",
						 "PRM_CONTR_CUST",
						 "ALTN_CONTR_NUM",
						 "CONTR_UNQ_ID",
						 "CONTR_ORD_ID",
						 "CONTR_TERM",
						 "CONTR_PROD_CD",
						 "CONTR_PRC_STRC_CD",
						 "EVNT_ID",
						 "ENTR_DT",
						 "ADJ_RSN_CD",
						 "BAL_IMPCT_CD",
						 "FEAT_CD",
						 "BILL_CYCL",
						 "CONTR_TIMESTAMP",
						 "BL_CYC",
						 "SUB_STS_RSN_CD",
						 "REQ_END_GRC_PRD",
						 "PRV_BAN",
						 "PRV_BAN_MOVE_DT",
						 "CST_CNTR",
						 "PRDCT_TYP",
						 "ACCT_TY",
						 "ACCT_SUB_TY",
						 "HS_NUM",
						 "SERV_STRT_DT",
						 "CUST_STATE",
						 "CUST_LOC_ID",
						 "CUST_FRST_NM",
						 "CUST_LAST_NM",
						 "CUST_ADDR",
						 "BAN_STS",
						 "SUB_STATUS",
						 "REQ_ST_GRC_PRD",
						 "CMT_STRT_DT",
						 "CMT_END_DT",
						 "CMT_RSN_CD",
						 "NXT_BAN",
						 "NXT_BAN_MOVE_DT",
						 "CONTR_IPTN_DT",
						 "KUNNR_SID",
						 "REFERENCE_EXPIRY_DT",
						 "REFERENCE_EFFECTIVE_DT",
						 "CYCLE_BILL_DAY",
						 "MOB_BAN",
			             "MOB_MDN",
						 "FLAG_EXISTING_RECORD",
						 "EFFECTIVE_DATE_PREV_DAY",
						 "ERROR_CODE",
						 "ERROR_STATUS",
						 "CONTR_TS"
					FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_TAP_BILL"
	                     (PLACEHOLDER."$$IP_CID_DATE$$" => :IP_CID_DATE)
	            ORDER BY "CONTR_TS";     
	        
	                     	                     
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_TAP_BILL(PRM_CONTR_CUST NVARCHAR(20), ALTN_CONTR_NUM NVARCHAR(9));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (PRM_CONTR_CUST NVARCHAR(20), ALTN_CONTR_NUM NVARCHAR(9));    
    
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------
FOR CUR_BILL AS C_TAP_BILL DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
	   --  Define Exit Handler
		   DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		   BEGIN AUTONOMOUS TRANSACTION 
		   
		   END;
				
	   --  Insert record into error table
	              INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_CUST_EH"(
			   	  		      "PRM_CONTR_CUST",
							  "ALTN_CONTR_NUM",
							  "CONTR_UNQ_ID",
						      "CONTR_TIMESTAMP",
							  "REFERENCE_EFFECTIVE_DT",
							  "REFERENCE_EXPIRY_DT",
							  "ACCT_TY",
							  "ACCT_SUB_TY",
							  "HS_NUM",
							  "SERV_STRT_DT",
							  "CUST_STATE",
							  "CUST_LOC_ID",
							  "CUST_FRST_NM",
							  "CUST_LAST_NM",
							  "CUST_ADDR",
							  "CONTR_ORD_ID",
						      "CONTR_IPTN_DT", 
							  "CONTR_TERM", 
							  "CONTR_PROD_CD", 
							  "CONTR_PRC_STRC_CD",
							  "EVNT_ID",
							  "ENTR_DT", 
							  "ADJ_RSN_CD", 
							  "BAL_IMPCT_CD", 
							  "FEAT_CD",
							  "AMT",
							  "BILL_CYCL",
							  "CST_CNTR",
						      "BAN_STS",
							  "BL_CYC", 
							  "CMT_END_DT",
							  "CMT_STRT_DT",
							  "CMT_RSN_CD",
							  "CYCLE_BILL_DAY",
						      "NXT_BAN",
							  "NXT_BAN_MOVE_DT",
							  "PRV_BAN",
							  "SUB_STATUS",
							  "PRDCT_TYP",
							  "PRV_BAN_MOVE_DT",
							  "REQ_END_GRC_PRD",
							  "REQ_ST_GRC_PRD",
							  "SUB_STS_RSN_CD",
							  "KUNNR_SID",
							  "MOB_BAN",
				              "MOB_MDN",
							  "ERROR_CODE",
					          "TECHNICAL_MESSAGE",
					          "ERROR_CREATE_TS")
		              VALUES (CUR_BILL."PRM_CONTR_CUST",
							  CUR_BILL."ALTN_CONTR_NUM",
						      CUR_BILL."CONTR_UNQ_ID",
						      CUR_BILL."CONTR_TIMESTAMP",
						      CUR_BILL."REFERENCE_EFFECTIVE_DT",
							  CUR_BILL."REFERENCE_EXPIRY_DT",
							  CUR_BILL."ACCT_TY",
							  CUR_BILL."ACCT_SUB_TY",
							  CUR_BILL."HS_NUM",
							  CUR_BILL."SERV_STRT_DT",
							  CUR_BILL."CUST_STATE",
							  CUR_BILL."CUST_LOC_ID",
							  CUR_BILL."CUST_FRST_NM",
							  CUR_BILL."CUST_LAST_NM",
							  CUR_BILL."CUST_ADDR",
							  CUR_BILL."CONTR_ORD_ID",
							  CUR_BILL."CONTR_IPTN_DT",
							  CUR_BILL."CONTR_TERM",
							  CUR_BILL."CONTR_PROD_CD",
							  CUR_BILL."CONTR_PRC_STRC_CD",
							  CUR_BILL."EVNT_ID",
							  CUR_BILL."ENTR_DT",
							  CUR_BILL."ADJ_RSN_CD",
							  CUR_BILL."BAL_IMPCT_CD",
							  CUR_BILL."FEAT_CD",
							  CUR_BILL."AMT",
							  CUR_BILL."BILL_CYCL",
							  CUR_BILL."CST_CNTR",
						      CUR_BILL."BAN_STS", 
							  CUR_BILL."BL_CYC",
							  CUR_BILL."CMT_STRT_DT",
							  CUR_BILL."CMT_END_DT",
							  CUR_BILL."CMT_RSN_CD",
							  CUR_BILL."CYCLE_BILL_DAY",
							  CUR_BILL."NXT_BAN",
							  CUR_BILL."NXT_BAN_MOVE_DT",
							  CUR_BILL."PRV_BAN",
							  CUR_BILL."SUB_STATUS",
							  CUR_BILL."PRDCT_TYP",
							  CUR_BILL."PRV_BAN_MOVE_DT",
							  CUR_BILL."REQ_END_GRC_PRD",
							  CUR_BILL."REQ_ST_GRC_PRD",
							  CUR_BILL."SUB_STS_RSN_CD",
							  CUR_BILL."KUNNR_SID",
							  CUR_BILL."MOB_BAN",
				              CUR_BILL."MOB_MDN",
					          ::SQL_ERROR_CODE,
			                  ::SQL_ERROR_MESSAGE,
			                  LV_CUR_UTC);  
			                  
			                         
	       LV_ERROR_FLAG := 'Y';
	       
  END;    		
     
     --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_BILL.ERROR_STATUS = '1' THEN
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_BILL."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		   -- Insert into the Error Table
		      INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_CUST_EH"(
				   	  	  "PRM_CONTR_CUST",
						  "ALTN_CONTR_NUM",
						  "CONTR_UNQ_ID",
					      "CONTR_TIMESTAMP",
						  "REFERENCE_EFFECTIVE_DT",
						  "REFERENCE_EXPIRY_DT",
						  "ACCT_TY",
						  "ACCT_SUB_TY",
						  "HS_NUM",
						  "SERV_STRT_DT",
						  "CUST_STATE",
						  "CUST_LOC_ID",
						  "CUST_FRST_NM",
						  "CUST_LAST_NM",
						  "CUST_ADDR",
						  "CONTR_ORD_ID",
					      "CONTR_IPTN_DT", 
						  "CONTR_TERM", 
						  "CONTR_PROD_CD", 
						  "CONTR_PRC_STRC_CD",
						  "EVNT_ID",
						  "ENTR_DT", 
						  "ADJ_RSN_CD", 
						  "BAL_IMPCT_CD", 
						  "FEAT_CD",
						  "AMT",
						  "BILL_CYCL",
						  "CST_CNTR",
					      "BAN_STS",
						  "BL_CYC", 
						  "CMT_END_DT",
						  "CMT_STRT_DT",
						  "CMT_RSN_CD",
						  "CYCLE_BILL_DAY",
					      "NXT_BAN",
						  "NXT_BAN_MOVE_DT",
						  "PRV_BAN",
						  "SUB_STATUS",
						  "PRDCT_TYP",
						  "PRV_BAN_MOVE_DT",
						  "REQ_END_GRC_PRD",
						  "REQ_ST_GRC_PRD",
						  "SUB_STS_RSN_CD",
						  "KUNNR_SID",
						  "MOB_BAN",
						  "MOB_MDN",
				   	  	  "ERROR_CODE",
				          "ERROR_CREATE_TS")
				  VALUES (CUR_BILL."PRM_CONTR_CUST",
						  CUR_BILL."ALTN_CONTR_NUM",
						  CUR_BILL."CONTR_UNQ_ID",
					      CUR_BILL."CONTR_TIMESTAMP",
						  CUR_BILL."REFERENCE_EFFECTIVE_DT",
						  CUR_BILL."REFERENCE_EXPIRY_DT",
						  CUR_BILL."ACCT_TY",
						  CUR_BILL."ACCT_SUB_TY",
						  CUR_BILL."HS_NUM",
						  CUR_BILL."SERV_STRT_DT",
						  CUR_BILL."CUST_STATE",
						  CUR_BILL."CUST_LOC_ID",
						  CUR_BILL."CUST_FRST_NM",
						  CUR_BILL."CUST_LAST_NM",
						  CUR_BILL."CUST_ADDR",
						  CUR_BILL."CONTR_ORD_ID",
					      CUR_BILL."CONTR_IPTN_DT", 
						  CUR_BILL."CONTR_TERM", 
						  CUR_BILL."CONTR_PROD_CD", 
						  CUR_BILL."CONTR_PRC_STRC_CD",
						  CUR_BILL."EVNT_ID",
						  CUR_BILL."ENTR_DT", 
						  CUR_BILL."ADJ_RSN_CD", 
						  CUR_BILL."BAL_IMPCT_CD", 
						  CUR_BILL."FEAT_CD",
						  CUR_BILL."AMT",
						  CUR_BILL."BILL_CYCL",
						  CUR_BILL."CST_CNTR",
					      CUR_BILL."BAN_STS",
						  CUR_BILL."BL_CYC", 
						  CUR_BILL."CMT_END_DT",
						  CUR_BILL."CMT_STRT_DT",
						  CUR_BILL."CMT_RSN_CD",
						  CUR_BILL."CYCLE_BILL_DAY",
					      CUR_BILL."NXT_BAN",
						  CUR_BILL."NXT_BAN_MOVE_DT",
						  CUR_BILL."PRV_BAN",
						  CUR_BILL."SUB_STATUS",
						  CUR_BILL."PRDCT_TYP",
						  CUR_BILL."PRV_BAN_MOVE_DT",
						  CUR_BILL."REQ_END_GRC_PRD",
						  CUR_BILL."REQ_ST_GRC_PRD",
						  CUR_BILL."SUB_STS_RSN_CD",
						  CUR_BILL."KUNNR_SID",
						  CUR_BILL."MOB_BAN",
					      CUR_BILL."MOB_MDN",
						  :CURRENT_ERROR,
						  LV_CUR_UTC);
			
		END FOR;
		
-- Set Error Flag				        
	  LV_ERROR_FLAG := 'Y';		

-- Processing for Successful Records
     
       
-- If Tapestry Equipment (billing extract) details exists for the Customer(BAN) in the Target NDB Table then history will be maintained for that record
       ELSEIF CUR_BILL.FLAG_EXISTING_RECORD = 'U' THEN  
      
	   BEGIN AUTONOMOUS TRANSACTION 
--     Update the target NDB table
	   UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_CUST" NDB 
		  SET NDB.REFERENCE_EXPIRY_DT   = CUR_BILL.EFFECTIVE_DATE_PREV_DAY,
	 		  NDB.MODIFIED_TS           = LV_CUR_UTC 
		WHERE CUR_BILL."PRM_CONTR_CUST" = NDB."PRM_CONTR_CUST"  
		  AND CUR_BILL."ALTN_CONTR_NUM" = NDB."ALTN_CONTR_NUM"  
		  AND NDB.REFERENCE_EXPIRY_DT   = '99991231';
   	  
       --     Insert the Incoming new record
	          INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_CUST"(
				   	  	  "PRM_CONTR_CUST",
						  "ALTN_CONTR_NUM",
						  "CONTR_UNQ_ID",
					      "CONTR_TIMESTAMP",
						  "REFERENCE_EFFECTIVE_DT",
						  "REFERENCE_EXPIRY_DT",
						  "ACCT_TY",
						  "ACCT_SUB_TY",
						  "HS_NUM",
						  "SERV_STRT_DT",
						  "CUST_STATE",
						  "CUST_LOC_ID",
						  "CUST_FRST_NM",
						  "CUST_LAST_NM",
						  "CUST_ADDR",
						  "CONTR_ORD_ID",
					      "CONTR_IPTN_DT", 
						  "CONTR_TERM", 
						  "CONTR_PROD_CD", 
						  "CONTR_PRC_STRC_CD",
						  "EVNT_ID",
						  "ENTR_DT", 
						  "ADJ_RSN_CD", 
						  "BAL_IMPCT_CD", 
						  "FEAT_CD",
						  "AMT",
						  "BILL_CYCL",
						  "CST_CNTR",
					      "BAN_STS",
						  "BL_CYC", 
						  "CMT_END_DT",
						  "CMT_STRT_DT",
						  "CMT_RSN_CD",
						  "CYCLE_BILL_DAY",
					      "NXT_BAN",
						  "NXT_BAN_MOVE_DT",
						  "PRV_BAN",
						  "SUB_STATUS",
						  "PRDCT_TYP",
						  "PRV_BAN_MOVE_DT",
						  "REQ_END_GRC_PRD",
						  "REQ_ST_GRC_PRD",
						  "SUB_STS_RSN_CD",
						  "MOB_BAN",
			              "MOB_MDN",
				          "KUNNR_SID",
						  "INSERT_TS",
						  "MODIFIED_TS")
	              VALUES (CUR_BILL."PRM_CONTR_CUST",
						  CUR_BILL."ALTN_CONTR_NUM",
					      CUR_BILL."CONTR_UNQ_ID",
					      CUR_BILL."CONTR_TIMESTAMP",
					      CUR_BILL."REFERENCE_EFFECTIVE_DT",
						  CUR_BILL."REFERENCE_EXPIRY_DT",
						  CUR_BILL."ACCT_TY",
						  CUR_BILL."ACCT_SUB_TY",
						  CUR_BILL."HS_NUM",
						  CUR_BILL."SERV_STRT_DT",
						  CUR_BILL."CUST_STATE",
						  CUR_BILL."CUST_LOC_ID",
						  CUR_BILL."CUST_FRST_NM",
						  CUR_BILL."CUST_LAST_NM",
						  CUR_BILL."CUST_ADDR",
						  CUR_BILL."CONTR_ORD_ID",
						  CUR_BILL."CONTR_IPTN_DT",
						  CUR_BILL."CONTR_TERM",
						  CUR_BILL."CONTR_PROD_CD",
						  CUR_BILL."CONTR_PRC_STRC_CD",
						  CUR_BILL."EVNT_ID",
						  CUR_BILL."ENTR_DT",
						  CUR_BILL."ADJ_RSN_CD",
						  CUR_BILL."BAL_IMPCT_CD",
						  CUR_BILL."FEAT_CD",
						  CUR_BILL."AMT",
						  CUR_BILL."BILL_CYCL",
						  CUR_BILL."CST_CNTR",
					      CUR_BILL."BAN_STS", 
						  CUR_BILL."BL_CYC",
						  CUR_BILL."CMT_STRT_DT",
						  CUR_BILL."CMT_END_DT",
						  CUR_BILL."CMT_RSN_CD",
						  CUR_BILL."CYCLE_BILL_DAY",
						  CUR_BILL."NXT_BAN",
						  CUR_BILL."NXT_BAN_MOVE_DT",
						  CUR_BILL."PRV_BAN",
						  CUR_BILL."SUB_STATUS",
						  CUR_BILL."PRDCT_TYP",
						  CUR_BILL."PRV_BAN_MOVE_DT",
						  CUR_BILL."REQ_END_GRC_PRD",
						  CUR_BILL."REQ_ST_GRC_PRD",
						  CUR_BILL."SUB_STS_RSN_CD",
						  CUR_BILL."MOB_BAN",
			              CUR_BILL."MOB_MDN",
				          CUR_BILL."KUNNR_SID",
		                  LV_CUR_UTC,
		                  LV_CUR_UTC);
		                  
	END;	                  
		          
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_TAP_BILL
					   ("PRM_CONTR_CUST", 
					    "ALTN_CONTR_NUM") 
			    VALUES (CUR_BILL."PRM_CONTR_CUST", 
				 		CUR_BILL."ALTN_CONTR_NUM");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("PRM_CONTR_CUST", 
					   	"ALTN_CONTR_NUM") 
		        VALUES (CUR_BILL."PRM_CONTR_CUST", 
					   	CUR_BILL."ALTN_CONTR_NUM");           
                    	
    ELSEIF CUR_BILL.FLAG_EXISTING_RECORD = 'I' THEN	
    	          
--    Insert Tapestry Equipment (billing extract) details  for existing Customers(BAN) into the target NDB table INT_CUST   
      	
            UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_CUST" NDB
			SET   NDB."CONTR_UNQ_ID"   =  CUR_BILL.CONTR_UNQ_ID,
			      NDB."EVNT_ID"        =  CUR_BILL."EVNT_ID",
				  NDB."ENTR_DT"        =  CUR_BILL."ENTR_DT",
				  NDB."ADJ_RSN_CD"     =  CUR_BILL."ADJ_RSN_CD",
				  NDB."BAL_IMPCT_CD"   =  CUR_BILL."BAL_IMPCT_CD",
				  NDB."FEAT_CD"        =  CUR_BILL."FEAT_CD",
				  NDB."AMT"            =  CUR_BILL."AMT",
				  NDB."BILL_CYCL"      =  CUR_BILL."BILL_CYCL",
			 	  NDB."MODIFIED_TS"    =  LV_CUR_UTC,
			 	  NDB.INSERT_TS        =  LV_CUR_UTC
		    WHERE NDB."PRM_CONTR_CUST" =  CUR_BILL."PRM_CONTR_CUST" 
			AND   NDB."ALTN_CONTR_NUM" =  CUR_BILL."ALTN_CONTR_NUM";
		 
		 		          
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_TAP_BILL
					   ("PRM_CONTR_CUST", 
					    "ALTN_CONTR_NUM") 
			    VALUES (CUR_BILL."PRM_CONTR_CUST", 
				 		CUR_BILL."ALTN_CONTR_NUM");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("PRM_CONTR_CUST", 
					   	"ALTN_CONTR_NUM") 
		        VALUES (CUR_BILL."PRM_CONTR_CUST", 
					   	CUR_BILL."ALTN_CONTR_NUM");       

    END IF;  
    
END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::TAP_BILL
UPDATE "LAND"."IFRS_R1.LAND::TAP_BILL" A
  FROM "LAND"."IFRS_R1.LAND::TAP_BILL" A 
 INNER JOIN #UPDATE_TAP_BILL B 
    ON A."PRM_CONTR_CUST" = B."PRM_CONTR_CUST"
   AND A."ALTN_CONTR_NUM" = B."ALTN_CONTR_NUM"
   SET NDB_TS             = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_CUST_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_CUST_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."PRM_CONTR_CUST"     = B."PRM_CONTR_CUST"
   AND A."ALTN_CONTR_NUM"     = B."ALTN_CONTR_NUM"
   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;