PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_MDM_INT_BILL_CD" 
(IN IP_CYCL_ID NVARCHAR(3),
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_MDM_INT_BILL_CD
-- Created By      : BC_EY96110 (Arpit)       
-- Create Date     : 03-22-2017
-- Description     : Data Inserted using Calculation View - CA_MDM_INT_BILL_CD
--                   to NDB Table - MDM_INT_BILL_CD_PRC Using this stored procedure.
--                   MDM Billing Code includes data from landing table MDM_INT_BILL_CD.			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);


-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG    INTEGER := 0;
DECLARE LV_PREV_RECORD	      NVARCHAR(100) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
DECLARE CURSOR C_IBC FOR
       SELECT
             "CD_NM",
			 "LOB_NM",
			 "CD_TY",
			 "PROD_SHRT_NM",
			 "PROD_ENG_NM",
			 "REFERENCE_EFFECTIVE_DT",
			 "REFERENCE_EXPIRY_DT",
			 "CD_ENG_DESC",
			 "PRC",
			 "PROV",
			 "FLAG_EXISTING_RECORD",
			 "EFFECTIVE_DATE_PREV_DAY",
			 "CYCL_ID",
			 "SEQ_ID",
			 "INT_BILL_CD_PRIMARY_KEY",
			 "OFFR_TY",
			 "OFFR_TY_1",
			 "ELIG_LOBs",
			 "REQ_NUM_OF_NEW_LOB_SEL",
			 "MANDT_LOBS",
			 "ATTR_SHRT_NM",
			 "ATTR_ENG_NM",
			 "ATTR_VAL_SHRT_NM",
			 "ATTR_VAL_ENG_NM",
			 "SEL_OPERTR",
			 "MANDT_LOBS_1",
			 "REQ_NUM_OF_NEW_LOB_SEL_1",
			 "ELIG_LOBS_1",
			 "STRT_SELL_DT",
			 "STOP_SOLD_DT" ,
			 "ERROR_STATUS",
	 	     "ERROR_CODE",
	         "CONCAT_PK"
        FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_MDM_INTERNT_BILL_CD"
	         (PLACEHOLDER."$$IP_CYCL_ID$$" => :IP_CYCL_ID)
    ORDER BY  "PROD_SHRT_NM", "CD_NM", "REFERENCE_EFFECTIVE_DT";
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_MDM_INT_BILL_CD("INT_BILL_CD_PRIMARY_KEY" NVARCHAR(110));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (CD_NM NVARCHAR(100),PROD_SHRT_NM NVARCHAR(100) , REFERENCE_EFFECTIVE_DT NVARCHAR(100));    
    
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------
FOR CUR_IBC AS C_IBC DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
 	  			
			   -- Insert record into error table
			   	  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_INT_BILL_CD_PRC_EH"(
			   	  		     "CD_NM",
							 "LOB_NM",
							 "CD_TY",
							 "PROD_SHRT_NM",
							 "PROD_ENG_NM",
							 "REFERENCE_EFFECTIVE_DT",
							 "REFERENCE_EXPIRY_DT",
							 "CD_ENG_DESC",
							 "PRC",
							 "PROV",
							 "OFFR_TY",
							 "OFFR_TY_1",
							 "ELIG_LOBs",
							 "REQ_NUM_OF_NEW_LOB_SEL",
							 "MANDT_LOBS",
							 "ATTR_SHRT_NM",
							 "ATTR_ENG_NM",
							 "ATTR_VAL_SHRT_NM",
							 "ATTR_VAL_ENG_NM",
							 "SEL_OPERTR",
							 "MANDT_LOBS_1",
							 "REQ_NUM_OF_NEW_LOB_SEL_1",
							 "ELIG_LOBS_1",
							 "STRT_SELL_DT",
							 "STOP_SOLD_DT",
							 "INSRT_TS",
							 "ERROR_CODE",
					         "TECHNICAL_MESSAGE",
					         "ERROR_CREATE_TS")
				      VALUES ( 
				      	     CUR_IBC."CD_NM",
							 CUR_IBC."LOB_NM",
							 CUR_IBC."CD_TY",
							 CUR_IBC."PROD_SHRT_NM",
							 CUR_IBC."PROD_ENG_NM",
							 CUR_IBC."REFERENCE_EFFECTIVE_DT",
							 CUR_IBC."REFERENCE_EXPIRY_DT",
							 CUR_IBC."CD_ENG_DESC",
							 CUR_IBC."PRC",
							 CUR_IBC."PROV",
							 CUR_IBC."OFFR_TY",
							 CUR_IBC."OFFR_TY_1",
							 CUR_IBC."ELIG_LOBs",
							 CUR_IBC."REQ_NUM_OF_NEW_LOB_SEL",
							 CUR_IBC."MANDT_LOBS",
							 CUR_IBC."ATTR_SHRT_NM",
							 CUR_IBC."ATTR_ENG_NM",
							 CUR_IBC."ATTR_VAL_SHRT_NM",
							 CUR_IBC."ATTR_VAL_ENG_NM",
							 CUR_IBC."SEL_OPERTR",
							 CUR_IBC."MANDT_LOBS_1",
							 CUR_IBC."REQ_NUM_OF_NEW_LOB_SEL_1",
							 CUR_IBC."ELIG_LOBS_1",
							 CUR_IBC."STRT_SELL_DT",
							 CUR_IBC."STOP_SOLD_DT",
							 LV_CUR_UTC,
				      		 ::SQL_ERROR_CODE,
					         ::SQL_ERROR_MESSAGE,
					         LV_CUR_UTC);
					          
			     LV_ERROR_FLAG := 'Y';
			   	LV_LOOP_ERROR_FLAG := 1;
	END;	
	
	        -- FOR CLEARING THE VARIABLES

	IF ((LV_PREV_RECORD IS NULL )OR (CUR_IBC."CONCAT_PK" != LV_PREV_RECORD)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "CUR_IBC"."CONCAT_PK";
		
    END IF;
	
	--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_IBC.ERROR_STATUS = '1'  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_IBC."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
	
	  -- Insert record into error table
			   	  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_INT_BILL_CD_PRC_EH"(
			   	  		     "CD_NM",
							 "LOB_NM",
							 "CD_TY",
							 "PROD_SHRT_NM",
							 "PROD_ENG_NM",
							 "REFERENCE_EFFECTIVE_DT",
							 "REFERENCE_EXPIRY_DT",
							 "CD_ENG_DESC",
							 "PRC",
							 "PROV",
							 "OFFR_TY",
							 "OFFR_TY_1",
							 "ELIG_LOBs",
							 "REQ_NUM_OF_NEW_LOB_SEL",
							 "MANDT_LOBS",
							 "ATTR_SHRT_NM",
							 "ATTR_ENG_NM",
							 "ATTR_VAL_SHRT_NM",
							 "ATTR_VAL_ENG_NM",
							 "SEL_OPERTR",
							 "MANDT_LOBS_1",
							 "REQ_NUM_OF_NEW_LOB_SEL_1",
							 "ELIG_LOBS_1",
							 "STRT_SELL_DT",
							 "STOP_SOLD_DT",
							 "INSRT_TS",
							 "ERROR_CODE",
					         "ERROR_CREATE_TS")
				      VALUES ( 
				      	     CUR_IBC."CD_NM",
							 CUR_IBC."LOB_NM",
							 CUR_IBC."CD_TY",
							 CUR_IBC."PROD_SHRT_NM",
							 CUR_IBC."PROD_ENG_NM",
							 CUR_IBC."REFERENCE_EFFECTIVE_DT",
							 CUR_IBC."REFERENCE_EXPIRY_DT",
							 CUR_IBC."CD_ENG_DESC",
							 CUR_IBC."PRC",
							 CUR_IBC."PROV",
							 CUR_IBC."OFFR_TY",
							 CUR_IBC."OFFR_TY_1",
							 CUR_IBC."ELIG_LOBs",
							 CUR_IBC."REQ_NUM_OF_NEW_LOB_SEL",
							 CUR_IBC."MANDT_LOBS",
							 CUR_IBC."ATTR_SHRT_NM",
							 CUR_IBC."ATTR_ENG_NM",
							 CUR_IBC."ATTR_VAL_SHRT_NM",
							 CUR_IBC."ATTR_VAL_ENG_NM",
							 CUR_IBC."SEL_OPERTR",
							 CUR_IBC."MANDT_LOBS_1",
							 CUR_IBC."REQ_NUM_OF_NEW_LOB_SEL_1",
							 CUR_IBC."ELIG_LOBS_1",
							 CUR_IBC."STRT_SELL_DT",
							 CUR_IBC."STOP_SOLD_DT",
							 LV_CUR_UTC,
				      		 :CURRENT_ERROR,
					         LV_CUR_UTC);
	
	       END FOR;
    
    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
    
   ELSE 
         IF CUR_IBC.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
	-- Insert record into error table
			   	  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_INT_BILL_CD_PRC_EH"(
			   	  		     "CD_NM",
							 "LOB_NM",
							 "CD_TY",
							 "PROD_SHRT_NM",
							 "PROD_ENG_NM",
							 "REFERENCE_EFFECTIVE_DT",
							 "REFERENCE_EXPIRY_DT",
							 "CD_ENG_DESC",
							 "PRC",
							 "PROV",
							 "OFFR_TY",
							 "OFFR_TY_1",
							 "ELIG_LOBs",
							 "REQ_NUM_OF_NEW_LOB_SEL",
							 "MANDT_LOBS",
							 "ATTR_SHRT_NM",
							 "ATTR_ENG_NM",
							 "ATTR_VAL_SHRT_NM",
							 "ATTR_VAL_ENG_NM",
							 "SEL_OPERTR",
							 "MANDT_LOBS_1",
							 "REQ_NUM_OF_NEW_LOB_SEL_1",
							 "ELIG_LOBS_1",
							 "STRT_SELL_DT",
							 "STOP_SOLD_DT",
							 "INSRT_TS",
							 "ERROR_CODE",
					         "ERROR_CREATE_TS")
				      VALUES ( 
				      	     CUR_IBC."CD_NM",
							 CUR_IBC."LOB_NM",
							 CUR_IBC."CD_TY",
							 CUR_IBC."PROD_SHRT_NM",
							 CUR_IBC."PROD_ENG_NM",
							 CUR_IBC."REFERENCE_EFFECTIVE_DT",
							 CUR_IBC."REFERENCE_EXPIRY_DT",
							 CUR_IBC."CD_ENG_DESC",
							 CUR_IBC."PRC",
							 CUR_IBC."PROV",
							 CUR_IBC."OFFR_TY",
							 CUR_IBC."OFFR_TY_1",
							 CUR_IBC."ELIG_LOBs",
							 CUR_IBC."REQ_NUM_OF_NEW_LOB_SEL",
							 CUR_IBC."MANDT_LOBS",
							 CUR_IBC."ATTR_SHRT_NM",
							 CUR_IBC."ATTR_ENG_NM",
							 CUR_IBC."ATTR_VAL_SHRT_NM",
							 CUR_IBC."ATTR_VAL_ENG_NM",
							 CUR_IBC."SEL_OPERTR",
							 CUR_IBC."MANDT_LOBS_1",
							 CUR_IBC."REQ_NUM_OF_NEW_LOB_SEL_1",
							 CUR_IBC."ELIG_LOBS_1",
							 CUR_IBC."STRT_SELL_DT",
							 CUR_IBC."STOP_SOLD_DT",
							 LV_CUR_UTC,
				      		 'PREVIOUS VERSION IN ERROR',
					         LV_CUR_UTC);
	
 -- Processing for Successful Records
 --   If Record exists in the Target NDB Table
      IF CUR_IBC.FLAG_EXISTING_RECORD = 'U' THEN
      
      	BEGIN AUTONOMOUS TRANSACTION   
    
	--     Update the target NDB table
		   UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_INT_BILL_CD_PRC" NDB 
			  SET NDB.REFERENCE_EXPIRY_DT = CUR_IBC.EFFECTIVE_DATE_PREV_DAY,
		 		  NDB.MODIFIED_TS 		  = LV_CUR_UTC 
			WHERE CUR_IBC."CD_NM" 		  = NDB."CD_NM"  
			  AND CUR_IBC."PROD_SHRT_NM"  = NDB."PROD_SHRT_NM"
			  AND NDB.REFERENCE_EXPIRY_DT = '99991231';
   	  
--    Insert the Incoming new record
		  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_INT_BILL_CD_PRC"(
			          	     "CD_NM",
							 "LOB_NM",
							 "CD_TY",
							 "PROD_SHRT_NM",
							 "PROD_ENG_NM",
							 "REFERENCE_EFFECTIVE_DT",
							 "REFERENCE_EXPIRY_DT",
							 "CD_ENG_DESC",
							 "PRC",
							 "PROV",
							 "OFFR_TY",
							 "OFFR_TY_1",
							 "ELIG_LOBs",
							 "REQ_NUM_OF_NEW_LOB_SEL",
							 "MANDT_LOBS",
							 "ATTR_SHRT_NM",
							 "ATTR_ENG_NM",
							 "ATTR_VAL_SHRT_NM",
							 "ATTR_VAL_ENG_NM",
							 "SEL_OPERTR",
							 "MANDT_LOBS_1",
							 "REQ_NUM_OF_NEW_LOB_SEL_1",
							 "ELIG_LOBS_1",
							 "STRT_SELL_DT",
							 "STOP_SOLD_DT",
					         "INSRT_TS")
		       	     VALUES (CUR_IBC."CD_NM",
							 CUR_IBC."LOB_NM",
							 CUR_IBC."CD_TY",
							 CUR_IBC."PROD_SHRT_NM",
							 CUR_IBC."PROD_ENG_NM",
							 CUR_IBC."REFERENCE_EFFECTIVE_DT",
							 CUR_IBC."REFERENCE_EXPIRY_DT",
							 CUR_IBC."CD_ENG_DESC",
							 CUR_IBC."PRC",
							 CUR_IBC."PROV",
							 CUR_IBC."OFFR_TY",
							 CUR_IBC."OFFR_TY_1",
							 CUR_IBC."ELIG_LOBs",
							 CUR_IBC."REQ_NUM_OF_NEW_LOB_SEL",
							 CUR_IBC."MANDT_LOBS",
							 CUR_IBC."ATTR_SHRT_NM",
							 CUR_IBC."ATTR_ENG_NM",
							 CUR_IBC."ATTR_VAL_SHRT_NM",
							 CUR_IBC."ATTR_VAL_ENG_NM",
							 CUR_IBC."SEL_OPERTR",
							 CUR_IBC."MANDT_LOBS_1",
							 CUR_IBC."REQ_NUM_OF_NEW_LOB_SEL_1",
							 CUR_IBC."ELIG_LOBS_1",
							 CUR_IBC."STRT_SELL_DT",
							 CUR_IBC."STOP_SOLD_DT",
					         LV_CUR_UTC);
      	END;         
		          
		          
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_MDM_INT_BILL_CD
					   ("INT_BILL_CD_PRIMARY_KEY") 
			    VALUES (CUR_IBC."INT_BILL_CD_PRIMARY_KEY");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					    ("CD_NM",
					    "PROD_SHRT_NM",
					    "REFERENCE_EFFECTIVE_DT") 
			    VALUES (CUR_IBC."CD_NM",
				 		CUR_IBC."PROD_SHRT_NM",
				 		CUR_IBC."REFERENCE_EFFECTIVE_DT"
				 		);
					   	
    ELSEIF CUR_IBC.FLAG_EXISTING_RECORD = 'I' THEN  	
    	          
--    Insert Records into the target NDB table INT_CUST	  

		  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_INT_BILL_CD_PRC"(
			         	     "CD_NM",
							 "LOB_NM",
							 "CD_TY",
							 "PROD_SHRT_NM",
							 "PROD_ENG_NM",
							 "REFERENCE_EFFECTIVE_DT",
							 "REFERENCE_EXPIRY_DT",
							 "CD_ENG_DESC",
							 "PRC",
							 "PROV",
							 "OFFR_TY",
							 "OFFR_TY_1",
							 "ELIG_LOBs",
							 "REQ_NUM_OF_NEW_LOB_SEL",
							 "MANDT_LOBS",
							 "ATTR_SHRT_NM",
							 "ATTR_ENG_NM",
							 "ATTR_VAL_SHRT_NM",
							 "ATTR_VAL_ENG_NM",
							 "SEL_OPERTR",
							 "MANDT_LOBS_1",
							 "REQ_NUM_OF_NEW_LOB_SEL_1",
							 "ELIG_LOBS_1",
							 "STRT_SELL_DT",
							 "STOP_SOLD_DT",
					         "INSRT_TS")
		       	     VALUES (CUR_IBC."CD_NM",
							 CUR_IBC."LOB_NM",
							 CUR_IBC."CD_TY",
							 CUR_IBC."PROD_SHRT_NM",
							 CUR_IBC."PROD_ENG_NM",
							 CUR_IBC."REFERENCE_EFFECTIVE_DT",
							 CUR_IBC."REFERENCE_EXPIRY_DT",
							 CUR_IBC."CD_ENG_DESC",
							 CUR_IBC."PRC",
							 CUR_IBC."PROV",
							 CUR_IBC."OFFR_TY",
							 CUR_IBC."OFFR_TY_1",
							 CUR_IBC."ELIG_LOBs",
							 CUR_IBC."REQ_NUM_OF_NEW_LOB_SEL",
							 CUR_IBC."MANDT_LOBS",
							 CUR_IBC."ATTR_SHRT_NM",
							 CUR_IBC."ATTR_ENG_NM",
							 CUR_IBC."ATTR_VAL_SHRT_NM",
							 CUR_IBC."ATTR_VAL_ENG_NM",
							 CUR_IBC."SEL_OPERTR",
							 CUR_IBC."MANDT_LOBS_1",
							 CUR_IBC."REQ_NUM_OF_NEW_LOB_SEL_1",
							 CUR_IBC."ELIG_LOBS_1",
							 CUR_IBC."STRT_SELL_DT",
							 CUR_IBC."STOP_SOLD_DT",
			                 LV_CUR_UTC);
			             	  
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		    INSERT INTO #UPDATE_MDM_INT_BILL_CD
					  ("INT_BILL_CD_PRIMARY_KEY") 
			    VALUES (CUR_IBC."INT_BILL_CD_PRIMARY_KEY");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("CD_NM",
					    "PROD_SHRT_NM",
					    "REFERENCE_EFFECTIVE_DT") 
			    VALUES ( CUR_IBC."CD_NM",
				 		 CUR_IBC."PROD_SHRT_NM",
				 		 CUR_IBC."REFERENCE_EFFECTIVE_DT"
				 		 );
   
	 END IF;   
    END IF;
   END IF;
  END IF; 
END FOR;
   

------------------------------------------\--------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::MDM_INTERNT_BILL_CD
UPDATE "LAND"."IFRS_R1.LAND::MDM_INTERNT_BILL_CD" A
  FROM "LAND"."IFRS_R1.LAND::MDM_INTERNT_BILL_CD" A 
 INNER JOIN #UPDATE_MDM_INT_BILL_CD B 
    ON A."INT_BILL_CD_PRIMARY_KEY" = B."INT_BILL_CD_PRIMARY_KEY"
   SET NDB_TS           = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_INT_BILL_CD_PRC_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_INT_BILL_CD_PRC_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."CD_NM"              = B."CD_NM"
   AND A."PROD_SHRT_NM"       = B."PROD_SHRT_NM"
   AND A.REFERENCE_EFFECTIVE_DT = B.REFERENCE_EFFECTIVE_DT
   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

       OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	   OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;				   		  	  