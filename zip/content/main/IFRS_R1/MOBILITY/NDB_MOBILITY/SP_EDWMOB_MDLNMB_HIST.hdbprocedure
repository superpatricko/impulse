PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_EDWMOB_MDLNMB_HIST"
(IN IP_EFF_DT DATE,
OUT OP_STATUS NVARCHAR(100))
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA
	 AS
	 
BEGIN

----------------------------------------------------------------------
-- Procedure Title : SP_EDWMOB_FEATURE_HIST
--
-- Created By      : BC_EZ04916 (RUKHSAR)          Date : 27/09/2017
-- 
-- Procedure Description : It is used to Upsert data in NDB Table.
--                         NDB_TS is updated in Landing Table         
--                         after data is loaded in NDB.
--Project :Bell Canada
--
--
----------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
----------------------------------------------------------------------

----------------------------------------------------------------------

	DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
	DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
	DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
	DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
	DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
	DECLARE i					INTEGER;
	DECLARE RECORD_COUNT		INTEGER;
	DECLARE CURRENT_ERROR		NVARCHAR(100);

	-- New variables for version sequence check
	DECLARE LV_LOOP_ERROR_FLAG      INTEGER := 0;
	DECLARE LV_PREV_MODEL_NUMBER	NVARCHAR(8) := NULL;
-------------------------------------------------------------------------------------------------------	
 DECLARE CURSOR CA_NM1_EDW_REF_MDLNMB_HIST FOR
	SELECT
	 "REFERENCE_EFFECTIVE_DT",	 
	 "EFFECTIVE_DT",
	 "MODEL_NUMBER",
	 "ACT_CREDIT_TYPE",
	 "ALT_MODEL_DESC",
	 "DEVICE_GROUP_CD",
	 "EQUIPMENT_TYPE",
	 "EQUIP_DIST_TYPE",
	 "EXPIRATION_DATE",
	 "HIGH_VALUE_IND",
	 "INSTAL_HVU",
	 "IOTA_ENABL_CD",
	 "MANF_MODEL_NUMBER",
	 "MANUFACTURER_CODE",
	 "MODEL_BRAND_CD",
	 "MODEL_DESC",
	 "MODEL_GROUP_CD",
	 "MODES_SUPPORTED",
	 "ORIGINAL_COST",
	 "PRL_UPD_IND",
	 "PRODUCT_TYPE",
	 "SELF_SERV_ACT_CD",
	 "UPGRADE_TYPE",
	 "SELL_PRICE",
	 "IS_20403501",
	 "REFERENCE_EXPIRY_DT",
	 "CYCL_ID", 
	 "ERROR_CODE",
	 "ERROR_STATUS",
	 "EXISTING_RECORD",
	 "EFFECTIVE_DATE_PREV_DAY"
FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_NM1_EDW_REF_MDLNMB_HIST" 
	(PLACEHOLDER."$$IP_EFF_DT$$"=> :IP_EFF_DT)
	ORDER BY "MODEL_NUMBER","REFERENCE_EFFECTIVE_DT","EFFECTIVE_DT";

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_NM1_EDW_REF_MDLNMB_HIST(MODEL_NUMBER NVARCHAR(8), REFERENCE_EFFECTIVE_DT DATE);
    CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(MODEL_NUMBER NVARCHAR(100),REFERENCE_EFFECTIVE_DT NVARCHAR(100));
-------------------------------------------------------------------------------------------------------------------------------------------------------------------	
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 	
FOR CUR_MDL AS CA_NM1_EDW_REF_MDLNMB_HIST DO

-- Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION
			-- Define Exit Handler
			DECLARE EXIT HANDLER FOR SQLEXCEPTION 
			BEGIN AUTONOMOUS TRANSACTION 
			END;
	INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_MDLNMB_HIST_EH" (
			 "REFERENCE_EFFECTIVE_DT",
			 "EFFECTIVE_DATE",
             "MODEL_NUMBER",
             "ACT_CREDIT_TYPE",
             "ALT_MODEL_DESC",
             "DEVICE_GROUP_CD",
             "EQUIP_DIST_TYPE",
             "EQUIPMENT_TYPE",
             "EXPIRATION_DATE",
              "REFERENCE_EXPIRY_DT",
             "HIGH_VALUE_IND",
             "INSTAL_HVU",
             "IOTA_ENABL_CD",
             "MANF_MODEL_NUMBER",
             "MANUFACTURER_CODE",
             "MODEL_BRAND_CD",
             "MODEL_DESC",
             "MODEL_GROUP_CD",
             "MODES_SUPPORTED",
             "ORIGINAL_COST",
             "PRL_UPD_IND",
             "PRODUCT_TYPE",
             "SELF_SERV_ACT_CD",
             "SELL_PRICE",
             "UPGRADE_TYPE",
             "ERROR_CODE",
             "TECHNICAL_MESSAGE",
             "ERROR_CREATE_TS")
             VALUES (
			 CUR_MDL."REFERENCE_EFFECTIVE_DT",
			 CUR_MDL.EFFECTIVE_DT,
			 CUR_MDL.MODEL_NUMBER,
			 CUR_MDL.ACT_CREDIT_TYPE,
			 CUR_MDL.ALT_MODEL_DESC,
			 CUR_MDL.DEVICE_GROUP_CD,
			 CUR_MDL.EQUIP_DIST_TYPE,
			 CUR_MDL.EQUIPMENT_TYPE,
			 CUR_MDL.EXPIRATION_DATE,
			 CUR_MDL.REFERENCE_EXPIRY_DT,			 
			 CUR_MDL.HIGH_VALUE_IND,
			 CUR_MDL.INSTAL_HVU,
			 CUR_MDL.IOTA_ENABL_CD,
			 CUR_MDL.MANF_MODEL_NUMBER,
			 CUR_MDL.MANUFACTURER_CODE,
             CUR_MDL.MODEL_BRAND_CD,
             CUR_MDL.MODEL_DESC,
             CUR_MDL.MODEL_GROUP_CD,
             CUR_MDL.MODES_SUPPORTED,
             CUR_MDL.ORIGINAL_COST,
             CUR_MDL.PRL_UPD_IND,
             CUR_MDL.PRODUCT_TYPE,
             CUR_MDL.SELF_SERV_ACT_CD,
             CUR_MDL.SELL_PRICE,
             CUR_MDL.UPGRADE_TYPE,
			 ::SQL_ERROR_CODE,
			 ::SQL_ERROR_MESSAGE,
		  	 LV_CUR_UTC);
		  	 			
			LV_ERROR_FLAG := 'Y';
			
			-- New code for version sequence check 
			LV_LOOP_ERROR_FLAG := 1;
		END;
		
		-- New code for version sequence check
		-- FOR CLEARING THE VARIABLES
		IF ( LV_PREV_MODEL_NUMBER IS NULL OR CUR_MDL."MODEL_NUMBER" != LV_PREV_MODEL_NUMBER) THEN	
			LV_LOOP_ERROR_FLAG := 0;
			LV_PREV_MODEL_NUMBER := "CUR_MDL"."MODEL_NUMBER";
	    END IF;
	    
    --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_MDL.ERROR_STATUS = 1  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_MDL."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		 -- Insert into the Error Table
		 		INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_MDLNMB_HIST_EH" (
			 "REFERENCE_EFFECTIVE_DT",
             "EFFECTIVE_DATE",
             "MODEL_NUMBER",
             "ACT_CREDIT_TYPE",
             "ALT_MODEL_DESC",
             "DEVICE_GROUP_CD",
             "EQUIP_DIST_TYPE",
             "EQUIPMENT_TYPE",
             "EXPIRATION_DATE",
             "REFERENCE_EXPIRY_DT",
             "HIGH_VALUE_IND",
             "INSTAL_HVU",
             "IOTA_ENABL_CD",
             "MANF_MODEL_NUMBER",
             "MANUFACTURER_CODE",
             "MODEL_BRAND_CD",
             "MODEL_DESC",
             "MODEL_GROUP_CD",
             "MODES_SUPPORTED",
             "ORIGINAL_COST",
             "PRL_UPD_IND",
             "PRODUCT_TYPE",
             "SELF_SERV_ACT_CD",
             "SELL_PRICE",
             "UPGRADE_TYPE",
             "ERROR_CODE",
             "ERROR_CREATE_TS"
			 ) VALUES (
			 CUR_MDL."REFERENCE_EFFECTIVE_DT",
			 CUR_MDL.EFFECTIVE_DT,
			 CUR_MDL.MODEL_NUMBER,
			 CUR_MDL.ACT_CREDIT_TYPE,
			 CUR_MDL.ALT_MODEL_DESC,
			 CUR_MDL.DEVICE_GROUP_CD,
			 CUR_MDL.EQUIP_DIST_TYPE,
			 CUR_MDL.EQUIPMENT_TYPE,
			 CUR_MDL.EXPIRATION_DATE,
			 CUR_MDL.REFERENCE_EXPIRY_DT,			 
			 CUR_MDL.HIGH_VALUE_IND,
			 CUR_MDL.INSTAL_HVU,
			 CUR_MDL.IOTA_ENABL_CD,
			 CUR_MDL.MANF_MODEL_NUMBER,
			 CUR_MDL.MANUFACTURER_CODE,
             CUR_MDL.MODEL_BRAND_CD,
             CUR_MDL.MODEL_DESC,
             CUR_MDL.MODEL_GROUP_CD,
             CUR_MDL.MODES_SUPPORTED,
             CUR_MDL.ORIGINAL_COST,
             CUR_MDL.PRL_UPD_IND,
             CUR_MDL.PRODUCT_TYPE,
             CUR_MDL.SELF_SERV_ACT_CD,
             CUR_MDL.SELL_PRICE,
             CUR_MDL.UPGRADE_TYPE,
				 :CURRENT_ERROR,
				 LV_CUR_UTC
				 );
		
	    END FOR ;
	    
	    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
	    
	    
			-- Checking older record having same Feat_CD has some issue in loading then other records should be send to Error Handling table.
			--If ERROR_STATUS = ‘0’ and previous record went to error table then present record will go to error table with ERROR_CODE = 'PREVIOUS VERSION IN ERROR'
			
			ELSE 
         
         IF CUR_MDL.ERROR_STATUS = '0' THEN
			
			IF LV_LOOP_ERROR_FLAG = 1 THEN
				
				INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_MDLNMB_HIST_EH" (
			 "REFERENCE_EFFECTIVE_DT",
             "EFFECTIVE_DATE",
             "MODEL_NUMBER",
             "ACT_CREDIT_TYPE",
             "ALT_MODEL_DESC",
             "DEVICE_GROUP_CD",
             "EQUIP_DIST_TYPE",
             "EQUIPMENT_TYPE",
             "EXPIRATION_DATE",
             "REFERENCE_EXPIRY_DT",
             "HIGH_VALUE_IND",
             "INSTAL_HVU",
             "IOTA_ENABL_CD",
             "MANF_MODEL_NUMBER",
             "MANUFACTURER_CODE",
             "MODEL_BRAND_CD",
             "MODEL_DESC",
             "MODEL_GROUP_CD",
             "MODES_SUPPORTED",
             "ORIGINAL_COST",
             "PRL_UPD_IND",
             "PRODUCT_TYPE",
             "SELF_SERV_ACT_CD",
             "SELL_PRICE",
             "UPGRADE_TYPE",
             "ERROR_CODE",
             "TECHNICAL_MESSAGE",
             "ERROR_CREATE_TS"
			 ) VALUES (
			 CUR_MDL."REFERENCE_EFFECTIVE_DT",
			 CUR_MDL.EFFECTIVE_DT,
			 CUR_MDL.MODEL_NUMBER,
			 CUR_MDL.ACT_CREDIT_TYPE,
			 CUR_MDL.ALT_MODEL_DESC,
			 CUR_MDL.DEVICE_GROUP_CD,
			 CUR_MDL.EQUIP_DIST_TYPE,
			 CUR_MDL.EQUIPMENT_TYPE,
			 CUR_MDL.EXPIRATION_DATE,
			 CUR_MDL.REFERENCE_EXPIRY_DT,			 
			 CUR_MDL.HIGH_VALUE_IND,
			 CUR_MDL.INSTAL_HVU,
			 CUR_MDL.IOTA_ENABL_CD,
			 CUR_MDL.MANF_MODEL_NUMBER,
			 CUR_MDL.MANUFACTURER_CODE,
             CUR_MDL.MODEL_BRAND_CD,
             CUR_MDL.MODEL_DESC,
             CUR_MDL.MODEL_GROUP_CD,
             CUR_MDL.MODES_SUPPORTED,
             CUR_MDL.ORIGINAL_COST,
             CUR_MDL.PRL_UPD_IND,
             CUR_MDL.PRODUCT_TYPE,
             CUR_MDL.SELF_SERV_ACT_CD,
             CUR_MDL.SELL_PRICE,
             CUR_MDL.UPGRADE_TYPE,
              :CURRENT_ERROR,
				 'PREVIOUS VERSION IN ERROR',
				 LV_CUR_UTC
				 );
				 
				 
   ELSE
			
   IF CUR_MDL.EXISTING_RECORD = 'U' THEN
					
	BEGIN AUTONOMOUS TRANSACTION
	UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_MDLNMB_HIST" A 
	SET REFERENCE_EXPIRY_DT = CUR_MDL.EFFECTIVE_DATE_PREV_DAY
	WHERE A.MODEL_NUMBER=CUR_MDL.MODEL_NUMBER
	AND A.REFERENCE_EXPIRY_DT = '99991231';
							
	INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_MDLNMB_HIST" (
			 "REFERENCE_EFFECTIVE_DT",
             "EFFECTIVE_DATE",
			 "MODEL_NUMBER",
             "ACT_CREDIT_TYPE",
             "ALT_MODEL_DESC",
             "DEVICE_GROUP_CD",
             "EQUIP_DIST_TYPE",
             "EQUIPMENT_TYPE",
             "EXPIRATION_DATE",
             "REFERENCE_EXPIRY_DT",
             "HIGH_VALUE_IND",
             "INSTAL_HVU",
             "IOTA_ENABL_CD",
             "MANF_MODEL_NUMBER",
             "MANUFACTURER_CODE",
             "MODEL_BRAND_CD",
             "MODEL_DESC",
             "MODEL_GROUP_CD",
             "MODES_SUPPORTED",
             "ORIGINAL_COST",
             "PRL_UPD_IND",
             "PRODUCT_TYPE",
             "SELF_SERV_ACT_CD",
             "SELL_PRICE",
             "UPGRADE_TYPE"
			 ) VALUES (
			 CUR_MDL."REFERENCE_EFFECTIVE_DT",
			 CUR_MDL.EFFECTIVE_DT,
			 CUR_MDL.MODEL_NUMBER,
			 CUR_MDL.ACT_CREDIT_TYPE,
			 CUR_MDL.ALT_MODEL_DESC,
			 CUR_MDL.DEVICE_GROUP_CD,
			 CUR_MDL.EQUIP_DIST_TYPE,
			 CUR_MDL.EQUIPMENT_TYPE,
			 CUR_MDL.EXPIRATION_DATE,
			 CUR_MDL.REFERENCE_EXPIRY_DT,			 
			 CUR_MDL.HIGH_VALUE_IND,
			 CUR_MDL.INSTAL_HVU,
			 CUR_MDL.IOTA_ENABL_CD,
			 CUR_MDL.MANF_MODEL_NUMBER,
			 CUR_MDL.MANUFACTURER_CODE,
             CUR_MDL.MODEL_BRAND_CD,
             CUR_MDL.MODEL_DESC,
             CUR_MDL.MODEL_GROUP_CD,
             CUR_MDL.MODES_SUPPORTED,
             CUR_MDL.ORIGINAL_COST,
             CUR_MDL.PRL_UPD_IND,
             CUR_MDL.PRODUCT_TYPE,
             CUR_MDL.SELF_SERV_ACT_CD,
             CUR_MDL.SELL_PRICE,
             CUR_MDL.UPGRADE_TYPE);
							 
							 
							 END;
					 	
					 	
			     			 INSERT INTO #UPDATE_NM1_EDW_REF_MDLNMB_HIST 
			     			 										   (
			     			 										    REFERENCE_EFFECTIVE_DT,
			     			 										    MODEL_NUMBER     			 										    
			     			                                           ) VALUES (
			     			                                           
			     			                                           CUR_MDL."REFERENCE_EFFECTIVE_DT",
			     			                                           CUR_MDL."MODEL_NUMBER");
			     			 INSERT INTO #UPDATE_EH_DELETION
							    				  (MODEL_NUMBER,					    				  
									              REFERENCE_EFFECTIVE_DT)     
		 	     	  					  VALUES (CUR_MDL."MODEL_NUMBER",
							 	                  CUR_MDL.REFERENCE_EFFECTIVE_DT);
		     			
		     		ELSEIF CUR_MDL.EXISTING_RECORD = 'I' THEN
		    			
						BEGIN AUTONOMOUS TRANSACTION     		
		     			INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_MDLNMB_HIST" (
			 "REFERENCE_EFFECTIVE_DT",
             "EFFECTIVE_DATE",
			 "MODEL_NUMBER",
             "ACT_CREDIT_TYPE",
             "ALT_MODEL_DESC",
             "DEVICE_GROUP_CD",
             "EQUIP_DIST_TYPE",
             "EQUIPMENT_TYPE",
             "EXPIRATION_DATE",
             "REFERENCE_EXPIRY_DT",
             "HIGH_VALUE_IND",
             "INSTAL_HVU",
             "IOTA_ENABL_CD",
             "MANF_MODEL_NUMBER",
             "MANUFACTURER_CODE",
             "MODEL_BRAND_CD",
             "MODEL_DESC",
             "MODEL_GROUP_CD",
             "MODES_SUPPORTED",
             "ORIGINAL_COST",
             "PRL_UPD_IND",
             "PRODUCT_TYPE",
             "SELF_SERV_ACT_CD",
             "SELL_PRICE",
             "UPGRADE_TYPE"
			 ) VALUES (
			 CUR_MDL."REFERENCE_EFFECTIVE_DT",
			 CUR_MDL.EFFECTIVE_DT,
			 CUR_MDL.MODEL_NUMBER,
			 CUR_MDL.ACT_CREDIT_TYPE,
			 CUR_MDL.ALT_MODEL_DESC,
			 CUR_MDL.DEVICE_GROUP_CD,
			 CUR_MDL.EQUIP_DIST_TYPE,
			 CUR_MDL.EQUIPMENT_TYPE,
			 CUR_MDL.EXPIRATION_DATE,
			 CUR_MDL.REFERENCE_EXPIRY_DT,			 
			 CUR_MDL.HIGH_VALUE_IND,
			 CUR_MDL.INSTAL_HVU,
			 CUR_MDL.IOTA_ENABL_CD,
			 CUR_MDL.MANF_MODEL_NUMBER,
			 CUR_MDL.MANUFACTURER_CODE,
             CUR_MDL.MODEL_BRAND_CD,
             CUR_MDL.MODEL_DESC,
             CUR_MDL.MODEL_GROUP_CD,
             CUR_MDL.MODES_SUPPORTED,
             CUR_MDL.ORIGINAL_COST,
             CUR_MDL.PRL_UPD_IND,
             CUR_MDL.PRODUCT_TYPE,
             CUR_MDL.SELF_SERV_ACT_CD,
             CUR_MDL.SELL_PRICE,
             CUR_MDL.UPGRADE_TYPE);
						 
						 
						 
					 	END;
					 
						 INSERT INTO #UPDATE_NM1_EDW_REF_MDLNMB_HIST (
			     			 										    REFERENCE_EFFECTIVE_DT,
			     			 										    MODEL_NUMBER) 
			     			 										    VALUES (			     			                                           
			     			                                           CUR_MDL."REFERENCE_EFFECTIVE_DT",
			     			                                           CUR_MDL."MODEL_NUMBER"
			     			                                           );
						 INSERT INTO #UPDATE_EH_DELETION
							    				  (MODEL_NUMBER,					    				  
									              REFERENCE_EFFECTIVE_DT)     
		 	     	  					  VALUES (CUR_MDL."MODEL_NUMBER",
							 	                  CUR_MDL.REFERENCE_EFFECTIVE_DT);
		     			
		     		END IF;
		        END IF;
		      END IF ; 
		    END IF ;   
		        
	END FOR;
	
	
	-- Update NDB Timestamp in landing table After Processing	
	UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_REF_MDLNMB_HIST" A 
	FROM "LAND"."IFRS_R1.LAND::NM1_EDW_REF_MDLNMB_HIST" A
	INNER JOIN #UPDATE_NM1_EDW_REF_MDLNMB_HIST B
	ON A.MODEL_NUMBER = B.MODEL_NUMBER
	 AND A.EFF_DT = B.REFERENCE_EFFECTIVE_DT
	SET A.NDB_TS = LV_CUR_UTC 
	WHERE A.NDB_TS IS NULL;
	
	
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

	UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_MDLNMB_HIST_EH" A
    FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_MDLNMB_HIST_EH" A 
    INNER JOIN #UPDATE_EH_DELETION B       
    ON A."MODEL_NUMBER" = B."MODEL_NUMBER"  
    AND A."REFERENCE_EFFECTIVE_DT" = B."REFERENCE_EFFECTIVE_DT"   
    SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);	
--------------------------------------------------------------------------------------------------
	-- Set Overall Status
-------------------------------------------------------------------------------------------------- 
	--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
	--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN
    	OP_STATUS := LC_ERROR_TEXT; 			
    ELSE
  		OP_STATUS := LC_SUCCESS_TEXT;				
	END IF;	


END; 
	    		
