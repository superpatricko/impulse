--"BAN","CONTR_TRANS_DT","ITEM_ID","ITEM_TRANS_DT","SUBSCR_NO","TRX_SEQ_NO","ITEM_SUB_ID"
PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_ORDER_CONTR"
(IN IP_EFF_DT DATE,
OUT OP_STATUS NVARCHAR(100))
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
	AS
BEGIN 
----------------------------------------------------------------------
-- Procedure Title : SP_ORDER_CONTR
--
-- Created By      : BC_EY94137(Akanksha Singh)          Date : 27/09/2016
-- 
-- Procedure Description : It is used to INSERT/UPDATE data in NDB Table.
--                         NDB_TS is updated in Landing Table         
--                         after data is loaded in NDB.
--Project :Bell Canda
--
--
----------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
----------------------------------------------------------------------
-- 20/10/2016  | BC_EY94137       | Updated to incorporte Order flow
--                                  change
-- 02/11/2016  | BC_EY94137       | Updated to incorporte Order flow
--                                  change
-- 03/11/2016  | BC_EY94137       | Comments added 
-- 30/11/2016  | BC_EY94137       | Added error and control logs
-- 02/05/2017  | EZ_18762		  | Effective date as input and one cursor logic/error logic
---------------|------------------|-----------------------------------
-- Description Of the changes 
----------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> :<Description of Changes>       
----------------------------------------------------------------------


	DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
	DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
	DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
	DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
	DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
	DECLARE i					INTEGER;
	DECLARE RECORD_COUNT		INTEGER;
	DECLARE CURRENT_ERROR		NVARCHAR(100);
-- New variables for version sequence check
	DECLARE LV_LOOP_ERROR_FLAG        INTEGER := 0;
	DECLARE LV_PREV_BAN_SUB		  NVARCHAR(41) := NULL;


	DECLARE CURSOR CUR_ORDER_CONTR_ONLY FOR
	SELECT
	 "ACTV_CD",
	 "ERROR_CODE",
	 "ACTV_RSN_CD",
	 "CONTR_TY",
	 "BAN",
	 "BYRS_RMRSE",
	 "CONTR_DEALER_CODE",
	 "CONTR_END_DT",
	 "CONTR_STRT_DT",
	 "CONTR_TERM",
	 "CONTR_TIER",
	 "CONTR_ID",
	 "EI_GRP_SEQ_NO",
	 "SUBSCR_NO",
	 "TRX_SEQ_NO",
	 "BASE_OPT_SERV_IND",
	 "BSE_SOC",
	 "BSE_SOC_AMT",
	 "CHRG_TY_CLASSIF",
	 "COST_CENTRE",
	 "EQP_SRC",
	 "EQP_TY",
	 "GL_ACCOUNT",
	 "GL_TAX_CD",
	 "ITEM_END_DT",
	 "ITEM_GRP_CD",
	 "ITEM_ID",
	 "ITEM_STRT_DT",
	 "ITEM_SUB_ID",
	 "ITEM_TRANS_DT",
	 "JURISD_CD",
	 "MIN_TIER_PRC",
	 "PROMO_CD",
	 "PROV_AGR",
	 "SERV_TIER",
	 "SOC_LEV_CD",
	 "STNDLN_SELL_PRC",
	 "SUBS_AMT",
	 "SUBS_EFF_DT",
	 "SUBS_EXP_DT",
	 "TERM_M2M",
	 "TRANS_PRC",
	 "BRND",
	 "GL_PRICE_PLAN_GRP",
	 "PROV_CUST",
	 "REV_CD",
	 "KUNNR_SID",
	 "CONTR_TRANS_DT",
	 "BAN_RIGHT",
	 "FLAG_EXISTING_RECORD",
	 "ERROR_STATUS",
	 "ORIG_CONTR_STRT_DT",
	 "ORIG_CONTR_TERM",
	 "ORIG_STNDLN_SELL_PRC",
	 "ORIG_TRANS_PRC",
	 "POB_END_DT",
	 "CONTR_EXPY_DT",
	 "DLR_CD",
	 "PRODUCT_TYPE",
	 "CC_CONCAT_PK"
	  FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_ORDER_CONTR"
	  (PLACEHOLDER."$$IP_EFF_DT$$"=> :IP_EFF_DT)
	  ORDER BY "BAN","CONTR_TRANS_DT","ITEM_ID","ITEM_TRANS_DT","SUBSCR_NO","TRX_SEQ_NO","ITEM_SUB_ID","CONTR_EXPY_DT";
	  
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------  
CREATE LOCAL TEMPORARY TABLE #UPDATE_NM1_EDW_CONTR(BAN NVARCHAR(9),SUBSCRIBER_NO NVARCHAR(30), EFF_DT DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(BAN NVARCHAR(9), CONTR_TRANS_DT DATE, ITEM_ID NVARCHAR(20), ITEM_TRANS_DT DATE,
												TRX_SEQ_NO NVARCHAR(12), SUBSCR_NO NVARCHAR(30), ITEM_SUB_ID NVARCHAR(6));

--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 				

	FOR CUR_ORDER AS CUR_ORDER_CONTR_ONLY DO
		
		-- Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION
			-- Define Exit Handler
			DECLARE EXIT HANDLER FOR SQLEXCEPTION 
			BEGIN AUTONOMOUS TRANSACTION 
			END;
			--Insert modification data into NDB ORDER table
			INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH"(
			     "ACTV_CD",
				 "ACTV_RSN_CD",
				 "CONTR_TY",
				 "BAN",
				 "BYRS_RMRSE",
				 "BRND",
				 "CONTR_DEALER_CODE",
				 "CONTR_END_DT",
				 "CONTR_STRT_DT",
				 "CONTR_TERM",
				 "CONTR_TIER",
				 "CONTR_ID",
				 "CONTR_TRANS_DT",
				 "EI_GRP_SEQ_NO",
				 "PROV_CUST",
				 "SUBSCR_NO",
				 "TRX_SEQ_NO",
				 "BASE_OPT_SERV_IND",
				 "BSE_SOC",
				 "CHRG_TY_CLASSIF",
				 "COST_CENTRE",
				 "EQP_SRC",
				 "EQP_TY",
				 "GL_ACCOUNT",
				 "GL_TAX_CD",
				 "ITEM_END_DT",
				 "ITEM_GRP_CD",
				 "ITEM_ID",
				 "ITEM_STRT_DT",
				 "ITEM_SUB_ID",
				 "ITEM_TRANS_DT",
				 "JURISD_CD",
				 "MIN_TIER_PRC",
				 "PROMO_CD",
				 "PROV_AGR",
				 "SERV_TIER",
				 "SOC_LEV_CD",				 
				 "SUBS_AMT",
				 "SUBS_EFF_DT",
				 "SUBS_EXP_DT",
				 "TERM_M2M",
				 "BSE_SOC_AMT",
				 "STNDLN_SELL_PRC",
				 "TRANS_PRC",				 
				 INSERT_TS,
				 POB_END_DT,
				 KUNNR_SID,
				 GL_PRICE_PLAN_GRP,
				 ORIG_CONTR_STRT_DT,
				 ORIG_CONTR_TERM,
				 ORIG_STNDLN_SELL_PRC,
				 ORIG_TRANS_PRC,
				 "DLR_CD",
	             "PRODUCT_TYPE",
				 "ERROR_CODE",
				 "TECHNICAL_MESSAGE",
				 "ERROR_CREATE_TS"
				 ) VALUES (
				 CUR_ORDER."ACTV_CD",
				 CUR_ORDER."ACTV_RSN_CD",
				 CUR_ORDER."CONTR_TY",
				 CUR_ORDER."BAN",
				 CUR_ORDER."BYRS_RMRSE",
				 CUR_ORDER."BRND",
				 CUR_ORDER."CONTR_DEALER_CODE",
				 CUR_ORDER."CONTR_END_DT",
				 CUR_ORDER."CONTR_STRT_DT",
				 CUR_ORDER."CONTR_TERM",
				 CUR_ORDER."CONTR_TIER",
				 CUR_ORDER."CONTR_ID",
				 CUR_ORDER."CONTR_TRANS_DT",
				 CUR_ORDER."EI_GRP_SEQ_NO",
				 CUR_ORDER."PROV_CUST",
				 CUR_ORDER."SUBSCR_NO",
				 CUR_ORDER."TRX_SEQ_NO",
				 CUR_ORDER."BASE_OPT_SERV_IND",
				 CUR_ORDER."BSE_SOC",
				 CUR_ORDER."CHRG_TY_CLASSIF",
				 CUR_ORDER."COST_CENTRE",
				 CUR_ORDER."EQP_SRC",
				 CUR_ORDER."EQP_TY",
				 CUR_ORDER."GL_ACCOUNT",
				 CUR_ORDER."GL_TAX_CD",
				 CUR_ORDER."ITEM_END_DT",
				 CUR_ORDER."ITEM_GRP_CD",
				 CUR_ORDER."ITEM_ID",
				 CUR_ORDER."ITEM_STRT_DT",
				 CUR_ORDER."ITEM_SUB_ID",
				 CUR_ORDER."CONTR_TRANS_DT",
				 CUR_ORDER."JURISD_CD",
				 CUR_ORDER."MIN_TIER_PRC",
				 CUR_ORDER."PROMO_CD",
				 CUR_ORDER."PROV_AGR",
				 CUR_ORDER."SERV_TIER",
				 CUR_ORDER."SOC_LEV_CD",
				 CUR_ORDER."SUBS_AMT",
				 CUR_ORDER."SUBS_EFF_DT",
				 CUR_ORDER."SUBS_EXP_DT",
				 CUR_ORDER."TERM_M2M",
				 CUR_ORDER."BSE_SOC_AMT",
				 CUR_ORDER."STNDLN_SELL_PRC",
				 CUR_ORDER."TRANS_PRC",				
				 LV_CUR_UTC,				
				 CUR_ORDER.POB_END_DT,
				 CUR_ORDER.KUNNR_SID,
				 CUR_ORDER.GL_PRICE_PLAN_GRP,
				 CUR_ORDER.ORIG_CONTR_STRT_DT,
				 CUR_ORDER.ORIG_CONTR_TERM,
				 CUR_ORDER.ORIG_STNDLN_SELL_PRC,
				 CUR_ORDER.ORIG_TRANS_PRC,
				 CUR_ORDER.DLR_CD,
	             CUR_ORDER.PRODUCT_TYPE,
				 ::SQL_ERROR_CODE,
				 ::SQL_ERROR_MESSAGE,
	  			 LV_CUR_UTC);
			LV_ERROR_FLAG := 'Y';
			LV_LOOP_ERROR_FLAG := 1;			
		--END for AUTONOMOS		
		END;
		-- FOR CLEARING THE VARIABLES

	
			
		IF (LV_PREV_BAN_SUB IS NULL OR CUR_ORDER."CC_CONCAT_PK" != LV_PREV_BAN_SUB) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_BAN_SUB := CUR_ORDER."CC_CONCAT_PK";
		END IF;

		--Check the Error Status of the Record. If Record is with Error, then send to Error Table
		IF CUR_ORDER.ERROR_STATUS = '1' THEN
			--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		    CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_ORDER."ERROR_CODE", ERROR_TAB, RECORD_COUNT);
		    FOR i IN 1 .. :RECORD_COUNT DO
		    	CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
		    	--Insert modification data into NDB ORDER table
				INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH"(
				     "ACTV_CD",
					 "ACTV_RSN_CD",
					 "CONTR_TY",
					 "BAN",
					 "BYRS_RMRSE",
					 "BRND",
					 "CONTR_DEALER_CODE",
					 "CONTR_END_DT",
					 "CONTR_STRT_DT",
					 "CONTR_TERM",
					 "CONTR_TIER",
					 "CONTR_ID",
					 "CONTR_TRANS_DT",
					 "EI_GRP_SEQ_NO",
					 "PROV_CUST",
					 "SUBSCR_NO",
					 "TRX_SEQ_NO",
					 "BASE_OPT_SERV_IND",
					 "BSE_SOC",
					 "CHRG_TY_CLASSIF",
					 "COST_CENTRE",
					 "EQP_SRC",
					 "EQP_TY",
					 "GL_ACCOUNT",
					 "GL_TAX_CD",
					 "ITEM_END_DT",
					 "ITEM_GRP_CD",
					 "ITEM_ID",
					 "ITEM_STRT_DT",
					 "ITEM_SUB_ID",
					 "ITEM_TRANS_DT",
					 "JURISD_CD",
					 "MIN_TIER_PRC",
					 "PROMO_CD",
					 "PROV_AGR",
					 "SERV_TIER",
					 "SOC_LEV_CD",				 
					 "SUBS_AMT",
					 "SUBS_EFF_DT",
					 "SUBS_EXP_DT",
					 "TERM_M2M",
					 "BSE_SOC_AMT",
					 "STNDLN_SELL_PRC",
					 "TRANS_PRC",				 
					 INSERT_TS,
					 POB_END_DT,
					 KUNNR_SID,
					 GL_PRICE_PLAN_GRP,
					 ORIG_CONTR_STRT_DT,
					 ORIG_CONTR_TERM,
					 ORIG_STNDLN_SELL_PRC,
					 ORIG_TRANS_PRC,
					 DLR_CD,
	                 PRODUCT_TYPE,
					 "ERROR_CODE",
					 "ERROR_CREATE_TS"
					 ) VALUES (
					 CUR_ORDER."ACTV_CD",
					 CUR_ORDER."ACTV_RSN_CD",
					 CUR_ORDER."CONTR_TY",
					 CUR_ORDER."BAN",
					 CUR_ORDER."BYRS_RMRSE",
					 CUR_ORDER."BRND",
					 CUR_ORDER."CONTR_DEALER_CODE",
					 CUR_ORDER."CONTR_END_DT",
					 CUR_ORDER."CONTR_STRT_DT",
					 CUR_ORDER."CONTR_TERM",
					 CUR_ORDER."CONTR_TIER",
					 CUR_ORDER."CONTR_ID",
					 CUR_ORDER."CONTR_TRANS_DT",
					 CUR_ORDER."EI_GRP_SEQ_NO",
					 CUR_ORDER."PROV_CUST",
					 CUR_ORDER."SUBSCR_NO",
					 CUR_ORDER."TRX_SEQ_NO",
					 CUR_ORDER."BASE_OPT_SERV_IND",
					 CUR_ORDER."BSE_SOC",
					 CUR_ORDER."CHRG_TY_CLASSIF",
					 CUR_ORDER."COST_CENTRE",
					 CUR_ORDER."EQP_SRC",
					 CUR_ORDER."EQP_TY",
					 CUR_ORDER."GL_ACCOUNT",
					 CUR_ORDER."GL_TAX_CD",
					 CUR_ORDER."ITEM_END_DT",
					 CUR_ORDER."ITEM_GRP_CD",
					 CUR_ORDER."ITEM_ID",
					 CUR_ORDER."ITEM_STRT_DT",
					 CUR_ORDER."ITEM_SUB_ID",
					 CUR_ORDER."CONTR_TRANS_DT",
					 CUR_ORDER."JURISD_CD",
					 CUR_ORDER."MIN_TIER_PRC",
					 CUR_ORDER."PROMO_CD",
					 CUR_ORDER."PROV_AGR",
					 CUR_ORDER."SERV_TIER",
					 CUR_ORDER."SOC_LEV_CD",
					 CUR_ORDER."SUBS_AMT",
					 CUR_ORDER."SUBS_EFF_DT",
					 CUR_ORDER."SUBS_EXP_DT",
					 CUR_ORDER."TERM_M2M",
					 CUR_ORDER."BSE_SOC_AMT",
					 CUR_ORDER."STNDLN_SELL_PRC",
					 CUR_ORDER."TRANS_PRC",				
					 LV_CUR_UTC,				
					 CUR_ORDER.POB_END_DT,
					 CUR_ORDER.KUNNR_SID,
					 CUR_ORDER.GL_PRICE_PLAN_GRP,
					 CUR_ORDER.ORIG_CONTR_STRT_DT,
					 CUR_ORDER.ORIG_CONTR_TERM,
					 CUR_ORDER.ORIG_STNDLN_SELL_PRC,
					 CUR_ORDER.ORIG_TRANS_PRC,
					 CUR_ORDER.DLR_CD,
	                 CUR_ORDER.PRODUCT_TYPE,
					 :CURRENT_ERROR,
		  			 LV_CUR_UTC);
		    END FOR;
		    LV_ERROR_FLAG := 'Y';
			LV_LOOP_ERROR_FLAG := 1;
		   

		    		
		ELSE 
		---------------------------------------------------XXXXX-----------------------------------------
			IF CUR_ORDER.ERROR_STATUS = '0' THEN
	    
				IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
				INSERT INTO 
				"NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH"(
				     "ACTV_CD",
					 "ACTV_RSN_CD",
					 "CONTR_TY",
					 "BAN",
					 "BYRS_RMRSE",
					 "BRND",
					 "CONTR_DEALER_CODE",
					 "CONTR_END_DT",
					 "CONTR_STRT_DT",
					 "CONTR_TERM",
					 "CONTR_TIER",
					 "CONTR_ID",
					 "CONTR_TRANS_DT",
					 "EI_GRP_SEQ_NO",
					 "PROV_CUST",
					 "SUBSCR_NO",
					 "TRX_SEQ_NO",
					 "BASE_OPT_SERV_IND",
					 "BSE_SOC",
					 "CHRG_TY_CLASSIF",
					 "COST_CENTRE",
					 "EQP_SRC",
					 "EQP_TY",
					 "GL_ACCOUNT",
					 "GL_TAX_CD",
					 "ITEM_END_DT",
					 "ITEM_GRP_CD",
					 "ITEM_ID",
					 "ITEM_STRT_DT",
					 "ITEM_SUB_ID",
					 "ITEM_TRANS_DT",
					 "JURISD_CD",
					 "MIN_TIER_PRC",
					 "PROMO_CD",
					 "PROV_AGR",
					 "SERV_TIER",
					 "SOC_LEV_CD",				 
					 "SUBS_AMT",
					 "SUBS_EFF_DT",
					 "SUBS_EXP_DT",
					 "TERM_M2M",
					 "BSE_SOC_AMT",
					 "STNDLN_SELL_PRC",
					 "TRANS_PRC",				 
					 INSERT_TS,
					 POB_END_DT,
					 KUNNR_SID,
					 GL_PRICE_PLAN_GRP,
					 ORIG_CONTR_STRT_DT,
					 ORIG_CONTR_TERM,
					 ORIG_STNDLN_SELL_PRC,
					 ORIG_TRANS_PRC,
					 DLR_CD,
	                 PRODUCT_TYPE,
					 "ERROR_CODE",
					 "ERROR_CREATE_TS"
					 ) VALUES (
					 CUR_ORDER."ACTV_CD",
					 CUR_ORDER."ACTV_RSN_CD",
					 CUR_ORDER."CONTR_TY",
					 CUR_ORDER."BAN",
					 CUR_ORDER."BYRS_RMRSE",
					 CUR_ORDER."BRND",
					 CUR_ORDER."CONTR_DEALER_CODE",
					 CUR_ORDER."CONTR_END_DT",
					 CUR_ORDER."CONTR_STRT_DT",
					 CUR_ORDER."CONTR_TERM",
					 CUR_ORDER."CONTR_TIER",
					 CUR_ORDER."CONTR_ID",
					 CUR_ORDER."CONTR_TRANS_DT",
					 CUR_ORDER."EI_GRP_SEQ_NO",
					 CUR_ORDER."PROV_CUST",
					 CUR_ORDER."SUBSCR_NO",
					 CUR_ORDER."TRX_SEQ_NO",
					 CUR_ORDER."BASE_OPT_SERV_IND",
					 CUR_ORDER."BSE_SOC",
					 CUR_ORDER."CHRG_TY_CLASSIF",
					 CUR_ORDER."COST_CENTRE",
					 CUR_ORDER."EQP_SRC",
					 CUR_ORDER."EQP_TY",
					 CUR_ORDER."GL_ACCOUNT",
					 CUR_ORDER."GL_TAX_CD",
					 CUR_ORDER."ITEM_END_DT",
					 CUR_ORDER."ITEM_GRP_CD",
					 CUR_ORDER."ITEM_ID",
					 CUR_ORDER."ITEM_STRT_DT",
					 CUR_ORDER."ITEM_SUB_ID",
					 CUR_ORDER."CONTR_TRANS_DT",
					 CUR_ORDER."JURISD_CD",
					 CUR_ORDER."MIN_TIER_PRC",
					 CUR_ORDER."PROMO_CD",
					 CUR_ORDER."PROV_AGR",
					 CUR_ORDER."SERV_TIER",
					 CUR_ORDER."SOC_LEV_CD",
					 CUR_ORDER."SUBS_AMT",
					 CUR_ORDER."SUBS_EFF_DT",
					 CUR_ORDER."SUBS_EXP_DT",
					 CUR_ORDER."TERM_M2M",
					 CUR_ORDER."BSE_SOC_AMT",
					 CUR_ORDER."STNDLN_SELL_PRC",
					 CUR_ORDER."TRANS_PRC",				
					 LV_CUR_UTC,				
					 CUR_ORDER.POB_END_DT,
					 CUR_ORDER.KUNNR_SID,
					 CUR_ORDER.GL_PRICE_PLAN_GRP,
					 CUR_ORDER.ORIG_CONTR_STRT_DT,
					 CUR_ORDER.ORIG_CONTR_TERM,
					 CUR_ORDER.ORIG_STNDLN_SELL_PRC,
					 CUR_ORDER.ORIG_TRANS_PRC,
					 CUR_ORDER.DLR_CD,
	                 CUR_ORDER.PRODUCT_TYPE,
					 'PERVIOUS VERSION IN ERROR',
		  			 LV_CUR_UTC);
		---------------------------------------------------XXXXX-----------------------------------------
					ELSE
			-- If Record exists in the Target NDB Table
     			IF CUR_ORDER.FLAG_EXISTING_RECORD = 'U' THEN
		    		BEGIN AUTONOMOUS TRANSACTION
		    			--  Update the NDB Order Table to update POB_END_DT with sysdate -1 for the existing records         
						UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER" ORD 
						SET (POB_END_DT,MODIFIED_TS) = 
						(IFNULL(CUR_ORDER."ITEM_END_DT",(ADD_DAYS(CONTR_TRANS_DT,-1))),:LV_CUR_UTC) 
							WHERE CUR_ORDER.BAN=ORD.BAN 
							AND CUR_ORDER.SUBSCR_NO = ORD.SUBSCR_NO 
							AND CUR_ORDER.ITEM_ID = ORD.ITEM_ID
							AND POB_END_DT = '99991231';
						
						INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER"(
					     "ACTV_CD",
						 "ACTV_RSN_CD",
						 "CONTR_TY",
						 "BAN",
						 "BYRS_RMRSE",
						 "BRND",
						 "CONTR_DEALER_CODE",
						 "CONTR_END_DT",
						 "CONTR_STRT_DT",
						 "CONTR_TERM",
						 "CONTR_TIER",
						 "CONTR_ID",
						 "CONTR_TRANS_DT",
						 "EI_GRP_SEQ_NO",
						 "PROV_CUST",
						 "SUBSCR_NO",
						 "TRX_SEQ_NO",
						 "BASE_OPT_SERV_IND",
						 "BSE_SOC",
						 "CHRG_TY_CLASSIF",
						 "COST_CENTRE",
						 "EQP_SRC",
						 "EQP_TY",
						 "GL_ACCOUNT",
						 "GL_TAX_CD",
						 "ITEM_END_DT",
						 "ITEM_GRP_CD",
						 "ITEM_ID",
						 "ITEM_STRT_DT",
						 "ITEM_SUB_ID",
						 "ITEM_TRANS_DT",
						 "JURISD_CD",
						 "MIN_TIER_PRC",
						 "PROMO_CD",
						 "PROV_AGR",
						 "SERV_TIER",
						 "SOC_LEV_CD",				 
						 "SUBS_AMT",
						 "SUBS_EFF_DT",
						 "SUBS_EXP_DT",
						 "TERM_M2M",
						 "BSE_SOC_AMT",
						 "STNDLN_SELL_PRC",
						 "TRANS_PRC",				 
						 INSERT_TS,
						 POB_END_DT,
						 KUNNR_SID,
						 GL_PRICE_PLAN_GRP,
						 ORIG_CONTR_STRT_DT,
						 ORIG_CONTR_TERM,
						 ORIG_STNDLN_SELL_PRC,
						 ORIG_TRANS_PRC,
						 DLR_CD,
						 PRODUCT_TYPE
						 ) VALUES (
						 CUR_ORDER."ACTV_CD",
						 CUR_ORDER."ACTV_RSN_CD",
						 CUR_ORDER."CONTR_TY",
						 CUR_ORDER."BAN",
						 CUR_ORDER."BYRS_RMRSE",
						 CUR_ORDER."BRND",
						 CUR_ORDER."CONTR_DEALER_CODE",
						 CUR_ORDER."CONTR_END_DT",
						 CUR_ORDER."CONTR_STRT_DT",
						 CUR_ORDER."CONTR_TERM",
						 CUR_ORDER."CONTR_TIER",
						 CUR_ORDER."CONTR_ID",
						 CUR_ORDER."CONTR_TRANS_DT",
						 CUR_ORDER."EI_GRP_SEQ_NO",
						 CUR_ORDER."PROV_CUST",
						 CUR_ORDER."SUBSCR_NO",
						 CUR_ORDER."TRX_SEQ_NO",
						 CUR_ORDER."BASE_OPT_SERV_IND",
						 CUR_ORDER."BSE_SOC",
						 CUR_ORDER."CHRG_TY_CLASSIF",
						 CUR_ORDER."COST_CENTRE",
						 CUR_ORDER."EQP_SRC",
						 CUR_ORDER."EQP_TY",
						 CUR_ORDER."GL_ACCOUNT",
						 CUR_ORDER."GL_TAX_CD",
						 CUR_ORDER."ITEM_END_DT",
						 CUR_ORDER."ITEM_GRP_CD",
						 CUR_ORDER."ITEM_ID",
						 CUR_ORDER."ITEM_STRT_DT",
						 CUR_ORDER."ITEM_SUB_ID",
						 CUR_ORDER."CONTR_TRANS_DT",
						 CUR_ORDER."JURISD_CD",
						 CUR_ORDER."MIN_TIER_PRC",
						 CUR_ORDER."PROMO_CD",
						 CUR_ORDER."PROV_AGR",
						 CUR_ORDER."SERV_TIER",
						 CUR_ORDER."SOC_LEV_CD",
						 CUR_ORDER."SUBS_AMT",
						 CUR_ORDER."SUBS_EFF_DT",
						 CUR_ORDER."SUBS_EXP_DT",
						 CUR_ORDER."TERM_M2M",
						 CUR_ORDER."BSE_SOC_AMT",
						 CUR_ORDER."STNDLN_SELL_PRC",
						 CUR_ORDER."TRANS_PRC",				
						 LV_CUR_UTC,				
						 CUR_ORDER.POB_END_DT,
						 CUR_ORDER.KUNNR_SID,
						 CUR_ORDER.GL_PRICE_PLAN_GRP,
						 CUR_ORDER.ORIG_CONTR_STRT_DT,
						 CUR_ORDER.ORIG_CONTR_TERM,
						 CUR_ORDER.ORIG_STNDLN_SELL_PRC,
						 CUR_ORDER.ORIG_TRANS_PRC,
						 CUR_ORDER.DLR_CD,
						 CUR_ORDER.PRODUCT_TYPE);
						 
		    		END;
					
		    		-- Insert PK of successfully processed Records into Local Temp Tables 
					-- For Updating NDB_TS in corresponding Landing Tables records
					INSERT INTO #UPDATE_NM1_EDW_CONTR
					   (BAN,
						SUBSCRIBER_NO,
						EFF_DT)
					   	VALUES (CUR_ORDER."BAN",
					    CUR_ORDER."SUBSCR_NO",
					    CUR_ORDER."CONTR_TRANS_DT"); 
					           	          
					INSERT INTO #UPDATE_EH_DELETION
					    				  (BAN,
					    				  CONTR_TRANS_DT,
					    				  ITEM_ID,
					    				  ITEM_TRANS_DT,
							              TRX_SEQ_NO,
							              SUBSCR_NO,
							              ITEM_SUB_ID)     
 	     	  					  VALUES (CUR_ORDER."BAN",
 	     	  					  		  CUR_ORDER."CONTR_TRANS_DT",
 	     	  					  		  CUR_ORDER."ITEM_ID",
			 							  CUR_ORDER."ITEM_TRANS_DT",
					 	                  CUR_ORDER."TRX_SEQ_NO",
					 	                  CUR_ORDER."SUBSCR_NO",
					 	                  CUR_ORDER.ITEM_SUB_ID);
		    	ELSE
		    	
		    	BEGIN AUTONOMOUS TRANSACTION
		    	--Insert modification data into NDB ORDER table, dont insert NULL, don't include columns
		    		INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER"(
					     "ACTV_CD",
						 "ACTV_RSN_CD",
						 "CONTR_TY",
						 "BAN",
						 "BYRS_RMRSE",
						 "BRND",
						 "CONTR_DEALER_CODE",
						 "CONTR_END_DT",
						 "CONTR_STRT_DT",
						 "CONTR_TERM",
						 "CONTR_TIER",
						 "CONTR_ID",
						 "CONTR_TRANS_DT",
						 "EI_GRP_SEQ_NO",
						 "PROV_CUST",
						 "SUBSCR_NO",
						 "TRX_SEQ_NO",
						 "BASE_OPT_SERV_IND",
						 "BSE_SOC",
						 "CHRG_TY_CLASSIF",
						 "COST_CENTRE",
						 "EQP_SRC",
						 "EQP_TY",
						 "GL_ACCOUNT",
						 "GL_TAX_CD",
						 "ITEM_END_DT",
						 "ITEM_GRP_CD",
						 "ITEM_ID",
						 "ITEM_STRT_DT",
						 "ITEM_SUB_ID",
						 "ITEM_TRANS_DT",
						 "JURISD_CD",
						 "MIN_TIER_PRC",
						 "PROMO_CD",
						 "PROV_AGR",
						 "SERV_TIER",
						 "SOC_LEV_CD",				 
						 "SUBS_AMT",
						 "SUBS_EFF_DT",
						 "SUBS_EXP_DT",
						 "TERM_M2M",
						 "BSE_SOC_AMT",
						 "STNDLN_SELL_PRC",
						 "TRANS_PRC",				 
						 INSERT_TS,
						 POB_END_DT,
						 KUNNR_SID,
						 GL_PRICE_PLAN_GRP,
						 ORIG_CONTR_STRT_DT,
						 ORIG_CONTR_TERM,
						 ORIG_STNDLN_SELL_PRC,
						 ORIG_TRANS_PRC,
						 DLR_CD,
						 PRODUCT_TYPE
						 ) VALUES (
						 CUR_ORDER."ACTV_CD",
						 CUR_ORDER."ACTV_RSN_CD",
						 CUR_ORDER."CONTR_TY",
						 CUR_ORDER."BAN",
						 CUR_ORDER."BYRS_RMRSE",
						 CUR_ORDER."BRND",
						 CUR_ORDER."CONTR_DEALER_CODE",
						 CUR_ORDER."CONTR_END_DT",
						 CUR_ORDER."CONTR_STRT_DT",
						 CUR_ORDER."CONTR_TERM",
						 CUR_ORDER."CONTR_TIER",
						 CUR_ORDER."CONTR_ID",
						 CUR_ORDER."CONTR_TRANS_DT",
						 CUR_ORDER."EI_GRP_SEQ_NO",
						 CUR_ORDER."PROV_CUST",
						 CUR_ORDER."SUBSCR_NO",
						 CUR_ORDER."TRX_SEQ_NO",
						 CUR_ORDER."BASE_OPT_SERV_IND",
						 CUR_ORDER."BSE_SOC",
						 CUR_ORDER."CHRG_TY_CLASSIF",
						 CUR_ORDER."COST_CENTRE",
						 CUR_ORDER."EQP_SRC",
						 CUR_ORDER."EQP_TY",
						 CUR_ORDER."GL_ACCOUNT",
						 CUR_ORDER."GL_TAX_CD",
						 CUR_ORDER."ITEM_END_DT",
						 CUR_ORDER."ITEM_GRP_CD",
						 CUR_ORDER."ITEM_ID",
						 CUR_ORDER."ITEM_STRT_DT",
						 CUR_ORDER."ITEM_SUB_ID",
						 CUR_ORDER."CONTR_TRANS_DT",
						 CUR_ORDER."JURISD_CD",
						 CUR_ORDER."MIN_TIER_PRC",
						 CUR_ORDER."PROMO_CD",
						 CUR_ORDER."PROV_AGR",
						 CUR_ORDER."SERV_TIER",
						 CUR_ORDER."SOC_LEV_CD",
						 CUR_ORDER."SUBS_AMT",
						 CUR_ORDER."SUBS_EFF_DT",
						 CUR_ORDER."SUBS_EXP_DT",
						 CUR_ORDER."TERM_M2M",
						 CUR_ORDER."BSE_SOC_AMT",
						 CUR_ORDER."STNDLN_SELL_PRC",
						 CUR_ORDER."TRANS_PRC",				
						 LV_CUR_UTC,				
						 CUR_ORDER.POB_END_DT,
						 CUR_ORDER.KUNNR_SID,
						 CUR_ORDER.GL_PRICE_PLAN_GRP,
						 CUR_ORDER.ORIG_CONTR_STRT_DT,
						 CUR_ORDER.ORIG_CONTR_TERM,
						 CUR_ORDER.ORIG_STNDLN_SELL_PRC,
						 CUR_ORDER.ORIG_TRANS_PRC,
						 CUR_ORDER.DLR_CD,
						 CUR_ORDER.PRODUCT_TYPE);
						
					END;	 
					-- Insert PK of successfully processed Records into Local Temp Tables 
					-- For Updating NDB_TS in corresponding Landing Tables records
					INSERT INTO #UPDATE_NM1_EDW_CONTR
					   (BAN,
						SUBSCRIBER_NO,
						EFF_DT)
					   	VALUES (CUR_ORDER."BAN",
					    CUR_ORDER."SUBSCR_NO",
					    CUR_ORDER."CONTR_TRANS_DT"); 
					           	          
					INSERT INTO #UPDATE_EH_DELETION
					    				  (BAN,
					    				  CONTR_TRANS_DT,
					    				  ITEM_ID,
					    				  ITEM_TRANS_DT,
							              TRX_SEQ_NO,
							              SUBSCR_NO,
							              ITEM_SUB_ID)     
 	     	  					  VALUES (CUR_ORDER."BAN",
 	     	  					  		  CUR_ORDER."CONTR_TRANS_DT",
 	     	  					  		  CUR_ORDER."ITEM_ID",
			 							  CUR_ORDER."ITEM_TRANS_DT",
					 	                  CUR_ORDER."TRX_SEQ_NO",
					 	                  CUR_ORDER."SUBSCR_NO",
					 	                  CUR_ORDER.ITEM_SUB_ID);		
								END IF;
						END IF;
		    	END IF;		
		END IF;
	END FOR;


-- Update NDB_TS with current_timestamp for the records that has been processed                                           
		UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_CONTR" A 
	    FROM "LAND"."IFRS_R1.LAND::NM1_EDW_CONTR" A
	    INNER JOIN #UPDATE_NM1_EDW_CONTR B 
	    ON A.BAN = B.BAN
	    AND A.SUBSCRIBER_NO = B.SUBSCRIBER_NO
	    AND A.EFF_DT = B.EFF_DT
	    SET A.SP_ORDER_CONTR_TS = LV_CUR_UTC 
	    WHERE A.SP_ORDER_CONTR_TS IS NULL; 

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

		UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH" A
      	FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH" A 
      	INNER JOIN #UPDATE_EH_DELETION B       
      	ON A."BAN" = B."BAN"
      	AND A."CONTR_TRANS_DT" = B."CONTR_TRANS_DT"
      	AND A."ITEM_ID" =  B."ITEM_ID"
      	AND A."ITEM_TRANS_DT" = B."ITEM_TRANS_DT"
      	AND A."TRX_SEQ_NO" = B."TRX_SEQ_NO"
      	AND A."SUBSCR_NO" = B."SUBSCR_NO"
      	AND A."ITEM_SUB_ID" = B."ITEM_SUB_ID"
      	SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);
	
	--------------------------------------------------------------------------------------------------
	-- Set Overall Status
	-------------------------------------------------------------------------------------------------- 
	--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
	--  executed successfully
    	IF(LV_ERROR_FLAG = 'Y') THEN
     	OP_STATUS := LC_ERROR_TEXT; 			
    	ELSE
  	 	OP_STATUS := LC_SUCCESS_TEXT;				
		END IF;
	
END;