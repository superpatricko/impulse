PROCEDURE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::SP_TC_F2F_MAN_ADJ_MTY_INRT" ( ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA
	 AS
	 V_CURR_DATE 		DATE 			:= CURRENT_DATE;  
	V_PROC_ID 	   		INTEGER			:= 20015;
	V_PROC_NAME 		NVARCHAR(30)		:= 'SP_TC_F2F_MAN_ADJ_MTY_INRT';
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 BEGIN
   /***************************** 
	 Nested Begin Block for insert
 	*****************************/
 	
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION 

		BEGIN AUTONOMOUS TRANSACTION   
		
			INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::TC_ERROR_LOG"
			(
			 "PROCEDURE_ID","PROCEDURE_NAME", "ERROR_CODE", "ERROR_MESSAGE", "START_END_TIME"
			)
			VALUES
			(
			V_PROC_ID,
			V_PROC_NAME,
			::SQL_ERROR_CODE,
			'While Insert '|| ::SQL_ERROR_MESSAGE ,
			V_CURR_DATE
			);
			
		COMMIT;
		RESIGNAL;
		END; 
 		
 INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::NDB_COMM" 
			(RECORD_ID,
			COMMISSION_AMT,
			COMMISSION_TYPE,
			"MONTH",
			QUARTER,
			PRE_POST_TYPE,
			"BRAND",
	 "L_O_B",
	 "CHANNEL_CODE",
	 "SEGMENT",
	 "CURRENCY",
	 "SRC_SYS_FLG",	
	 "INSRT_TS",
	 "BANNER"				
			)
		SELECT
		1,--"NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::RECORD_ID".nextval,
	 "COMMISSION_AMT",
	 "COMMISSION_TYPE",
	 "MTH",
	 "QTR",
	 "PRE_POST_TYPE",
	 "BRAND",
	 "L_O_B",
	 "CHANNEL_CODE",
	 "SEGMENT",
	 "CURRENCY",
	  "SRC_SYS_FLAG",
	  V_CURR_DATE ,
	  ''
FROM "_SYS_BIC"."IFRS_R1.COMMON_COMP.LAND_COMMON/CA_TC_F2F_MAN_ADJ_MTY_VW" LAND
		WHERE NOT EXISTS 
		(SELECT NDB."SRC_SYS_FLG",NDB."COMMISSION_TYPE",NDB."PRE_POST_TYPE",NDB."L_O_B",
		NDB."CHANNEL_CODE"    
		FROM "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::NDB_COMM" NDB
		WHERE  NDB."SRC_SYS_FLG" = LAND."SRC_SYS_FLAG"
			   AND NDB."COMMISSION_TYPE" = LAND."COMMISSION_TYPE"
			   AND NDB."PRE_POST_TYPE" = LAND."PRE_POST_TYPE"
			   AND NDB."L_O_B" = LAND."L_O_B"
			   AND NDB."CHANNEL_CODE" = LAND."CHANNEL_CODE");
		COMMIT;
 		
 	END;		
 	
 	BEGIN -- start of NDB_TS Update
	 
	 		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	
			BEGIN AUTONOMOUS TRANSACTION  -- Start of exception handler
			
				INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::TC_ERROR_LOG"
				(
				 "PROCEDURE_ID","PROCEDURE_NAME", "ERROR_CODE", "ERROR_MESSAGE", "START_END_TIME"
				)
				VALUES
				(
				V_PROC_ID,
				V_PROC_NAME,
				::SQL_ERROR_CODE,
				'While Updating Landing Table '||::SQL_ERROR_MESSAGE,
				V_CURR_DATE
				);
				
				COMMIT;
				RESIGNAL;
			END;  
	 
			UPDATE "LAND"."IFRS_R1.LAND::TC_F2F_MAN_ADJ_MTY" AS A 
			SET 
				NDB_TS= V_CURR_DATE 
			WHERE NDB_TS IS NULL 
			AND EXISTS (SELECT 'X'
					   FROM "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::NDB_COMM" B
					    WHERE 
					    A."COMMISSION_TYPE" = B."COMMISSION_TYPE"
			  		    AND B.INSRT_TS = V_CURR_DATE);
			COMMIT;
	
	END; -- end of NDB_TS update
 
 
 
END;











