PROCEDURE "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::SP_RAI_TV_ORDR" 
(IN IP_DATE DATE,
OUT OP_STATUS NVARCHAR(1000))  
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER  
	AS
BEGIN


----------------------------------------------------------------------------------------------------
-- Procedure Title : IFRS_R1.BELLTV.RAI_BELLTV::SP_TV_RAI_ORDER
----------------------------------------------------------------------------------------------------
-- Created By      : BC_EY53099(SHWET)          Date :20/09/2016
----------------------------------------------------------------------------------------------------
-- Procedure Description : 
--   This procedure will create RAI Order Main and Condition Items based on NDB BELL TV Order data.
--   The Order RAI Items will be created:
--		 1. Every month in case of M2M contracts.
--		 2. Once for Term contracts.
--		 3. In case of Modification events which are:
--			a. Price Change
--			b. Plan Change
--			c. New Optional Services
--			d. Termination of a contract.
    
--   If the Batch ID is blank in the NDB order, then it will create 
--   RAI item at T0.

--   Based on the Bill Cycle, it will create RAI item for T1... 
--   If the time indicator in NDB is T0, then it will create RAI for T1.
--   If the time indicator in NDB is T1, then it will create RAI for T2.
--   This procedure will cover both order creation and order modifcation
--   for term contract, SSP and TP will be calcualted for the entire contract period
--   if the contracts gets modified in between the billing cycle, the SSP and TP for the contract
--   modification will be calculated based on the pro-rated.
                           
--   This Procedure has three parameters:
--	   	1. The date parameter 'IP_DATE': Using this date parameter,
--	   	   RAI item	can be created for past records(if it is required).
--      2. The  OT_STATUS parametere : This parameter give the status of the Procedure whether it is 
--         success or failure

-- ERROR_LOG Table : Will be used to trace the system error like transaction failed.

-- FREQUENCY OF PROCEDURE EXECUTION: Daily

-- Track Error/Process Control Table: This table will be used to tract the start and end
-- time of the execution
----------------------------------------------------------------------------------------------------
-- Release :R1/IFRS

----------------------------------------------------------------------------------------------------
-- M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
-- Description Of the changes 
----------------------------------------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> :<Updated the logic of NDB_TS write back>       
----------------------------------------------------------------------------------------------------


/* Declaring Local Variables */

DECLARE LV_BATCH_ID       		INTEGER;
DECLARE LV_COUNT                INTEGER;
DECLARE LV_ERROR_FLAG 		    NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 				TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE LV_CUR_UTC_TIME 		DECIMAL(15,2) 
                                := TO_DECIMAL(TO_CHAR(CURRENT_UTCTIMESTAMP,'YYYYMMDDHHMISS'),15,2);
DECLARE LC_SQL_ERROR            NVARCHAR(40) DEFAULT 'SQL_EXCEPTION : SIBLING ERROR';                                
DECLARE LC_ERROR_TEXT 		    NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	    NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE i					    INTEGER;

DECLARE CURRENT_ERROR		    NVARCHAR(100);
DECLARE ERROR_TAB 			    TABLE (ERROR_CODE NVARCHAR(100));
DECLARE RECORD_COUNT		    INTEGER;
DECLARE LC_SET		  			NVARCHAR (1) DEFAULT 'X';

--------------------------------------------------------------------------------------------------
-- Temporary table/Variable/Node Declaration to hold data from the final CVs
-------------------------------------------------------------------------------------------------- 

TV_ORDR_RAI_ITEM = 
	SELECT 
	    "CC_LC_SSP",
	    "CC_LC_TP",
	    "SRCDOC_COMP",
	    "SRCDOC_LOGSYS",
	    "SRCDOC_TYPE",
	    "REFERENCE_TYPE",
	    "WAERS",
	    "RECEIV_ACCOUNT",
	    "BUKRS",
	    "CC_END_DT",
	    "BATCH_ID",
	    "KUNNR_SID",
	    "CC_MOD_IND",
	    "ACCT_NUM",
	    "ITEM_ID",
	    "CONTR_INCPTN_DT",
	    "ITEM_STRT_DT",
	    "POB_END_DT",
	    "BILL_DATE",
	    "CC_REF_ID",
	    "CC_START_DT",
	    "CC_TIME_IND",
	    "CC_BILL_DAY",
	    "SSP",
	    "TP",
	    "GL_ACCT_NO",
	    "CC_CATEGORY",
	    "CC_MAIN_COND_TYPE",
	    "CC_QUANTITY",
	    "CC_QUANTITY_UNIT",
	    "CC_BILREL",
	    "CC_CHARGE_TYPE",
	    "POB_TYPE",
	    "VALUE_RELEVANT",
	    "CC_RAI_ITEM_ID",
	    "BILL_FROM_DT",
	    "BILL_TO_DT",
	    "MTH_T_MTH_SERV_IND",
	    "CC_SRCDOC_ID",
	    "RAI_TS",
	    "SRCDOC_ID_TERM",
	    "CC_X_NEGATIVE_ITEM",
	    "ERROR_STATUS",
	    "MWSKZ",
	    "KOSTL",
	    "CC_PL_ACCOUNT",
	    "CC_ZZ_VBUND",
	    "CC_ZZ_CATRANSFER",
	    "CC_ZZ_PRE_POST",
	    "CC_ZZ_BRANDACT",
	    "CC_ZZ_BILLER",
	    "CC_ZZ_ADJ_RSN_CD",
	    "CC_ZZ_MOD_TYPE",
	    "CC_ZZ_BLDAT",
	    "CC_ZZ_BUDAT",
	    "CC_ZZ_BKTXT",
	    "CC_ZZ_XBLNR",
	    "CC_ZZ_ALLOCATE",
	    "CC_ZZ_UPFFLG",
	    "CC_ZZ_MINPRICE",
	    "CC_ZZ_PAOBJNR",
	    "CC_ZZ_BU_VIEW",
	    "CC_ZZ_ACTIVITY_CODE",
	    "CC_ZZ_ACT_RSN_CD",
	    "CC_ZZ_HKONT",
	    "CC_ZZ_AUFNR",
	    "CC_ZZ_SAKNR",
	    "CC_ZZ_LEGACY",
	    "CC_ZZ_BUKRS",
	    "CC_ZZ_ZUONR",
	    "CC_ZZ_TXJCD",
	    "CC_ZZ_SGTXT",
	    "CC_ZZ_KOSTL",
	    "CC_ZZ_MWSKZ",
	    "CC_TERM_POB_IND",
	    "ERROR_CODE",
	    "CC_REF_ID_ERROR",
	    "CC_IS_SIBLING_ERROR"					 
	    FROM "_SYS_BIC"."IFRS_R1.BELLTV.RAI_BELLTV/CA_TV_ORDR_SIBLING_CHECK"
	    (PLACEHOLDER."$$IP_BILL_DAY$$" => :IP_DATE);
	
  BEGIN    
	--------------------------------------------------------------------------------------------------
	-- Cursors Declaration
	-------------------------------------------------------------------------------------------------- 

	DECLARE CURSOR C_RAI_ORDR FOR SELECT * FROM :TV_ORDR_RAI_ITEM;
		  
	DECLARE CURSOR C_RAI_ORDR_PARENT FOR 
	    SELECT "CC_REF_ID" 
	      FROM :TV_ORDR_RAI_ITEM 
	     WHERE "CC_IS_SIBLING_ERROR" = '0' 
	       AND "ERROR_STATUS" = '0' 
	  GROUP BY "CC_REF_ID";
	--------------------------------------------------------------------------------------------------
	-- Batch ID creation for RAI processing
	-------------------------------------------------------------------------------------------------- 			 
	
	SELECT "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::RAI_BATCH_ID".NEXTVAL 
	  INTO LV_BATCH_ID 
	  FROM DUMMY;	
		 
	--------------------------------------------------------------------------------------------------
	-- Local Temporary Tables Declaration
	-------------------------------------------------------------------------------------------------- 			 	   	   
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_TV_ORDER(
	    ACCT_NUM    				NVARCHAR(16), 
		ITEM_ID                     NVARCHAR(20),
		SRCDOC_ID                   NVARCHAR(35),
		REFERENCE_ID                NVARCHAR(30),
		RAI_ITEM_ID                 NVARCHAR(15),
		BILL_DATE                   DATE,
		TIME_IND                    NVARCHAR(4),
		MOD_IND                     NVARCHAR(1),
		BATCH_ID                    INTEGER,
	    TERM_POB_IND                NVARCHAR(1));
	    
	CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_MAIN_TV (SRCDOC_ID NVARCHAR(35));
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_COND_TV (SRCDOC_ID NVARCHAR(35));

	--------------------------------------------------------------------------------------------------
	-- Cursors Loop
	-------------------------------------------------------------------------------------------------- 
	
	FOR CUR_ORDER AS C_RAI_ORDR DO
	
	--  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
	--    Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION 
		
	--      Do Nothing. Exception Handled to ensure SP does not get terminated
	  
	      END;
	 
	--    Insert record into TV ORDER main error table

		  INSERT INTO   "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_EH"(
						"SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS")
				VALUES (CUR_ORDER."SRCDOC_COMP",
						CUR_ORDER."SRCDOC_LOGSYS",
						CUR_ORDER."SRCDOC_TYPE",
						CUR_ORDER."CC_SRCDOC_ID",
						LV_CUR_UTC_TIME,
						CUR_ORDER."ACCT_NUM",
						CUR_ORDER."CC_RAI_ITEM_ID",
						CUR_ORDER."REFERENCE_TYPE",
						CUR_ORDER."CC_REF_ID",
						CUR_ORDER."KUNNR_SID",
						CUR_ORDER."BUKRS",
						CUR_ORDER."WAERS",
						CUR_ORDER."CC_QUANTITY",
						CUR_ORDER."CC_QUANTITY_UNIT",
						CUR_ORDER."CC_BILREL",
						CUR_ORDER."CC_START_DT",
						CUR_ORDER."CC_END_DT",
						CUR_ORDER."CC_X_NEGATIVE_ITEM",
						CUR_ORDER."RECEIV_ACCOUNT",
						CUR_ORDER."CONTR_INCPTN_DT",
						CUR_ORDER."CC_ZZ_ALLOCATE",
						CUR_ORDER."CC_ZZ_AUFNR",
						:LV_BATCH_ID,
						CUR_ORDER."CC_ZZ_BILLER",
						CUR_ORDER."CC_ZZ_BKTXT",
						CUR_ORDER."CC_ZZ_BRANDACT",
						CUR_ORDER."CC_ZZ_BUKRS",
						CUR_ORDER."CC_ZZ_BU_VIEW",
						CUR_ORDER."CC_ZZ_CATRANSFER",
						CUR_ORDER."CC_ZZ_KOSTL",
						CUR_ORDER."CC_ZZ_LEGACY",
						CUR_ORDER."CC_CHARGE_TYPE",
						CUR_ORDER."POB_TYPE",
						CUR_ORDER."CC_ZZ_MINPRICE",
						CUR_ORDER."CC_ZZ_MOD_TYPE",
						CUR_ORDER."CC_ZZ_MWSKZ",
						CUR_ORDER."CC_ZZ_PAOBJNR",
						CUR_ORDER."CC_ZZ_PRE_POST",
						CUR_ORDER."CC_ZZ_SGTXT",
						CUR_ORDER."CC_ZZ_TXJCD",
						CUR_ORDER."CC_ZZ_UPFFLG",
						CUR_ORDER."CC_ZZ_VBUND",
						CUR_ORDER."CC_ZZ_XBLNR",
						CUR_ORDER."CC_ZZ_ZUONR",
						CUR_ORDER."VALUE_RELEVANT",
						::SQL_ERROR_CODE,
						::SQL_ERROR_MESSAGE,
						:LV_CUR_UTC);
			 
	--      Insert record into TV ORDER Condition error table for SSP(Standalone Selling Price)           
			INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"WAERS",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS")
			    VALUES (CUR_ORDER."SRCDOC_COMP",
						CUR_ORDER."SRCDOC_LOGSYS",			
						CUR_ORDER."SRCDOC_TYPE",
						CUR_ORDER."CC_SRCDOC_ID",
						LV_CUR_UTC_TIME,
						CUR_ORDER."CC_LC_SSP",
						CUR_ORDER."CC_ZZ_HKONT",
						CUR_ORDER."SSP",
						CUR_ORDER."WAERS",
						CUR_ORDER."CC_CATEGORY",
						CUR_ORDER."CC_MAIN_COND_TYPE",
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
					    LV_CUR_UTC);		
			 
	--  	Insert record into ORDER Condition error table for TP(Transaction Price)
	        INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"WAERS",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS")
			    VALUES (CUR_ORDER."SRCDOC_COMP",
						CUR_ORDER."SRCDOC_LOGSYS",			
						CUR_ORDER."SRCDOC_TYPE",
						CUR_ORDER."CC_SRCDOC_ID",
						LV_CUR_UTC_TIME,
						CUR_ORDER."CC_LC_TP",
						CUR_ORDER."CC_ZZ_HKONT",
						CUR_ORDER."TP",
						CUR_ORDER."WAERS",
						CUR_ORDER."CC_CATEGORY",
						CUR_ORDER."CC_MAIN_COND_TYPE",
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
					    LV_CUR_UTC);
			 
			LV_ERROR_FLAG := 'Y';
	    
	    END;
	   
	--  Check the Error Status of the Record. 
	--  If Record is with Error or the sibling is with Error, then send to Error Table
		IF CUR_ORDER.CC_IS_SIBLING_ERROR = '1' 
		OR CUR_ORDER.ERROR_STATUS = '1' 
		THEN
		
    --  	Call the Stored Procedure to split the concatenated Error Messages into Error Rows
			CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_ORDER."ERROR_CODE", 
																		   ERROR_TAB,
																		   RECORD_COUNT);
	
    --	    Loop through the Error Records
			FOR i IN 1 .. :RECORD_COUNT DO
				
    --      	Fetch the Error Code
				CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
				
	--  		All erroneous records are inserted into Order Main EH table 
				INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_EH"(
							"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MINPRICE",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							LV_CUR_UTC_TIME,
							CUR_ORDER."ACCT_NUM",
							CUR_ORDER."CC_RAI_ITEM_ID",
							CUR_ORDER."REFERENCE_TYPE",
							CUR_ORDER."CC_REF_ID",
							CUR_ORDER."KUNNR_SID",
							CUR_ORDER."BUKRS",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_QUANTITY",
							CUR_ORDER."CC_QUANTITY_UNIT",
							CUR_ORDER."CC_BILREL",
							CUR_ORDER."CC_START_DT",
							CUR_ORDER."CC_END_DT",
							CUR_ORDER."CC_X_NEGATIVE_ITEM",
							CUR_ORDER."RECEIV_ACCOUNT",
							CUR_ORDER."CONTR_INCPTN_DT",
							CUR_ORDER."CC_ZZ_ALLOCATE",
							CUR_ORDER."CC_ZZ_AUFNR",
							LV_BATCH_ID,
							CUR_ORDER."CC_ZZ_BILLER",
							CUR_ORDER."CC_ZZ_BKTXT",
							CUR_ORDER."CC_ZZ_BRANDACT",
							CUR_ORDER."CC_ZZ_BUKRS",
							CUR_ORDER."CC_ZZ_BU_VIEW",
							CUR_ORDER."CC_ZZ_CATRANSFER",
							CUR_ORDER."CC_ZZ_KOSTL",
							CUR_ORDER."CC_ZZ_LEGACY",
							CUR_ORDER."CC_CHARGE_TYPE",
							CUR_ORDER."POB_TYPE",
							CUR_ORDER."CC_ZZ_MINPRICE",
							CUR_ORDER."CC_ZZ_MOD_TYPE",
							CUR_ORDER."CC_ZZ_MWSKZ",
							CUR_ORDER."CC_ZZ_PAOBJNR",
							CUR_ORDER."CC_ZZ_PRE_POST",
							CUR_ORDER."CC_ZZ_SGTXT",
							CUR_ORDER."CC_ZZ_TXJCD",
							CUR_ORDER."CC_ZZ_UPFFLG",
							CUR_ORDER."CC_ZZ_VBUND",
							CUR_ORDER."CC_ZZ_XBLNR",
							CUR_ORDER."CC_ZZ_ZUONR",
							CUR_ORDER."VALUE_RELEVANT",
							:CURRENT_ERROR,
							LV_CUR_UTC);
			
	--  		All erroneous records are inserted into Order Condition EH Table for SSP(Standalone Selling Price)
		   		INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_EH"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							LV_CUR_UTC_TIME,
							CUR_ORDER."CC_LC_SSP",
							CUR_ORDER."CC_ZZ_HKONT",
							CUR_ORDER."SSP",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							:CURRENT_ERROR,
						    LV_CUR_UTC);		
			
	--  		All erroneous records are inserted into Order Condition EH Table for TP(Transaction Price)
		        INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_EH"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							LV_CUR_UTC_TIME,
							CUR_ORDER."CC_LC_TP",
							CUR_ORDER."CC_ZZ_HKONT",
							CUR_ORDER."TP",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							:CURRENT_ERROR,
						    LV_CUR_UTC);
		
	--  		Set Error Flag				        
				LV_ERROR_FLAG := 'Y';
				
			END FOR;
			
	-- Processing for Successful Records
	   ELSEIF (CUR_ORDER.CC_IS_SIBLING_ERROR = '0' 
		   AND CUR_ORDER.ERROR_STATUS = '0')
	   THEN 
	   	    
	   	    BEGIN AUTONOMOUS TRANSACTION
	   	    
	--  		All valid records are inserted into Order Main TEMP table which
	--  		would finally move  into the Order Main table if all the
	--  		siblings of the corresponding parent are available in the Temp table
				INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_TT"(
							"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MINPRICE",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT")
					VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							LV_CUR_UTC_TIME,
							CUR_ORDER."ACCT_NUM",
							CUR_ORDER."CC_RAI_ITEM_ID",
							CUR_ORDER."REFERENCE_TYPE",
							CUR_ORDER."CC_REF_ID",
							CUR_ORDER."KUNNR_SID",
							CUR_ORDER."BUKRS",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_QUANTITY",
							CUR_ORDER."CC_QUANTITY_UNIT",
							CUR_ORDER."CC_BILREL",
							CUR_ORDER."CC_START_DT",
							CUR_ORDER."CC_END_DT",
							CUR_ORDER."CC_X_NEGATIVE_ITEM",
							CUR_ORDER."RECEIV_ACCOUNT",
							CUR_ORDER."CONTR_INCPTN_DT",
							CUR_ORDER."CC_ZZ_ALLOCATE",
							CUR_ORDER."CC_ZZ_AUFNR",
							LV_BATCH_ID,
							CUR_ORDER."CC_ZZ_BILLER",
							CUR_ORDER."CC_ZZ_BKTXT",
							CUR_ORDER."CC_ZZ_BRANDACT",
							CUR_ORDER."CC_ZZ_BUKRS",
							CUR_ORDER."CC_ZZ_BU_VIEW",
							CUR_ORDER."CC_ZZ_CATRANSFER",
							CUR_ORDER."CC_ZZ_KOSTL",
							CUR_ORDER."CC_ZZ_LEGACY",
							CUR_ORDER."CC_CHARGE_TYPE",
							CUR_ORDER."POB_TYPE",
							CUR_ORDER."CC_ZZ_MINPRICE",
							CUR_ORDER."CC_ZZ_MOD_TYPE",
							CUR_ORDER."CC_ZZ_MWSKZ",
							CUR_ORDER."CC_ZZ_PAOBJNR",
							CUR_ORDER."CC_ZZ_PRE_POST",
							CUR_ORDER."CC_ZZ_SGTXT",
							CUR_ORDER."CC_ZZ_TXJCD",
							CUR_ORDER."CC_ZZ_UPFFLG",
							CUR_ORDER."CC_ZZ_VBUND",
							CUR_ORDER."CC_ZZ_XBLNR",
							CUR_ORDER."CC_ZZ_ZUONR",
							CUR_ORDER."VALUE_RELEVANT");
				 
	--  		All valid records are inserted ORDER Condition TEMP table for SSP(Standalone Selling Price)
	--  		which would finally move into the Order Main table if all the
	--  		siblings of the corresponding parent are available in the Temp table          
				INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_TT"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							LV_CUR_UTC_TIME,
							CUR_ORDER."CC_LC_SSP",
							CUR_ORDER."CC_ZZ_HKONT",
							CUR_ORDER."SSP",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							LV_BATCH_ID);		
				 
	--  		All valid records are inserted ORDER Condition TEMP table for TP(Transaction Price)
    --  		which would finally move  into the Order Main table if all the
	--  		siblings of the corresponding parent are available in the Temp table
		        INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_TT"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOC_ID",
							LV_CUR_UTC_TIME,
							CUR_ORDER."CC_LC_TP",
							CUR_ORDER."CC_ZZ_HKONT",
							CUR_ORDER."TP",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							LV_BATCH_ID);
							
			END;
			
	    END IF;
		
	END FOR;
	
	FOR CUR_ORDER_PARENT AS C_RAI_ORDR_PARENT DO
	
	--  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
    --    Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION 
		
	--      Do Nothing. Exception Handled to ensure SP does not get terminated
	      
	      END;
		  
	--	  All records of the corresponding parent is inserted into ORDER main error table
		  INSERT INTO   "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_EH"(
						"SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
						"ERROR_CODE",
                        "TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				 SELECT "SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
                 		::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
						LV_CUR_UTC
				   FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_TT"
				  WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
		
	--  	All records of the corresponding parent is inserted into Order Condition EH Table for 
	--  	SSP(Standalone Selling Price) and TP(Transaction Price)
			INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"WAERS",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
  						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				 SELECT COND."SRCDOC_COMP",
						COND."SRCDOC_LOGSYS",			
						COND."SRCDOC_TYPE",
						COND."SRCDOC_ID",
						LV_CUR_UTC_TIME,
						COND."CONDITION_TYPE",
						COND."PL_ACCOUNT",			
						COND."BETRW",
						COND."WAERS",
						COND."CATEGORY",
						COND."MAIN_COND_TYPE",
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
						LV_CUR_UTC
				  FROM  (SELECT * 
				           FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_TT"
				  		  WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					    (SELECT "SRCDOC_ID" 
					       FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_TT"
					      WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
					        AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE COND."SRCDOC_ID"=MAIN."SRCDOC_ID";
					
			LV_ERROR_FLAG := 'Y';
	    
	    END;
		
    --  Check if any siblings of the parent for the current batch execution is in ORDR MAIN Error table.
    --  If Yes move the entire dataset of the corresponding parent into MAIN error and COND error tables.
		SELECT COUNT(SRCDOC_ID) 
		  INTO LV_COUNT 
		  FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_EH"
	     WHERE "REFERENCE_ID"=CUR_ORDER_PARENT."CC_REF_ID"
	       AND "ZZ_BATCH_ID" = LV_BATCH_ID;
		
		IF LV_COUNT > 0 THEN
		
	--  	All records of the corresponding parent is inserted into Order Main error table 
			INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_EH"(
						"SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
				 SELECT "SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						LV_CUR_UTC_TIME,
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
						LC_SQL_ERROR,
						LV_CUR_UTC
				   FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_TT"
				  WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
		
	--  	All records of the corresponding parent is inserted into Order Condition error Table for 
	--  	SSP(Standalone Selling Price) and TP(Transaction price)
			INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"WAERS",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
				 SELECT COND."SRCDOC_COMP",
						COND."SRCDOC_LOGSYS",			
						COND."SRCDOC_TYPE",
						COND."SRCDOC_ID",
						LV_CUR_UTC_TIME,
						COND."CONDITION_TYPE",
						COND."PL_ACCOUNT",			
						COND."BETRW",
						COND."WAERS",
						COND."CATEGORY",
						COND."MAIN_COND_TYPE",
						LC_SQL_ERROR,
						LV_CUR_UTC
				  FROM (SELECT * 
				          FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_TT"
				         WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					   (SELECT "SRCDOC_ID" 
					      FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_TT"
					     WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
					       AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE COND."SRCDOC_ID" = MAIN."SRCDOC_ID";
			  
	--  	Set Error Flag				        
			LV_ERROR_FLAG := 'Y';	  
	
	--	Processing of successful records(none of the siblings of a corresponding parent are in error)
		ELSE
		
			BEGIN AUTONOMOUS TRANSACTION
			
	--  		All valid records are inserted into Order Main table 
				INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN"(
							"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MINPRICE",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT")
					SELECT 	"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							LV_CUR_UTC_TIME,
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MINPRICE",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT"
					   FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_TT"
					  WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
					    AND "ZZ_BATCH_ID" = LV_BATCH_ID;

	--  		All valid records are inserted ORDER Condition table for SSP(Standalone Selling Price) and TP(Transaction Price)         
				INSERT INTO "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE")
				     SELECT COND."SRCDOC_COMP",
							COND."SRCDOC_LOGSYS",
							COND."SRCDOC_TYPE",
							COND."SRCDOC_ID",
							LV_CUR_UTC_TIME,
							COND."CONDITION_TYPE",
							COND."PL_ACCOUNT",			
							COND."BETRW",
							COND."WAERS",
							COND."CATEGORY",
							COND."MAIN_COND_TYPE"
                       FROM	(SELECT * 
                               FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_TT"
                              WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					        (SELECT "SRCDOC_ID" 
					           FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_TT"
					          WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
					            AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
					  WHERE COND."SRCDOC_ID" = MAIN."SRCDOC_ID";
		    END;
   
	--  	Insert PK of successfully processed Records into Local Temp Tables 
	--  	for Updating NDB_TS in corresponding Landing Tables records
	 		INSERT INTO #UPDATE_TV_ORDER(
	   		 			ACCT_NUM, 
						ITEM_ID, 
						SRCDOC_ID,
						REFERENCE_ID,
						RAI_ITEM_ID,
						BILL_DATE,
						TIME_IND,
						MOD_IND,
						BATCH_ID,
						TERM_POB_IND)
				 SELECT A."ACCT_NUM",
		   		    	A."ITEM_ID",
		   		    	A."CC_SRCDOC_ID",
		   		    	A."CC_REF_ID",
		   		    	A."CC_RAI_ITEM_ID",
		   		    	A."CC_BILL_DAY",
		   		    	A."CC_TIME_IND",
		   		    	A."CC_MOD_IND",
		   		    	B."ZZ_BATCH_ID",
		   		    	A."CC_TERM_POB_IND"
		   		    	FROM :TV_ORDR_RAI_ITEM A, 
   		    	        (SELECT "REFERENCE_ID","ZZ_BATCH_ID" 
   		    	           FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN"
   		    	          WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
   		    	            AND "ZZ_BATCH_ID" = LV_BATCH_ID) B 
		          WHERE A."CC_REF_ID" = B."REFERENCE_ID";
			   		        
			   		        
			INSERT INTO	#UPDATE_EH_DELETION_MAIN_TV (SRCDOC_ID) 
				 SELECT "SRCDOC_ID" 
				   FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN"
				  WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
			   		
			INSERT INTO	#UPDATE_EH_DELETION_COND_TV (SRCDOC_ID) 
				 SELECT COND."SRCDOC_ID" 
				   FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND" COND,
	                	(SELECT "SRCDOC_ID" 
	                	   FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN"
					  	  WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
					  	    AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE COND."SRCDOC_ID" = MAIN."SRCDOC_ID";
							          												 		   		        		   	   
		END IF;
	
	END FOR;
																														   
	--------------------------------------------------------------------------------------------------
	-- Update NDB Tables
	-------------------------------------------------------------------------------------------------- 
			
	--  Updating the Source document Id, Reference Id, Header Id, Time indicator, RAI Item ID,Batch id 
	--  and RAI Timestamp in in NDB order table for Non-Optional POB in case of Term Contracts*/		 
		UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_ORDER" A
		  FROM "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_ORDER" A
		 INNER JOIN #UPDATE_TV_ORDER B
		    ON A.ACCT_NUM = B.ACCT_NUM
		   AND A.ITEM_ID = B.ITEM_ID 
		   SET A."SRCDOC_ID_TERM"     = B."SRCDOC_ID",
			   "REFERENCE_ID"  = B."REFERENCE_ID",			
			   "HEADER_ID"     = B."ACCT_NUM",			
			   "RAI_ITEM_ID"   = B."RAI_ITEM_ID",
			   "BATCH_ID"      = B."BATCH_ID",
			   "BILL_DATE"     = B."BILL_DATE",
			   "TIME_IND"      = B."TIME_IND",
			   "MOD_IND"       = B."MOD_IND",
			   "RAI_TS"        = LV_CUR_UTC
		 WHERE A.MOD_IND IS NULL
		  AND B.TERM_POB_IND = LC_SET;
		  
		  
    --  Updating the Source document Id, Reference Id, Header Id, Time indicator, RAI Item ID,Batch id 
	--  and RAI Timestamp in in NDB order table for M2M Contracts as well as Optional POB of Term Contracts */
	  		  
		  UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_ORDER" A
		  FROM "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_ORDER" A
		 INNER JOIN #UPDATE_TV_ORDER B
		    ON A.ACCT_NUM = B.ACCT_NUM
		   AND A.ITEM_ID = B.ITEM_ID 
		   SET A."SRCDOC_ID"   = B."SRCDOC_ID",
			   "REFERENCE_ID"  = B."REFERENCE_ID",			
			   "HEADER_ID"     = B."ACCT_NUM",			
			   "RAI_ITEM_ID"   = B."RAI_ITEM_ID",
			   "BATCH_ID"      = B."BATCH_ID",
			   "BILL_DATE"     = B."BILL_DATE",
			   "TIME_IND"      = B."TIME_IND",
			   "MOD_IND"       = B."MOD_IND",
			   "RAI_TS"        = LV_CUR_UTC
		 WHERE A.MOD_IND IS NULL
		  AND B.TERM_POB_IND IS NULL ;
								 
	--  Update Order Main Error Table
		UPDATE "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_EH" A
		  FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_MAIN_EH" A
		 INNER JOIN #UPDATE_EH_DELETION_MAIN_TV B
		    ON A.SRCDOC_ID=B.SRCDOC_ID
		   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1); 
		
	--  Update Order Cond Error Table
		UPDATE "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_EH" A
		  FROM "RAI_TV"."IFRS_R1.BELLTV.RAI_BELLTV::BELLTV_ORDR_COND_EH" A
		 INNER JOIN #UPDATE_EH_DELETION_COND_TV B
		    ON A.SRCDOC_ID=B.SRCDOC_ID
		   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1); 
				
	-------------------------------------------------------------------------------------------------
	-- Set Overall Status
	-------------------------------------------------------------------------------------------------- 
	
	--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
	--  executed successfully
		IF(LV_ERROR_FLAG = 'Y') THEN		
	
	     OP_STATUS := LC_ERROR_TEXT; 
				
		ELSE
	
	  	 OP_STATUS := LC_SUCCESS_TEXT; 	
					
		END IF;
	
	END;

END; 