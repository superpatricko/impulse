PROCEDURE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::SP_TV_VIRTUAL_INVOICE"  
(IN IP_CYCL_ID INTEGER,
OUT OP_STATUS NVARCHAR(100))
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	AS
BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_TV_VIRTUAL_INVOICE
-- Created By      : BC_EY94104 (Siloni)       
-- Create Date     : 24-04-2017
-- Description     : Data Inserted using Calculation View - CA_TV_VIRTUAL_INVOICE
--                   To NDB Table - TV_BILLING Using this stored procedure.
--                   TV Billing includes data from NDB table (TV_ORDER,TV_BILLING).			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------


DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE LV_CHRG_SEQ		    NVARCHAR(18);
DECLARE LV_SEQ_CUR	        NVARCHAR(18);
DECLARE LV_INVC_ID	        NVARCHAR(50);
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------
	DECLARE CURSOR C_VIRTUAL FOR 
		SELECT
			 "ACCT_NUM",
			 "AGNT_NUM",
			 "CO_CD",
			 "TP",
			 "PRIN_NUM",
			 "ITEM_STRT_DT",
			 "ITEM_END_DT",
			 "GL_ACCT_NO",
			 "ITEM_ID",
			 "LNK_ITEM_ID",
			 "EVNT_ID",
			 "REVENUE_CD",
			 "TRANS_DT",
			 "TRANS_ID",
			 "HEADER_ID",
			 "REFERENCE_ID",
			 "DSCT_IND",
			 "DUO_TRIO_IND",
			 "POST_DT",
			 "ITEM_TY",
			 "MTH_RT",
			 "NUM_OF_DAYS",
			 "REC_TY_ID",
			 "TRAN_CD",
			 "SERV_TYP",
			 "NAT_OF_SERV",
			 "CHRG_TY",
			 "EXECUTION_ID",
			 "INSRT_TS",
			 "MOD_TS",
			 "BATCH_ID",
			 "RAI_ITEM_ID",
			 "SRCDOC_ID",
			 "AUDIT_TRL_DT",
			 "ADJ_REASON",
			 "CHRG_TYP_CLSS",
			 "CYCL_ID",
			 "ERROR_CODE",
			 "ERROR_STATUS",
			 "SRC_TS",
			 "IS_20101901",
			 "TIME_IND",
			 "CNVR_IND",
			 "EXTR_DT",
			 "FEAT_CD",
			 "ORIGDOC_ID",
			 "VIRTUAL_INV_FLAG" 
		FROM "_SYS_BIC"."IFRS_R1.BELLTV.NDB_BELLTV/CA_TV_VIRTUAL_INVOICE"
               (PLACEHOLDER."$$IP_CYCL_ID$$" => :IP_CYCL_ID);	


--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------  

CREATE LOCAL TEMPORARY TABLE #UPDATE_TV_VIRTUAL_INVOICE(ACCT_NUM NVARCHAR(16),CHRG_SEQ_NUM NVARCHAR(18),PRIN NVARCHAR(4),AGENT NVARCHAR(4));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(ACCT_NUM NVARCHAR(16),CHRG_SEQ_NUM NVARCHAR(18),PRIN NVARCHAR(4),AGENT NVARCHAR(4));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 

FOR CUR_BILL AS C_VIRTUAL DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION
 
 --  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
   END;

-- Insert record into error table
      INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_BILLING_EH"(
                  "ACCT_NUM",
                  "ADJ_REASON_MON",
                  "AGENT",
                  "AMT",
                  "AUDIT_TRL_DTE_MON",
                  "BILL_FROM_DT",
                  "BILL_TO_DT",
                  "BTCH_ID",
                  "CHRG_TY",
                  "CHRG_TYP_CLSS",
                  "CNVR_IND",
                  "CO_CD",
                  "DSCT_IND",
                  "DUOTRIO_IND",
                  "EVNT_ID",
                  "EXTR_DT",
                  "FEAT_CD",
                  "GL_ACCT_NO",
                  "HEADER_ID",
                  "INSRT_TS",
                  "ITEM_ID",
                  "ITEM_TYPE_MON",
                  "LNK_ITEM_ID",
                  "MOD_TS",
                  "MTH_RT",
                  "NAT_OF_SRV_MON",
                  "NUM_OF_DAYS",
                  "ORIGDOC_ID",
                  "POST_DT",
                  "PRIN",
                  "RAI_ITEM_ID",
                  "REC_TY_ID",
                  "REFERENCE_ID",
                  "REVNU_CD",
                  "SRCDOC_ID",
                  "SRV_TYP_MON",
                  "TRANS_DT",
                  "TRANS_ID",
                  "TRAN_CDE_MON",
                  "SRC_TS",
                  "VIRTUAL_INV_FLAG",
                  "ERROR_CODE",
                  "TECHNICAL_MESSAGE",
                  "ERROR_CREATE_TS"
                  )
		   VALUES (
				   CUR_BILL."ACCT_NUM",
				   CUR_BILL."ADJ_REASON",
				   CUR_BILL."AGNT_NUM",
				   CUR_BILL. "TP",
				   CUR_BILL."AUDIT_TRL_DT",
				   CUR_BILL. "ITEM_STRT_DT",
				   CUR_BILL. "ITEM_END_DT",
				   CUR_BILL. "BATCH_ID",
				   CUR_BILL."CHRG_TY",
				   CUR_BILL."CHRG_TYP_CLSS",
				   CUR_BILL."CNVR_IND",
				   CUR_BILL."CO_CD",
				   CUR_BILL."DSCT_IND",
				   CUR_BILL."DUO_TRIO_IND",
				   CUR_BILL."EVNT_ID",
				   CUR_BILL."EXTR_DT",
                   CUR_BILL."FEAT_CD",
                   CUR_BILL."GL_ACCT_NO",
                   CUR_BILL."HEADER_ID",
                   CUR_BILL."INSRT_TS",
                   CUR_BILL."ITEM_ID",
                   CUR_BILL. "ITEM_TY",
                   CUR_BILL."LNK_ITEM_ID",
                   CUR_BILL."MOD_TS",
                   CUR_BILL."MTH_RT",
                   CUR_BILL. "NAT_OF_SERV",
                   CUR_BILL."NUM_OF_DAYS",
                   CUR_BILL."ORIGDOC_ID",
                   CUR_BILL."POST_DT",
                   CUR_BILL. "PRIN_NUM",
                   CUR_BILL."RAI_ITEM_ID",
                   CUR_BILL."REC_TY_ID",
                   CUR_BILL."REFERENCE_ID",
                   CUR_BILL."REVENUE_CD",
                   CUR_BILL."SRCDOC_ID",
                   CUR_BILL."SERV_TYP",
                   CUR_BILL."TRANS_DT",
                   CUR_BILL. "TRANS_ID",
                   CUR_BILL."TRAN_CD",
                   CUR_BILL."SRC_TS",
                   CUR_BILL."VIRTUAL_INV_FLAG",
  	               ::SQL_ERROR_CODE,
                   ::SQL_ERROR_MESSAGE,
                   LV_CUR_UTC
		   	       );
				   
		 LV_ERROR_FLAG := 'Y';
    
      END;
				   	 
--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_BILL.ERROR_STATUS = 1 THEN
--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
	CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_BILL."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

-- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
-- Fetch the Error Code
		CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];

--- Insert into the Error Table
		  
		  INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_BILLING_EH"(
			    	    "ACCT_NUM",
                        "ADJ_REASON_MON",
                        "AGENT",
                        "AMT",
                        "AUDIT_TRL_DTE_MON",
                        "BILL_FROM_DT",
                        "BILL_TO_DT",
                        "BTCH_ID",
                        "CHRG_TY",
                        "CHRG_TYP_CLSS", 
                        "CNVR_IND",
                        "CO_CD",
                        "DSCT_IND",
                        "DUOTRIO_IND",
                        "EVNT_ID",
                        "EXTR_DT",
                        "FEAT_CD",
                        "GL_ACCT_NO",
                        "HEADER_ID",
                        "INSRT_TS",
                        "ITEM_ID",
                        "ITEM_TYPE_MON",
                        "LNK_ITEM_ID",
                        "MOD_TS",
                        "MTH_RT",
                        "NAT_OF_SRV_MON",
                        "NUM_OF_DAYS",
                        "ORIGDOC_ID",
                        "POST_DT",
                        "PRIN",
                        "RAI_ITEM_ID",
                        "REC_TY_ID",
                        "REFERENCE_ID",
                        "REVNU_CD",
                        "SRCDOC_ID",
                        "SRV_TYP_MON",
                        "TRANS_DT",
                        "TRANS_ID",
                        "TRAN_CDE_MON",
                        "SRC_TS",
                        "VIRTUAL_INV_FLAG",
                        "ERROR_CODE",
                        "ERROR_CREATE_TS"
				        ) 
				 VALUES (
				 	     CUR_BILL."ACCT_NUM",
					     CUR_BILL."ADJ_REASON",
					     CUR_BILL."AGNT_NUM",
					     CUR_BILL. "TP",
					     CUR_BILL."AUDIT_TRL_DT",
					     CUR_BILL. "ITEM_STRT_DT",
					     CUR_BILL. "ITEM_END_DT",
					     CUR_BILL. "BATCH_ID",
					     CUR_BILL."CHRG_TY",
					     CUR_BILL."CHRG_TYP_CLSS",
					     CUR_BILL."CNVR_IND",
					     CUR_BILL."CO_CD",
					     CUR_BILL."DSCT_IND",
					     CUR_BILL."DUO_TRIO_IND",
					     CUR_BILL."EVNT_ID",
					     CUR_BILL."EXTR_DT",
	                     CUR_BILL."FEAT_CD",
	                     CUR_BILL."GL_ACCT_NO",
	                     CUR_BILL."HEADER_ID",
	                     CUR_BILL."INSRT_TS",
	                     CUR_BILL."ITEM_ID",
	                     CUR_BILL. "ITEM_TY",
	                     CUR_BILL."LNK_ITEM_ID",
	                     CUR_BILL."MOD_TS",
	                     CUR_BILL."MTH_RT",
	                     CUR_BILL. "NAT_OF_SERV",
	                     CUR_BILL."NUM_OF_DAYS",
	                     CUR_BILL."ORIGDOC_ID",
	                     CUR_BILL."POST_DT",
	                     CUR_BILL. "PRIN_NUM",
	                     CUR_BILL."RAI_ITEM_ID",
	                     CUR_BILL."REC_TY_ID",
	                     CUR_BILL."REFERENCE_ID",
	                     CUR_BILL."REVENUE_CD",
	                     CUR_BILL."SRCDOC_ID",
	                     CUR_BILL."SERV_TYP",
	                     CUR_BILL."TRANS_DT",
	                     CUR_BILL. "TRANS_ID",
	                     CUR_BILL."TRAN_CD",
	                     CUR_BILL."SRC_TS",
	                     CUR_BILL."VIRTUAL_INV_FLAG",
			             :CURRENT_ERROR,
			             LV_CUR_UTC 
				 	      );
				        
-- Set Error Flag				        
		LV_ERROR_FLAG := 'Y';
			
--END IF;
		END FOR;

--   If Record exists in the Target NDB Table
--  ELSE IF CUR_BILL.FLAG_EXISTING_RECORD = 'I' THEN

ELSE     
SELECT  LPAD("NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::SEQ_VIRTUAL_INV".NEXTVAL,8,'0') INTO LV_CHRG_SEQ
  FROM DUMMY;
  
SELECT  LPAD("NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::SEQ_VIRTUAL_INV".CURRVAL,8,'0') INTO LV_SEQ_CUR
  FROM DUMMY;
  
SELECT  LPAD("NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::SEQ_INVC_ID".NEXTVAL,8,'0') INTO LV_INVC_ID
  FROM DUMMY;
--   Insert Records into the target NDB table 
	    INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_BILLING"(	 
	                    ACCT_NUM,
                        "ADJ_REASON_MON",
                        "AGENT",
                        "AMT",
                        "AUDIT_TRL_DTE_MON",
                        "BILL_FROM_DT",
                        "BILL_TO_DT",
                        "BTCH_ID",
                        "CHRG_SEQ_NUM",
                        "CHRG_TY",
                        "CHRG_TYP_CLSS", 
                        "CNVR_IND",
                        "CO_CD",
                        "DSCT_IND",
                        "DUOTRIO_IND",
                        "EVNT_ID",
                        "EXTR_DT",
                        "FEAT_CD",
                        "GL_ACCT_NO",
                        "HEADER_ID",
                        "INSRT_TS",
                        "INVC_ID",
                        "ITEM_ID",
                        "ITEM_TYPE_MON",
                        "LNK_ITEM_ID",
                        "MOD_TS",
                        "MTH_RT",
                        "NAT_OF_SRV_MON",
                        "NUM_OF_DAYS",
                        "ORIGDOC_ID",
                        "POST_DT",
                        "PRIN",
                        "RAI_ITEM_ID",
                        "REC_TY_ID",
                        "REFERENCE_ID",
                        "REVNU_CD",
                        "SRCDOC_ID",
                        "SRV_TYP_MON",
                        "TRANS_DT",
                        "TRANS_ID",
                        "TRAN_CDE_MON",
                        "SRC_TS"
				 	 )
		          VALUES(CUR_BILL."ACCT_NUM",
				         CUR_BILL."ADJ_REASON",
				         CUR_BILL."AGNT_NUM",
				         CUR_BILL. "TP",
				         CUR_BILL."AUDIT_TRL_DT",
				         CUR_BILL. "ITEM_STRT_DT",
				         CUR_BILL. "ITEM_END_DT",
				         CUR_BILL. "BATCH_ID",
				         :LV_CHRG_SEQ,
				          CUR_BILL."CHRG_TY",
				          CUR_BILL."CHRG_TYP_CLSS",
				          CUR_BILL."CNVR_IND",
				          CUR_BILL."CO_CD",
				          CUR_BILL."DSCT_IND",
				          CUR_BILL."DUO_TRIO_IND",
				          CUR_BILL."EVNT_ID",
				          CUR_BILL."EXTR_DT",
                          CUR_BILL."FEAT_CD",
                          CUR_BILL."GL_ACCT_NO",
                          CUR_BILL."HEADER_ID",
                          CUR_BILL."INSRT_TS",
                          :LV_INVC_ID,
                          CUR_BILL."ITEM_ID",
                          CUR_BILL. "ITEM_TY",
                          CUR_BILL."LNK_ITEM_ID",
                          CUR_BILL."MOD_TS",
                          CUR_BILL."MTH_RT",
                          CUR_BILL. "NAT_OF_SERV",
                          CUR_BILL."NUM_OF_DAYS",
                          CUR_BILL."ORIGDOC_ID",
                          CUR_BILL."POST_DT",
                          CUR_BILL. "PRIN_NUM",
                          CUR_BILL."RAI_ITEM_ID",
                          CUR_BILL."REC_TY_ID",
                          CUR_BILL."REFERENCE_ID",
                          CUR_BILL."REVENUE_CD",
                          CUR_BILL."SRCDOC_ID",
                          CUR_BILL."SERV_TYP",
                          CUR_BILL."TRANS_DT",
                          CUR_BILL. "TRANS_ID",
                          CUR_BILL."TRAN_CD",
                          CUR_BILL."SRC_TS"
                          ); 

-- Insert PK of successfully processed Records into Local Temp Tables 
-- For Updating NDB_TS in corresponding Landing Tables records
		   
		   INSERT INTO #UPDATE_TV_VIRTUAL_INVOICE(
		              ACCT_NUM,
		              CHRG_SEQ_NUM,
		              PRIN,
		              AGENT
		              )
   		      VALUES (
   		      	      CUR_BILL.ACCT_NUM,
		              :LV_SEQ_CUR,
		              CUR_BILL.PRIN_NUM,
		              CUR_BILL.AGNT_NUM);  
           	      
		   
		INSERT INTO  #UPDATE_EH_DELETION(
			              ACCT_NUM,
		              	  CHRG_SEQ_NUM,
		                  PRIN,
		                  AGENT
	                      )       
 	    	 VALUES (CUR_BILL.ACCT_NUM,
		              :LV_SEQ_CUR,
		              CUR_BILL.PRIN_NUM,
		              CUR_BILL.AGNT_NUM);

  END IF;

END FOR;

--------------------------------------------------------------------------------------------------
-- Update NDB Table
-------------------------------------------------------------------------------------------------- 

--  Update NDB Table IFRS_R1.BELLTV.NDB_BELLTV::TV_ORDER
         UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_ORDER" A
          SET A.VIR_INV_TS = :LV_CUR_UTC
           FROM "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_ORDER" A 
      	   INNER JOIN #UPDATE_TV_VIRTUAL_INVOICE B 
              ON A."ACCT_NUM" = B."ACCT_NUM"
             AND A."PRIN_NUM" = B."PRIN"
             AND A."AGNT_NUM" = B."AGENT"  
             WHERE A.VIR_INV_TS IS NULL;
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

        UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_BILLING_EH" A
        SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1)
          FROM "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_BILLING_EH" A 
    	  INNER JOIN #UPDATE_EH_DELETION B
            ON A."ACCT_NUM" = B."ACCT_NUM"
           AND A."PRIN" = B."PRIN"
           AND A."AGENT" = B."AGENT";

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully

    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
	
END ;