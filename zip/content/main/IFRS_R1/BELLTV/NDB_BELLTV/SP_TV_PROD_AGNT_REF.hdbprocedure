PROCEDURE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::SP_TV_PROD_AGNT_REF" 
     (IN IP_CYCL_ID NVARCHAR(3),
      OUT OP_STATUS  NVARCHAR(1000)) 
	  LANGUAGE SQLSCRIPT
	  SQL SECURITY INVOKER
	  AS
	
BEGIN
-------------------------------------------------------------------------------------------------------------------
-- Procedure Title : SP_TV_PROD_AGNT_REF
-- Created By      : BC_EZ08922      
-- Create Date     : 03-18-2017
-- Description     : Data Inserted using Calculation View - CA_TV_PROD_REF_AGNT_NUM
--                   To NDB Table - NDB_BELLTV::TV_PROD_AGNT_REF Using this stored procedure.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG        INTEGER := 0;
DECLARE LV_PREV_RECORD		      NVARCHAR(10) := NULL;


-------------------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------------------
 
 DECLARE CURSOR C_AGNT_REF FOR
		 SELECT "PRIN_NUM",
				"AGNT_NUM",
				"LANG_CD",
				"PROV_CD",
				"REFERENCE_EFFECTIVE_DT",
				"REFERENCE_EXPIRY_DT",
				"PROCESS_ID",
				"SEQ_ID",
				"CYCL_ID",
				"REC_ACTN",
				"REFERENCE_EFFECTIVE_DATE_PREV_DAY",
				"ERROR_CODE",
			    "ERROR_STATUS",
			    "CONCAT_PK",
			    "SRC_TS"
           FROM "_SYS_BIC"."IFRS_R1.BELLTV.NDB_BELLTV/CA_TV_PROD_REF_AGNT_NUM"
                (PLACEHOLDER."$$IP_CYCL_ID$$" => :IP_CYCL_ID)
                ORDER BY "AGNT_NUM","PRIN_NUM","REFERENCE_EFFECTIVE_DT";
    
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_TV_PROD_AGNT_REF (PRIN_NUM NVARCHAR(4), AGNT_NUM NVARCHAR(4),REFERENCE_EFFECTIVE_DT DATE );
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (PRIN_NUM NVARCHAR(4), AGNT_NUM NVARCHAR(4),REFERENCE_EFFECTIVE_DT DATE);

--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 

FOR CUR_AGNT AS C_AGNT_REF DO
-- Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 

-- Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
END;
	
-- Insert record into error table
   	  INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_AGNT_REF_EH"(	
                  "AGNT_NUM",
                  "EXECUTION_ID",
				  "INSERT_TS",
				  "LANG_CD",
				  "PRIN_NUM",
				  "PROV_CD",
				  "REFERENCE_EFFECTIVE_DT",
				  "REFERENCE_EXPIRY_DT",
				  "ERROR_CODE",
				  "TECHNICAL_MESSAGE",
				  "ERROR_CREATE_TS")
           VALUES (CUR_AGNT."AGNT_NUM",
		           CUR_AGNT."PROCESS_ID",
                   LV_CUR_UTC,
                   CUR_AGNT."LANG_CD",
                   CUR_AGNT."PRIN_NUM",
	               CUR_AGNT."PROV_CD",
				   CUR_AGNT."SRC_TS",
				   CUR_AGNT."REFERENCE_EXPIRY_DT",
				   ::SQL_ERROR_CODE,
		           ::SQL_ERROR_MESSAGE,
		           LV_CUR_UTC);
		  
		LV_ERROR_FLAG := 'Y';
		LV_LOOP_ERROR_FLAG := 1;  

END;

 -----------------------------------------------------------------------------------------------   
    
-- FOR CLEARING THE VARIABLES

	IF (LV_PREV_RECORD IS NULL OR CUR_AGNT."CONCAT_PK" != LV_PREV_RECORD) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD   := "CUR_AGNT"."CONCAT_PK";
 
    END IF;

 -----------------------------------------------------------------------------------------------
 
 
--  Check the Error Status of the Record. If Record is with Error, then send to Error Table

IF CUR_AGNT.ERROR_STATUS = 1 THEN
	
-- Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_AGNT."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

-- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
-- Fetch the Error Code
		CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
-- Insert record into error table
   	  INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_AGNT_REF_EH"(	
                  "AGNT_NUM",
                  "EXECUTION_ID",
				  "INSERT_TS",
				  "LANG_CD",
				  "PRIN_NUM",
				  "PROV_CD",
				  "REFERENCE_EFFECTIVE_DT",
				  "REFERENCE_EXPIRY_DT",
				  "ERROR_CODE",
				  "ERROR_CREATE_TS")
           VALUES (CUR_AGNT."AGNT_NUM",
		           CUR_AGNT."PROCESS_ID",
                   LV_CUR_UTC,
                   CUR_AGNT."LANG_CD",
                   CUR_AGNT."PRIN_NUM",
	               CUR_AGNT."PROV_CD",
				   CUR_AGNT."SRC_TS",
				   CUR_AGNT."REFERENCE_EXPIRY_DT",
				   :CURRENT_ERROR,
		           LV_CUR_UTC);			


	END FOR;

-- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
			LV_LOOP_ERROR_FLAG := 1;
		    
		    	    
		    

-- Processing for Successful Records
   ELSE
		IF CUR_AGNT.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
		
		INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_AGNT_REF_EH"(	
                  "AGNT_NUM",
                  "EXECUTION_ID",
				  "INSERT_TS",
				  "LANG_CD",
				  "PRIN_NUM",
				  "PROV_CD",
				  "REFERENCE_EFFECTIVE_DT",
				  "REFERENCE_EXPIRY_DT",
				  "ERROR_CODE",
				  "ERROR_CREATE_TS")
           VALUES (CUR_AGNT."AGNT_NUM",
		           CUR_AGNT."PROCESS_ID",
                   LV_CUR_UTC,
                   CUR_AGNT."LANG_CD",
                   CUR_AGNT."PRIN_NUM",
	               CUR_AGNT."PROV_CD",
				   CUR_AGNT."SRC_TS",
				   CUR_AGNT."REFERENCE_EXPIRY_DT",
				   :CURRENT_ERROR,
		           LV_CUR_UTC);			
		
		ELSE
-- If Record exists in the Target NDB Table

	 IF CUR_AGNT."REC_ACTN" = 'DELETE' THEN
	 
	 	UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_AGNT_REF" NDB
	 	   SET NDB."REFERENCE_EXPIRY_DT"         = CUR_AGNT."REFERENCE_EFFECTIVE_DATE_PREV_DAY",
	 		   NDB.MODIFIED_TS                   = LV_CUR_UTC
	 	 WHERE NDB.PRIN_NUM                      = CUR_AGNT.PRIN_NUM
		   AND NDB.AGNT_NUM                      = CUR_AGNT.AGNT_NUM
		   AND NDB.REFERENCE_EXPIRY_DT      = '9999.12.31';
 		

 	
 
-- Insert PK of successfully processed Records into Local Temp Tables 
-- For Updating NDB_TS in corresponding Landing Tables records

		   INSERT INTO #UPDATE_TV_PROD_AGNT_REF
					   ("PRIN_NUM", 
					   	"AGNT_NUM") 
			    VALUES (CUR_AGNT."PRIN_NUM", 
					   	CUR_AGNT."AGNT_NUM");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("PRIN_NUM", 
					   	"AGNT_NUM") 
			    VALUES (CUR_AGNT."PRIN_NUM", 
					   	CUR_AGNT."AGNT_NUM"); 
 
  ELSE IF CUR_AGNT."REC_ACTN" = 'UPDATE' THEN

BEGIN AUTONOMOUS TRANSACTION

-- Update the target NDB table

	     UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_AGNT_REF" NDB
	 	 	SET NDB."REFERENCE_EXPIRY_DT"          = CUR_AGNT."REFERENCE_EFFECTIVE_DATE_PREV_DAY",
	 			NDB.MODIFIED_TS                    = LV_CUR_UTC
	 	  WHERE NDB.PRIN_NUM                       = CUR_AGNT.PRIN_NUM
			AND NDB.AGNT_NUM                       = CUR_AGNT.AGNT_NUM
		    AND NDB.REFERENCE_EXPIRY_DT            = '99991231';

-- Insert the new records having FLAG_EXISTING_RECORD = 'U'

      INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_AGNT_REF"(
				  "PRIN_NUM",
				  "AGNT_NUM",
				  "LANG_CD",
				  "PROV_CD",
				  "REFERENCE_EXPIRY_DT",
				  "REFERENCE_EFFECTIVE_DT",
				  "EXECUTION_ID",
				  "INSERT_TS")
          VALUES( CUR_AGNT."PRIN_NUM",
			      CUR_AGNT."AGNT_NUM",
			      CUR_AGNT."LANG_CD",
			      CUR_AGNT."PROV_CD",
			      CUR_AGNT."REFERENCE_EXPIRY_DT",
			      CUR_AGNT."REFERENCE_EFFECTIVE_DT",
			      CUR_AGNT."PROCESS_ID",
			      LV_CUR_UTC);
			      
END;

-- Insert PK of successfully processed Records into Local Temp Tables 
-- For Updating NDB_TS in corresponding Landing Tables records

		   INSERT INTO #UPDATE_TV_PROD_AGNT_REF
					   ("PRIN_NUM", 
					   	"AGNT_NUM") 
			    VALUES (CUR_AGNT."PRIN_NUM", 
					   	CUR_AGNT."AGNT_NUM");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("PRIN_NUM", 
					   	"AGNT_NUM") 
			    VALUES (CUR_AGNT."PRIN_NUM", 
					   	CUR_AGNT."AGNT_NUM");           
                    	
    ELSE

-- Insert Records into the target NDB table

      INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_AGNT_REF"(
                  "PRIN_NUM",
				  "AGNT_NUM",
				  "LANG_CD",
				  "PROV_CD",
				  "REFERENCE_EXPIRY_DT",
				  "REFERENCE_EFFECTIVE_DT",
				  "EXECUTION_ID",
				  "INSERT_TS")
          VALUES (CUR_AGNT."PRIN_NUM",
			      CUR_AGNT."AGNT_NUM",
			      CUR_AGNT."LANG_CD",
			      CUR_AGNT."PROV_CD",
			      CUR_AGNT."REFERENCE_EXPIRY_DT",
			      CUR_AGNT."REFERENCE_EFFECTIVE_DT",
			      CUR_AGNT."PROCESS_ID",
			      LV_CUR_UTC);
			      
			      COMMIT;
		


-- Insert PK of successfully processed Records into Local Temp Tables 
-- For Updating NDB_TS in corresponding Landing Tables records
		   
		   INSERT INTO #UPDATE_TV_PROD_AGNT_REF
					   ("PRIN_NUM", 
					   	"AGNT_NUM") 
			    VALUES (CUR_AGNT."PRIN_NUM", 
					   	CUR_AGNT."AGNT_NUM");
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("PRIN_NUM", 
					   	"AGNT_NUM") 
			    VALUES (CUR_AGNT."PRIN_NUM", 
					   	CUR_AGNT."AGNT_NUM");  
					   	
    END IF;

   END IF;  

  END IF;
          
 END IF;
          
END IF;
			                  
END FOR ;			

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::TV_PROD_AGNT_NUM

 	    UPDATE "LAND"."IFRS_R1.LAND::TV_PROD_REF_AGNT_NUM" A
 	      FROM "LAND"."IFRS_R1.LAND::TV_PROD_REF_AGNT_NUM" A
    INNER JOIN #UPDATE_TV_PROD_AGNT_REF B 
         	ON A.PRIN_NUM                 = B.PRIN_NUM
 	       AND A.AGNT_NUM                 = B.AGNT_NUM
 	       SET A.NDB_TS                   = LV_CUR_UTC
 	     WHERE A.NDB_TS IS NULL;
 
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

         UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_AGNT_REF_EH" A
           FROM "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_AGNT_REF_EH" A 
     INNER JOIN #UPDATE_EH_DELETION B
             ON A.PRIN_NUM                = B.PRIN_NUM
            AND A.AGNT_NUM                = B.AGNT_NUM 
            SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

-- STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
-- Executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
	
END;

