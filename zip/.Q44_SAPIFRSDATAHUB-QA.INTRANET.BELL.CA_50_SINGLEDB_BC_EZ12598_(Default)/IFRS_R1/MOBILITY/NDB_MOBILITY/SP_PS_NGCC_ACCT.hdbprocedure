PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_PS_NGCC_ACCT" 
(IN IP_CYCL_ID NVARCHAR(3), 
OUT OP_STATUS NVARCHAR(1000)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name> 
	--READS SQL DATA 
	AS
BEGIN

--------------------------------------------------------------------------------
-- Procedure Title : IFRS_R1.MOBILITY.NDB_MOBILITY::SP_PS_NGCC_ACCT
--
-- Created By      : BC_EZ07674(Suresh Konidala)          Date :01/02/2017
-- 
-- Procedure Description : 
--  1.We will update and Insert Subsidy information into NDB layer
--	2.Provides the subsidy information (effective/expiry dates, rebate type, 
--    subsidy amount, subsidy duration, etc.) for each contract.	
-- 
--Project :Bell Canada
--
-- Release :R1/IFRS
--------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------
-- 25/01/2017  | BC_EZ07674       | Customer History changes
--------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> :<Updated the logic of NDB_TS write back>       
--------------------------------------------------------------------------------


	DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
	DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
	DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
	DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
	DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
	DECLARE i					INTEGER;
	DECLARE RECORD_COUNT		INTEGER;
	DECLARE CURRENT_ERROR		NVARCHAR(100);
	DECLARE LV_LOOP_ERROR_FLAG  INTEGER := 0;
	DECLARE LV_PREV_BAN NVARCHAR(31) := NULL;

	DECLARE CURSOR CA_NGCC_ACCT FOR
	SELECT
	 "BAN",
	 "MDN",
	 "MSID",
	 "EFFECTIVE_DATE",
	 "NEW_PLATFORM_BALANCE",
	 "BALANCE_EXPIRY_DATE",
	 "SUB_FRST_NM",
	 "LAST_BUS_NM",
	 "ERROR_STATUS",
	 "ERROR_CODE",
	 "CUSTOMER_EXPIRY_DT",
	 "BRND",
	 "USER_NUM",
	 "CYCL_ID"
	FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_NGCC_ACCT"
	(PLACEHOLDER."$$IP_CYCL_ID$$"=> :IP_CYCL_ID)
	ORDER BY "CYCL_ID", "SEQ_ID";

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------	
 
CREATE LOCAL TEMPORARY TABLE #UPDATE_NGCC_ACCT (BRND NVARCHAR(40),USER_NUM NVARCHAR(24),MDN NVARCHAR(24),CYCL_ID NVARCHAR(3));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (BAN NVARCHAR(24));	
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 	
FOR C_ACCT AS CA_NGCC_ACCT DO		

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
			
		      -- Insert record into error table
			  INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_CUST_EH"
			    (
				    "BAN",
				    "MDN",
				    "MSID",
				    "EFFECTIVE_DATE",
				    "NEW_PLATFORM_BALANCE",
				    "BALANCE_EXPIRY_DATE",
				    "FRST_NM",
				    "LAST_BUS_NM",
				    "ERROR_CODE",
				    "TECHNICAL_MESSAGE",
				    "ERROR_CREATE_TS"
			    ) 
			    VALUES 
			    (	
			    	C_ACCT."BAN",
				    C_ACCT."MDN",
				    C_ACCT."MSID",
				    C_ACCT."EFFECTIVE_DATE",
				    C_ACCT."NEW_PLATFORM_BALANCE",
				    C_ACCT."BALANCE_EXPIRY_DATE",
				    C_ACCT."SUB_FRST_NM",
				    C_ACCT."LAST_BUS_NM",
				    ::SQL_ERROR_CODE,
				    ::SQL_ERROR_MESSAGE,
				    LV_CUR_UTC
			    );
			   	         
	  			LV_ERROR_FLAG := 'Y';
	  			LV_LOOP_ERROR_FLAG := 1;
  	END;
  	
  	-----------------------------------------------------------------------------------------------   
    
-- FOR CLEARING THE VARIABLES

	IF (LV_PREV_BAN IS NULL OR (C_ACCT."BAN" != LV_PREV_BAN)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_BAN := C_ACCT."BAN";
			 	   
    END IF;
 -----------------------------------------------------------------------------------------------	  
--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF C_ACCT.ERROR_STATUS = '1' THEN
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(C_ACCT."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		 -- Insert into the Error Table
	INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_CUST_EH"
			    (
				    "BAN",
				    "MDN",
				    "MSID",
				    "EFFECTIVE_DATE",
				    "NEW_PLATFORM_BALANCE",
				    "BALANCE_EXPIRY_DATE",
				    "FRST_NM",
				    "LAST_BUS_NM",
				    "ERROR_CODE",
				    "ERROR_CREATE_TS"
			    ) 
			    VALUES 
			    (	
			    	C_ACCT."BAN",
				    C_ACCT."MDN",
				    C_ACCT."MSID",
				    C_ACCT."EFFECTIVE_DATE",
				    C_ACCT."NEW_PLATFORM_BALANCE",
				    C_ACCT."BALANCE_EXPIRY_DATE",
				    C_ACCT."SUB_FRST_NM",
				    C_ACCT."LAST_BUS_NM",
				    :CURRENT_ERROR,				    
				    LV_CUR_UTC
			    );
		-- Set Error Flag				        
	    LV_ERROR_FLAG := 'Y';
	     LV_LOOP_ERROR_FLAG := 1;
	    LV_PREV_BAN := C_ACCT."BAN";
		   	 	        			
		END FOR;
						         		        


-- Processing for Successful Records
   ELSE
   	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
				INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_CUST_EH"
			    (
				    "BAN",
				    "MDN",
				    "MSID",
				    "EFFECTIVE_DATE",
				    "NEW_PLATFORM_BALANCE",
				    "BALANCE_EXPIRY_DATE",
				    "FRST_NM",
				    "LAST_BUS_NM",
				    "ERROR_CODE",
				    "ERROR_CREATE_TS"
			    ) 
			    VALUES 
			    (	
			    	C_ACCT."BAN",
				    C_ACCT."MDN",
				    C_ACCT."MSID",
				    C_ACCT."EFFECTIVE_DATE",
				    C_ACCT."NEW_PLATFORM_BALANCE",
				    C_ACCT."BALANCE_EXPIRY_DATE",
				    C_ACCT."SUB_FRST_NM",
				    C_ACCT."LAST_BUS_NM",
				    'PREVIOUS VERSION IN ERROR',				    
				    LV_CUR_UTC
			    );
		ELSE
   	   	   	--     Update Records into the target NDB table   
  			BEGIN AUTONOMOUS TRANSACTION
			UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_CUST" MC
			SET
				MC."MDN" = C_ACCT."MDN"
				,MC."MSID" = C_ACCT."MSID"
				,MC."EFFECTIVE_DATE" = C_ACCT."EFFECTIVE_DATE"
				,MC."NEW_PLATFORM_BALANCE" = C_ACCT."NEW_PLATFORM_BALANCE"
				,MC."BALANCE_EXPIRY_DATE" = C_ACCT."BALANCE_EXPIRY_DATE"
				,MC."FRST_NM" = C_ACCT."SUB_FRST_NM"
				,MC."LAST_BUS_NM" = C_ACCT."LAST_BUS_NM"
				,MC."MODIFIED_TS" = :LV_CUR_UTC
				WHERE MC."BAN" = C_ACCT."BAN" 
				AND MC.CUSTOMER_EXPIRY_DT = C_ACCT."CUSTOMER_EXPIRY_DT"; 
	
				LV_PREV_BAN     :=   C_ACCT."BAN";
	
		     END;
	
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	

		   INSERT INTO #UPDATE_NGCC_ACCT ("BRND", "USER_NUM","MDN","CYCL_ID") 
			    VALUES (C_ACCT."BRND", C_ACCT."USER_NUM",C_ACCT."MDN",C_ACCT."CYCL_ID");
			     			    
		  	INSERT INTO #UPDATE_EH_DELETION ("BAN") 
			    VALUES (C_ACCT."BAN");
			    
		END IF;		    
	END IF;	   			    
END FOR;
--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::NGCC_ACCT
UPDATE "LAND"."IFRS_R1.LAND::NGCC_ACCT" A
  FROM "LAND"."IFRS_R1.LAND::NGCC_ACCT" A 
 INNER JOIN #UPDATE_NGCC_ACCT B 
    ON A."BRND" = B."BRND"
    AND A."USER_NUM" = B."USER_NUM"
    AND A."MDN" = B."MDN"
    AND A."CYCL_ID" = B."CYCL_ID"
    SET A.NDB_TS = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_CUST_EH" A
  FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_CUST_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."BAN" = B."BAN"
    SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT;
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;
