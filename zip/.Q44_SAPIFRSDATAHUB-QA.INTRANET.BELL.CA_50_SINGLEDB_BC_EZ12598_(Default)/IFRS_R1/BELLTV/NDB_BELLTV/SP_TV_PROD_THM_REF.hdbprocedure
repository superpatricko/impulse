PROCEDURE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::SP_TV_PROD_THM_REF"  
 (IN IP_CYCL_ID INTEGER,
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN 
 --------------------------------------------------------------------------------------------------
-- Procedure Title : SP_TV_CUST
-- Created By      : BC_EY94116(Saad)       
-- Create Date     : 14-03-2017
-- Description     : Data Inserted using Calculation View - CA_TV_CUST
--                   To NDB Table - TV_CUSTOMER Using this stored procedure.
--                   TV_CUSTOMER includes data from view CA_TV_CUST.			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
--Global Variables Declaration
--------------------------------------------------------------------------------------------------
DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------
		DECLARE CURSOR C_THM_REF FOR 
 		 SELECT  "REC_TY_ID",
				 "REC_ACTN",
				 "THM_CLASS_SERV_CD",
				 "SERV_CD",
				 "PRIN_NUM",
				 "AGNT_NUM",
				 "CYCL_ID",
				 "SEQ_ID",
				 "PROCESS_ID",
				 "REFERENCE_EFFECTIVE_DT",
				 "REFERENCE_EXPIRY_DT",
				 "REFERENCE_EFFECTIVE_DATE_PREV_DAY",
				 "ERROR_STATUS",
				 "ERROR_CODE"
		  FROM "_SYS_BIC"."IFRS_R1.BELLTV.NDB_BELLTV/CA_TV_PROD_REF_THM_CLASS"
               (PLACEHOLDER."$$IP_CYCL_ID$$" => :IP_CYCL_ID)
               ORDER BY "CYCL_ID", "SEQ_ID";	
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------  

CREATE LOCAL TEMPORARY TABLE #UPDATE_TV_PROD_REF_THM_CLASS(SERV_CD NVARCHAR(5),PRIN_NUM NVARCHAR(4),AGNT_NUM NVARCHAR(4),THM_CLASS_SERV_CD NVARCHAR(5));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(SERV_CD NVARCHAR(5),PRIN_NUM NVARCHAR(4),AGNT_NUM NVARCHAR(4),THM_CLASS_SERV_CD NVARCHAR(5));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 
FOR CUR_THM_REF AS C_THM_REF DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION
	
--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION
	
 END;
   -- Insert record into error table
      INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_THM_REF_EH"(
			      "AGNT_NUM",
				  "EXECUTION_ID",
				  "INSERT_TS",
				  "PRIN_NUM",
				  "REFERENCE_EFFECTIVE_DT",
				  "REFERENCE_EXPIRY_DT",
				  "SERV_CD",
				  "THM_CLASS_SERV_CD",
				  "ERROR_CODE",
				  "ERROR_CREATE_TS",
				  "TECHNICAL_MESSAGE") 			  
		   VALUES (CUR_THM_REF."AGNT_NUM",
				   CUR_THM_REF."PROCESS_ID",
				   LV_CUR_UTC,
				   CUR_THM_REF."PRIN_NUM",
				   CUR_THM_REF."REFERENCE_EFFECTIVE_DT",
				   CUR_THM_REF."REFERENCE_EXPIRY_DT",
				   CUR_THM_REF."SERV_CD",
				   CUR_THM_REF."THM_CLASS_SERV_CD",
				   ::SQL_ERROR_CODE,
				   LV_CUR_UTC,
				   ::SQL_ERROR_MESSAGE);
				   
		 LV_ERROR_FLAG := 'Y';
    
      
   END; 
      
				   	 
-- Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_THM_REF.ERROR_STATUS = 1 THEN
	
--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_THM_REF."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

-- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
-- Fetch the Error Code
		CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
-- Insert into the Error Table
	  INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_THM_REF_EH"(
			      "AGNT_NUM",
				  "EXECUTION_ID",
				  "INSERT_TS",
				  "PRIN_NUM",
				  "REFERENCE_EFFECTIVE_DT",
				  "REFERENCE_EXPIRY_DT",
				  "SERV_CD",
				  "THM_CLASS_SERV_CD",
				  "ERROR_CODE",
				  "ERROR_CREATE_TS")	  
		   VALUES (CUR_THM_REF."AGNT_NUM",
				   CUR_THM_REF."PROCESS_ID",
				   LV_CUR_UTC,
				   CUR_THM_REF."PRIN_NUM",
				   CUR_THM_REF."REFERENCE_EFFECTIVE_DT",
				   CUR_THM_REF."REFERENCE_EXPIRY_DT",
				   CUR_THM_REF."SERV_CD",
				   CUR_THM_REF."THM_CLASS_SERV_CD",
				   :CURRENT_ERROR,
				   LV_CUR_UTC);
				        
-- Set Error Flag				        
		LV_ERROR_FLAG := 'Y';
			
		END FOR;
--------------------------------------------------------------------------------------------------------------
-- Processing for Successful Records
    ELSE

-- If Record exists in the Target NDB Table
	 IF CUR_THM_REF."REC_ACTN" = 'DELETE' THEN
	
	 	UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_THM_REF" NDB
	 	    SET NDB."REFERENCE_EXPIRY_DT" = CUR_THM_REF."REFERENCE_EFFECTIVE_DATE_PREV_DAY",
	 	        NDB.MODIFIED_TS =        LV_CUR_UTC
 		  WHERE NDB.THM_CLASS_SERV_CD=   CUR_THM_REF.THM_CLASS_SERV_CD 
	       AND  NDB.SERV_CD=             CUR_THM_REF.SERV_CD
	       AND  NDB.PRIN_NUM=            CUR_THM_REF.PRIN_NUM
	       AND  NDB.AGNT_NUM=            CUR_THM_REF.AGNT_NUM
	       AND  NDB.REFERENCE_EXPIRY_DT = '9999-12-31';

--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_TV_PROD_REF_THM_CLASS
		             (THM_CLASS_SERV_CD, 
		              SERV_CD,  
		              PRIN_NUM, 
		              AGNT_NUM)
   		      VALUES (CUR_THM_REF.THM_CLASS_SERV_CD, 
		              CUR_THM_REF.SERV_CD,  
		              CUR_THM_REF.PRIN_NUM, 
		              CUR_THM_REF.AGNT_NUM);
		                         	               	      
 		  
--   If Record exists in the Target NDB Table
    ELSE IF CUR_THM_REF."REC_ACTN"= 'UPDATE' THEN
        
    BEGIN AUTONOMOUS TRANSACTION
       
--   Update the target NDB table
        UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_THM_REF" AS A 
           SET (REFERENCE_EXPIRY_DT) = (CUR_THM_REF.REFERENCE_EFFECTIVE_DATE_PREV_DAY)
 		   --CUR_THM_REF.REC_ACTN=A.REC_ACTN 
	      WHERE CUR_THM_REF.THM_CLASS_SERV_CD=A.THM_CLASS_SERV_CD 
	       AND  CUR_THM_REF.SERV_CD=A.SERV_CD
	       AND  CUR_THM_REF.PRIN_NUM=A.PRIN_NUM
	       AND  CUR_THM_REF.AGNT_NUM=A.AGNT_NUM
	       AND  A.REFERENCE_EXPIRY_DT = '9999-12-31';
	      
-- Insert Records into the target NDB table 
       INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_THM_REF"
                   ("SERV_CD",
					"PRIN_NUM",
					"AGNT_NUM",
					"THM_CLASS_SERV_CD",
					"EXECUTION_ID",
					"INSERT_TS",
					"REFERENCE_EXPIRY_DT",
					"REFERENCE_EFFECTIVE_DT")
            VALUES  (CUR_THM_REF."SERV_CD",
		 			 CUR_THM_REF."PRIN_NUM",
		 			 CUR_THM_REF."AGNT_NUM",
		 		     CUR_THM_REF."THM_CLASS_SERV_CD",
		             CUR_THM_REF."PROCESS_ID",
		             LV_CUR_UTC,
		             CUR_THM_REF."REFERENCE_EXPIRY_DT",
		             CUR_THM_REF."REFERENCE_EFFECTIVE_DT");
		   END;          
--Insert PK of successfully processed Records into Local Temp Tables 
--for Updating NDB_TS in corresponding Landing Tables records
		 INSERT INTO #UPDATE_TV_PROD_REF_THM_CLASS
		             (THM_CLASS_SERV_CD, 
		              SERV_CD,  
		              PRIN_NUM, 
		              AGNT_NUM)
   		      VALUES (CUR_THM_REF.THM_CLASS_SERV_CD, 
		              CUR_THM_REF.SERV_CD,  
		              CUR_THM_REF.PRIN_NUM, 
		              CUR_THM_REF.AGNT_NUM);           	      
           	   
 		 
 		 INSERT INTO #UPDATE_EH_DELETION(
 		 			  SERV_CD,
 		 			  PRIN_NUM,
 		 			  AGNT_NUM,
 		 			  THM_CLASS_SERV_CD)       
 	     	  VALUES (CUR_THM_REF.SERV_CD,
 		 			  CUR_THM_REF.PRIN_NUM,
 		 			  CUR_THM_REF.AGNT_NUM,
 		 			  CUR_THM_REF.THM_CLASS_SERV_CD);
 	ELSE	          

--Insert Records into the target NDB table 
	    INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_THM_REF"
				   ("SERV_CD",
					"PRIN_NUM",
					"AGNT_NUM",
					"THM_CLASS_SERV_CD",
					"EXECUTION_ID",
					"INSERT_TS",
					"REFERENCE_EXPIRY_DT",
					"REFERENCE_EFFECTIVE_DT")
		    VALUES (CUR_THM_REF."SERV_CD",
					CUR_THM_REF."PRIN_NUM",
					CUR_THM_REF."AGNT_NUM",
					CUR_THM_REF."THM_CLASS_SERV_CD",
					CUR_THM_REF."PROCESS_ID",
					LV_CUR_UTC,
					CUR_THM_REF."REFERENCE_EXPIRY_DT",
					CUR_THM_REF."REFERENCE_EFFECTIVE_DT"); 

--Insert PK of successfully processed Records into Local Temp Tables 
--for Updating NDB_TS in corresponding Landing Tables records
		  
		  INSERT INTO #UPDATE_TV_PROD_REF_THM_CLASS
		             (THM_CLASS_SERV_CD, 
		              SERV_CD,  
		              PRIN_NUM, 
		              AGNT_NUM)
   		      VALUES (CUR_THM_REF.THM_CLASS_SERV_CD, 
		              CUR_THM_REF.SERV_CD,  
		              CUR_THM_REF.PRIN_NUM, 
		              CUR_THM_REF.AGNT_NUM);           	      
           	      

 		 INSERT INTO #UPDATE_EH_DELETION(
 		 			  SERV_CD,
 		 			  PRIN_NUM,
 		 			  AGNT_NUM,
 		 			  THM_CLASS_SERV_CD)       
 	     	  VALUES (CUR_THM_REF.SERV_CD,
 		 			  CUR_THM_REF.PRIN_NUM,
 		 			  CUR_THM_REF.AGNT_NUM,
 		 			  CUR_THM_REF.THM_CLASS_SERV_CD);

   
    END IF;
       END IF;
         END IF;
END FOR;
	 
--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

--  Update Landing Table IFRS_R1.LAND::TV_ACCT_CONTR_GENL
UPDATE "LAND"."IFRS_R1.LAND::TV_PROD_REF_THM_CLASS" A
  FROM "LAND"."IFRS_R1.LAND::TV_PROD_REF_THM_CLASS" A 
 INNER JOIN #UPDATE_TV_PROD_REF_THM_CLASS B 
    ON A."THM_CLASS_SERV_CD" = B."THM_CLASS_SERV_CD"
   AND A."SERV_CD" = B."SERV_CD"
   AND A."PRIN_NUM"=B."PRIN_NUM"
   AND A."AGNT_NUM"=B."AGNT_NUM"
   SET NDB_TS = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;
 --------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_THM_REF_EH" A
  FROM "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_PROD_THM_REF_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."SERV_CD" = B."SERV_CD"
   AND A."PRIN_NUM" = B."PRIN_NUM"
   AND A."AGNT_NUM" = B."AGNT_NUM"
   AND A."THM_CLASS_SERV_CD" = B."THM_CLASS_SERV_CD"
   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;