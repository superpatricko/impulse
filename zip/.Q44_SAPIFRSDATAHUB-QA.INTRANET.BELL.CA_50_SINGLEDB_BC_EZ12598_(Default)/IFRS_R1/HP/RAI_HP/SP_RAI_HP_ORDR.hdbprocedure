PROCEDURE "RAI_HP"."IFRS_R1.HP.RAI_HP::SP_RAI_HP_ORDR" 
(IN IP_DATE DATE,
IN IP_BAN NVARCHAR(1000),
OUT OP_STATUS NVARCHAR(1000))  
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	AS
BEGIN
 
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_RAI_HP_ORDR
-- Created By      : BC_EY99601(Alagar)       
-- Create Date     : 12-04-2017
-- Description     : This procedure will create RAI Order Main and Condition Items based on 
--					 NDB Home Phone Order data.
--   				 The Order RAI Items will be created:
--		 			 	1. Every month in case of M2M contracts.
--						2. In case of Modification events which are:
--							a. Price Change
--							b. Plan Change
--							c. Suspension of the services
--							d. Termination of a contract.
				    
--   				 If the RAI_TS is blank in the NDB order, then it will create RAI item at T0. 
--
--   				 Based on the Bill Cycle, it will create RAI item for T1... T24. 
--   				 If the time indicator in NDB is T0, then it will create RAI for T1.
--   				 If the time indicator in NDB is T1, then it will create RAI for T2.
--   				 This procedure will cover both order creation and order modifcation
--   				 for term contract, SSP and TP will be calcualted for the entire contract period
--   				 if the contracts gets modified in between the billing cycle, the SSP and TP 
--					 for the contract  modification will be calculated based on the pro-rated.
--                           
--   				 This Procedure has 2 parameters:
--					   	1. The date parameter 'IP_DATE': Using this date paramter,
--					   	   RAI item	can be created for past records(if it is required).
-- 					    2. The  OP_STATUS parametere : This parameter give the status of the 
-- 						   Procedure whether it is  success or failure

-- 					  HP_ORDR_MAIN_EH and HP_ORDR_COND_EH Table : Will be used to trace the errors

-- 					  FREQUENCY OF PROCEDURE EXECUTION: Daily
		
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
-- M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release

----------------------------------------------------------------------------------------------------
-- 02/05/2017    BC_EZ18725         Modified for Error handling 
-- 08/08/2017    BC_EZ23103         CR 283 - Update to process the records based on input parameter as IP_BAN 
----------------------------------------------------------------------------------------------------
-- Description Of the changes 
----------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>        
----------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LV_BATCH_ID       		INTEGER;
DECLARE LV_COUNT                INTEGER;
DECLARE LV_ERROR_FLAG 		    NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 				TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE LV_CUR_UTC_TIME 		DECIMAL(15,2) 
                                := TO_DECIMAL(TO_CHAR(CURRENT_UTCTIMESTAMP,'YYYYMMDDHHMISS'),15,2);
DECLARE LC_SQL_ERROR            NVARCHAR(40) DEFAULT 'SQL_EXCEPTION : SIBLING ERROR';                                
DECLARE LC_ERROR_TEXT 		    NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	    NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE i					    INTEGER;
DECLARE IP_BAN_LIST             NVARCHAR(1000);
DECLARE CURRENT_ERROR		    NVARCHAR(100);
DECLARE ERROR_TAB 			    TABLE (ERROR_CODE NVARCHAR(100));
DECLARE RECORD_COUNT		    INTEGER;


--------------------------------------------------------------------------------------------------
-- Temporary table/Variable/Node Declaration to hold data from the final CVs
-------------------------------------------------------------------------------------------------- 
	
HP_ORDR_RAI_ITEM_TEMP = 
	 SELECT WORKING_TELEPHONE_NUMBER,
			PRIMARY_TELEPHONE_NUMBER,
			CONTRACT_UNIQUE_IDENTIFIER,
			BUKRS,
			CONTRACT_INCEPTION_DT,
			CUSTOMER_LOCATION_ID,
			CUSTOMER_SEG_TYP_CD,
			INSERT_TS,
			ITEM_CODE,
			ITEM_INCEPTION_DT,
			CC_ITEM_RATE,
			KUNNR_SID,
			POB_END_DATE,
			POB_TYPE,
			RAC_CODE,
			RECEIV_ACCOUNT,
			REFERENCE_ID,
			REFERENCE_TYPE,
			SOURCE_SYSTEM_CODE,
			SRCDOC_COMP,
			SRCDOC_LOGSYS,
			SRCDOC_TYPE,
			SYSTEM_REGION,
			VALUE_RELEVANT,
			WAERS,
			CC_BILL_DAY,
			CC_BILREL,
			CC_CATEGORY,
			CC_CHARGE_TYPE,
			CC_END_DT,
			CC_LC_SSP,
			CC_LC_TP,
			CC_MAIN_COND_TYPE,
			CC_MOD_IND,
			CC_PRIMARY_TL_NO,
			CC_QUANTITY,
			CC_QUANTITY_UNIT,
			CC_RAI_ITEM_ID,
			CC_REF_ID,
			CC_SRCDOCID,
			CC_START_DT,
			CC_TIME_IND,
			CC_X_NEGATIVE,
			CC_ZZ_ADJ_RSN_CD,
			CC_ZZ_ALLOCATE,
			CC_ZZ_AUFNR,
			CC_ZZ_BILLER,
			CC_ZZ_BKTXT,
			CC_ZZ_BLDAT,
			CC_ZZ_BRANDACT,
			CC_ZZ_BUDAT,
			CC_ZZ_BURKS,
			CC_ZZ_BU_VIEW,
			CC_ZZ_CATRANSFER,			
			CC_ZZ_CONVERSION,
			CC_ZZ_HKONT,
			CC_ZZ_ICHKONT,
			CC_ZZ_KOSTL,
			CC_ZZ_LEGACY,
			CC_ZZ_MINPRICE,
			CC_ZZ_MOD_TYPE,
			CC_ZZ_MWSKZ,
			CC_ZZ_PAOBJNR,
			CC_ZZ_PRE_POST,
			CC_ZZ_SGTXT,
			CC_ZZ_TXJCD,
			CC_ZZ_UPFFLG,
			CC_ZZ_VBUND,
			CC_ZZ_XBLNR,
			CC_ZZ_ZUONR,
			ERROR_CODE,
			ERROR_STATUS,
			CC_IS_SIBLING_ERROR,
			CC_TIMESTAMP_UTC
       FROM "_SYS_BIC"."IFRS_R1.HP.RAI_HP/CA_HP_ORDR_SIBLING_CHECK"
	        (PLACEHOLDER."$$IP_BILL_DAY$$" => :IP_DATE);

--------------------------------------------------------------------------------------------------
--      FILTER PRIMARY_TELEPHONE_NUMBER as per CR_283
--------------------------------------------------------------------------------------------------	                
	IF IP_BAN IS NULL THEN
	 	IP_BAN_LIST := '1=1';
	ELSE
	 IP_BAN_LIST := 'PRIMARY_TELEPHONE_NUMBER IN('||:IP_BAN||')';
	END IF;
	
	HP_ORDR_RAI_ITEM = APPLY_FILTER (:HP_ORDR_RAI_ITEM_TEMP,:IP_BAN_LIST);	

BEGIN

	--------------------------------------------------------------------------------------------------
	-- Cursors Declaration
	-------------------------------------------------------------------------------------------------- 

	DECLARE CURSOR C_RAI_ORDR FOR SELECT * FROM :HP_ORDR_RAI_ITEM;
		  
	DECLARE CURSOR C_RAI_ORDR_PARENT FOR 
	    SELECT "CC_REF_ID" 
	      FROM :HP_ORDR_RAI_ITEM 
	     WHERE "CC_IS_SIBLING_ERROR" = '0' 
	       AND "ERROR_STATUS" = '0' 
	  GROUP BY "CC_REF_ID";
	
	--------------------------------------------------------------------------------------------------
	-- Batch ID creation for RAI processing
	-------------------------------------------------------------------------------------------------- 			 
	
	SELECT "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::RAI_BATCH_ID".NEXTVAL 
	  INTO LV_BATCH_ID 
	  FROM DUMMY;	
		 
	--------------------------------------------------------------------------------------------------
	-- Local Temporary Tables Declaration
	-------------------------------------------------------------------------------------------------- 			 	   	   
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_HP_ORDER(
	    PRIMARY_TELEPHONE_NUMBER    NVARCHAR(16), 
		WORKING_TELEPHONE_NUMBER    NVARCHAR(14),		
		ITEM_CODE                   NVARCHAR(5),
		SRCDOC_ID                   NVARCHAR(35),
		REFERENCE_ID                NVARCHAR(30),
		RAI_ITEM_ID                 NVARCHAR(15),
		BILL_DATE                   DATE,
		TIME_IND                    NVARCHAR(4),
		MOD_IND                     NVARCHAR(1),
		BATCH_ID                    INTEGER,
		CONTRACT_UNIQUE_IDENTIFIER  NVARCHAR(20),
		POB_END_DATE                DATE );
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_MAIN_HP (SRCDOC_ID NVARCHAR(35));
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION_COND_HP (SRCDOC_ID NVARCHAR(35));

	--------------------------------------------------------------------------------------------------
	-- Cursors Loop
	-------------------------------------------------------------------------------------------------- 
	
	FOR CUR_ORDER AS C_RAI_ORDR DO
	
	--  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
	--    Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION 
		
	--      Do Nothing. Exception Handled to ensure SP does not get terminated
	  
	      END;
	 
	--    Insert record into HP ORDER main error table
		  INSERT INTO   "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_EH"(
						"SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS")
				VALUES (CUR_ORDER."SRCDOC_COMP",
						CUR_ORDER."SRCDOC_LOGSYS",
						CUR_ORDER."SRCDOC_TYPE",
						CUR_ORDER."CC_SRCDOCID",
						CUR_ORDER.CC_TIMESTAMP_UTC,
						CUR_ORDER."CC_PRIMARY_TL_NO",
						CUR_ORDER."CC_RAI_ITEM_ID",
						CUR_ORDER."REFERENCE_TYPE",
						CUR_ORDER."CC_REF_ID",
						CUR_ORDER."KUNNR_SID",
						CUR_ORDER."BUKRS",
						CUR_ORDER."WAERS",
						CUR_ORDER."CC_QUANTITY",
						CUR_ORDER."CC_QUANTITY_UNIT",
						CUR_ORDER."CC_BILREL",
						CUR_ORDER."CC_START_DT",
						CUR_ORDER."CC_END_DT",
						CUR_ORDER."CC_X_NEGATIVE",
						CUR_ORDER."RECEIV_ACCOUNT",
						CUR_ORDER."ITEM_INCEPTION_DT",
						CUR_ORDER."CC_ZZ_ALLOCATE",
						CUR_ORDER."CC_ZZ_AUFNR",
						LV_BATCH_ID,
						CUR_ORDER."CC_ZZ_BILLER",
						CUR_ORDER."CC_ZZ_BKTXT",
						CUR_ORDER."CC_ZZ_BRANDACT",
						CUR_ORDER."CC_ZZ_BURKS",
						CUR_ORDER."CC_ZZ_BU_VIEW",
						CUR_ORDER."CC_ZZ_CATRANSFER",
						CUR_ORDER."CC_ZZ_KOSTL",
						CUR_ORDER."CC_ZZ_LEGACY",
						CUR_ORDER."CC_CHARGE_TYPE",
						CUR_ORDER."POB_TYPE",
						CUR_ORDER."CC_ZZ_MINPRICE",
						CUR_ORDER."CC_ZZ_MOD_TYPE",
						CUR_ORDER."CC_ZZ_MWSKZ",
						CUR_ORDER."CC_ZZ_PAOBJNR",
						CUR_ORDER."CC_ZZ_PRE_POST",
						CUR_ORDER."CC_ZZ_SGTXT",
						CUR_ORDER."CC_ZZ_TXJCD",
						CUR_ORDER."CC_ZZ_UPFFLG",
						CUR_ORDER."CC_ZZ_VBUND",
						CUR_ORDER."CC_ZZ_XBLNR",
						CUR_ORDER."CC_ZZ_ZUONR",
						CUR_ORDER."VALUE_RELEVANT",
						::SQL_ERROR_CODE,
						::SQL_ERROR_MESSAGE,
						LV_CUR_UTC);
			 
	--      Insert record into HP ORDER Condition error table for SSP(Standalone Selling Price)           
			INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"WAERS",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS")
			    VALUES (CUR_ORDER."SRCDOC_COMP",
						CUR_ORDER."SRCDOC_LOGSYS",			
						CUR_ORDER."SRCDOC_TYPE",
						CUR_ORDER."CC_SRCDOCID",
						CUR_ORDER.CC_TIMESTAMP_UTC,
						CUR_ORDER."CC_LC_SSP",
						CUR_ORDER."CC_ZZ_HKONT",
						CUR_ORDER."CC_ITEM_RATE",
						CUR_ORDER."WAERS",
						CUR_ORDER."CC_CATEGORY",
						CUR_ORDER."CC_MAIN_COND_TYPE",
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
					    LV_CUR_UTC);		
			 
	--  	Insert record into ORDER Condition error table for TP(Transaction Price)
	        INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"WAERS",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS")
			    VALUES (CUR_ORDER."SRCDOC_COMP",
						CUR_ORDER."SRCDOC_LOGSYS",			
						CUR_ORDER."SRCDOC_TYPE",
						CUR_ORDER."CC_SRCDOCID",
						CUR_ORDER.CC_TIMESTAMP_UTC,
						CUR_ORDER."CC_LC_TP",
						CUR_ORDER."CC_ZZ_HKONT",
						CUR_ORDER."CC_ITEM_RATE",
						CUR_ORDER."WAERS",
						CUR_ORDER."CC_CATEGORY",
						CUR_ORDER."CC_MAIN_COND_TYPE",
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
					    LV_CUR_UTC);
			 
			LV_ERROR_FLAG := 'Y';
	    
	    END;
	   
	--  Check the Error Status of the Record. 
	--  If Record is with Error or the sibling is with Error, then send to Error Table
		IF CUR_ORDER.CC_IS_SIBLING_ERROR = '1' 
		OR CUR_ORDER.ERROR_STATUS = '1' 
		THEN
		
    --  	Call the Stored Procedure to split the concatenated Error Messages into Error Rows
			CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_ORDER."ERROR_CODE", 
																		   ERROR_TAB,
																		   RECORD_COUNT);
	
    --	    Loop through the Error Records
			FOR i IN 1 .. :RECORD_COUNT DO
				
    --      	Fetch the Error Code
				CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
				
	--  		All erroneous records are inserted into Order Main EH table 
				INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_EH"(
							"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MINPRICE",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOCID",
							CUR_ORDER.CC_TIMESTAMP_UTC,
							CUR_ORDER."CC_PRIMARY_TL_NO",
							CUR_ORDER."CC_RAI_ITEM_ID",
							CUR_ORDER."REFERENCE_TYPE",
							CUR_ORDER."CC_REF_ID",
							CUR_ORDER."KUNNR_SID",
							CUR_ORDER."BUKRS",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_QUANTITY",
							CUR_ORDER."CC_QUANTITY_UNIT",
							CUR_ORDER."CC_BILREL",
							CUR_ORDER."CC_START_DT",
							CUR_ORDER."CC_END_DT",
							CUR_ORDER."CC_X_NEGATIVE",
							CUR_ORDER."RECEIV_ACCOUNT",
							CUR_ORDER."ITEM_INCEPTION_DT",
							CUR_ORDER."CC_ZZ_ALLOCATE",
							CUR_ORDER."CC_ZZ_AUFNR",
							LV_BATCH_ID,
							CUR_ORDER."CC_ZZ_BILLER",
							CUR_ORDER."CC_ZZ_BKTXT",
							CUR_ORDER."CC_ZZ_BRANDACT",
							CUR_ORDER."CC_ZZ_BURKS",
							CUR_ORDER."CC_ZZ_BU_VIEW",
							CUR_ORDER."CC_ZZ_CATRANSFER",
							CUR_ORDER."CC_ZZ_KOSTL",
							CUR_ORDER."CC_ZZ_LEGACY",
							CUR_ORDER."CC_CHARGE_TYPE",
							CUR_ORDER."POB_TYPE",
							CUR_ORDER."CC_ZZ_MINPRICE",
							CUR_ORDER."CC_ZZ_MOD_TYPE",
							CUR_ORDER."CC_ZZ_MWSKZ",
							CUR_ORDER."CC_ZZ_PAOBJNR",
							CUR_ORDER."CC_ZZ_PRE_POST",
							CUR_ORDER."CC_ZZ_SGTXT",
							CUR_ORDER."CC_ZZ_TXJCD",
							CUR_ORDER."CC_ZZ_UPFFLG",
							CUR_ORDER."CC_ZZ_VBUND",
							CUR_ORDER."CC_ZZ_XBLNR",
							CUR_ORDER."CC_ZZ_ZUONR",
							CUR_ORDER."VALUE_RELEVANT",
							:CURRENT_ERROR,
							LV_CUR_UTC);
			
	--  		All erroneous records are inserted into Order Condition EH Table for SSP(Standalone Selling Price)
		   		INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_EH"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOCID",
							CUR_ORDER.CC_TIMESTAMP_UTC,
							CUR_ORDER."CC_LC_SSP",
							CUR_ORDER."CC_ZZ_HKONT",
							CUR_ORDER."CC_ITEM_RATE",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							:CURRENT_ERROR,
						    LV_CUR_UTC);		
			
	--  		All erroneous records are inserted into Order Condition EH Table for TP(Transaction Price)
		        INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_EH"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOCID",
							CUR_ORDER.CC_TIMESTAMP_UTC,
							CUR_ORDER."CC_LC_TP",
							CUR_ORDER."CC_ZZ_HKONT",
							CUR_ORDER."CC_ITEM_RATE",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							:CURRENT_ERROR,
						    LV_CUR_UTC);
		
	--  		Set Error Flag				        
				LV_ERROR_FLAG := 'Y';
				
			END FOR;
			
	-- Processing for Successful Records
	   ELSEIF (CUR_ORDER.CC_IS_SIBLING_ERROR = '0' 
		   AND CUR_ORDER.ERROR_STATUS = '0')
	   THEN 	   
	   
	   	    BEGIN AUTONOMOUS TRANSACTION
	   	    
	--  		All valid records are inserted into Order Main TEMP table which
	--  		would finally move  into the Order Main table if all the
	--  		siblings of the corresponding parent are available in the Temp table
				INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_TT"(
							"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",							
							"BUKRS",
							"WAERS",
							"QUANTITY", 
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MINPRICE",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT")						
					VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOCID",
							CUR_ORDER.CC_TIMESTAMP_UTC,
							CUR_ORDER."CC_PRIMARY_TL_NO",
							CUR_ORDER."CC_RAI_ITEM_ID",
							CUR_ORDER."REFERENCE_TYPE",
							CUR_ORDER."CC_REF_ID",
							CUR_ORDER."KUNNR_SID",
							CUR_ORDER."BUKRS",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_QUANTITY",
							CUR_ORDER."CC_QUANTITY_UNIT",
							CUR_ORDER."CC_BILREL",
							CUR_ORDER."CC_START_DT",
							CUR_ORDER."CC_END_DT",
							CUR_ORDER."CC_X_NEGATIVE",
							CUR_ORDER."RECEIV_ACCOUNT",
							CUR_ORDER."ITEM_INCEPTION_DT",
							CUR_ORDER."CC_ZZ_ALLOCATE",
							CUR_ORDER."CC_ZZ_AUFNR",
							LV_BATCH_ID,
							CUR_ORDER."CC_ZZ_BILLER",
							CUR_ORDER."CC_ZZ_BKTXT",
							CUR_ORDER."CC_ZZ_BRANDACT",
							CUR_ORDER."CC_ZZ_BURKS",
							CUR_ORDER."CC_ZZ_BU_VIEW",
							CUR_ORDER."CC_ZZ_CATRANSFER",
							CUR_ORDER."CC_ZZ_KOSTL",
							CUR_ORDER."CC_ZZ_LEGACY",
							CUR_ORDER."CC_CHARGE_TYPE",
							CUR_ORDER."POB_TYPE",
							CUR_ORDER."CC_ZZ_MINPRICE",
							CUR_ORDER."CC_ZZ_MOD_TYPE",
							CUR_ORDER."CC_ZZ_MWSKZ",
							CUR_ORDER."CC_ZZ_PAOBJNR",
							CUR_ORDER."CC_ZZ_PRE_POST",
							CUR_ORDER."CC_ZZ_SGTXT",
							CUR_ORDER."CC_ZZ_TXJCD",
							CUR_ORDER."CC_ZZ_UPFFLG",
							CUR_ORDER."CC_ZZ_VBUND",
							CUR_ORDER."CC_ZZ_XBLNR",
							CUR_ORDER."CC_ZZ_ZUONR",
							CUR_ORDER."VALUE_RELEVANT");
				 
	--  		All valid records are inserted ORDER Condition TEMP table for SSP(Standalone Selling Price)
	--  		which would finally move into the Order Main table if all the
	--  		siblings of the corresponding parent are available in the Temp table          
				INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_TT"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOCID",
							CUR_ORDER.CC_TIMESTAMP_UTC,
							CUR_ORDER."CC_LC_SSP",
							CUR_ORDER."CC_ZZ_HKONT",
							CUR_ORDER."CC_ITEM_RATE",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							:LV_BATCH_ID);		
				 
	--  		All valid records are inserted ORDER Condition TEMP table for TP(Transaction Price)
    --  		which would finally move  into the Order Main table if all the
	--  		siblings of the corresponding parent are available in the Temp table
		        INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_TT"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."CC_SRCDOCID",
							CUR_ORDER.CC_TIMESTAMP_UTC,
							CUR_ORDER."CC_LC_TP",
							CUR_ORDER."CC_ZZ_HKONT",
							CUR_ORDER."CC_ITEM_RATE",
							CUR_ORDER."WAERS",
							CUR_ORDER."CC_CATEGORY",
							CUR_ORDER."CC_MAIN_COND_TYPE",
							:LV_BATCH_ID);
							
			END;
			
	    END IF;
		
	END FOR;
	
	FOR CUR_ORDER_PARENT AS C_RAI_ORDR_PARENT DO
	
	--  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
    --    Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION 
		
	--      Do Nothing. Exception Handled to ensure SP does not get terminated
	      
	      END;
		  
	--	  All records of the corresponding parent is inserted into ORDER main error table
		  INSERT INTO   "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_EH"(
						"SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
						"ERROR_CODE",
                        "TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				 SELECT "SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
                 		::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
						LV_CUR_UTC
				   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_TT" 
				  WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
		
	--  	All records of the corresponding parent is inserted into Order Condition EH Table for 
	--  	SSP(Standalone Selling Price) and TP(Transaction Price)
			INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"WAERS",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
  						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				 SELECT COND."SRCDOC_COMP",
						COND."SRCDOC_LOGSYS",			
						COND."SRCDOC_TYPE",
						COND."SRCDOC_ID",
						LV_CUR_UTC_TIME,
						COND."CONDITION_TYPE",
						COND."PL_ACCOUNT",			
						COND."BETRW",
						COND."WAERS",
						COND."CATEGORY",
						COND."MAIN_COND_TYPE",
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
						LV_CUR_UTC
				  FROM  (SELECT * 
				           FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_TT"
				           WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					    (SELECT "SRCDOC_ID" 
					       FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_TT" 
					      WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
					        AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE COND."SRCDOC_ID"=MAIN."SRCDOC_ID";
					
			LV_ERROR_FLAG := 'Y';
	    
	    END;
		
    --  Check if any siblings of the parent for the current batch execution is in ORDR MAIN Error table.
    --  If Yes move the entire dataset of the corresponding parent into MAIN error and COND error tables.
		SELECT COUNT("SRCDOC_ID") 
		  INTO LV_COUNT 
		  FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_EH" 
	     WHERE "REFERENCE_ID"=CUR_ORDER_PARENT."CC_REF_ID"
	       AND "ZZ_BATCH_ID" = LV_BATCH_ID;
		
		IF LV_COUNT > 0 THEN
		
	--  	All records of the corresponding parent is inserted into Order Main error table 
			INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_EH"(
						"SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
				 SELECT "SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MINPRICE",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"VALUE_RELEVANT",
						LC_SQL_ERROR,
						LV_CUR_UTC
				   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_TT" 
				  WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
		
	--  	All records of the corresponding parent is inserted into Order Condition error Table for 
	--  	SSP(Standalone Selling Price) and TP(Transaction price)
			INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_EH"(
						"SRCDOC_COMP",
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"CONDITION_TYPE",
						"PL_ACCOUNT",			
						"BETRW",
						"WAERS",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
				 SELECT COND."SRCDOC_COMP",
						COND."SRCDOC_LOGSYS",			
						COND."SRCDOC_TYPE",
						COND."SRCDOC_ID",
						COND.TIMESTAMP_UTC,
						COND."CONDITION_TYPE",
						COND."PL_ACCOUNT",			
						COND."BETRW",
						COND."WAERS",
						COND."CATEGORY",
						COND."MAIN_COND_TYPE",
						LC_SQL_ERROR,
						LV_CUR_UTC
				  FROM (SELECT * 
				          FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_TT"
				          WHERE "BATCH_ID" = LV_BATCH_ID) COND,
					   (SELECT "SRCDOC_ID" 
					      FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_TT" 
					     WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
					       AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE COND."SRCDOC_ID" = MAIN."SRCDOC_ID";
			  
	--  	Set Error Flag				        
			LV_ERROR_FLAG := 'Y';	  
	
	--	Processing of successful records(none of the siblings of a corresponding parent are in error)
		ELSEIF LV_COUNT = 0 THEN
		
			BEGIN AUTONOMOUS TRANSACTION
			
	--  		All valid records are inserted into Order Main table 
				INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN"(
							"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MINPRICE",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT")
					SELECT 	"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MINPRICE",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT"
					   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_TT" 
					  WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
					    AND "ZZ_BATCH_ID" = LV_BATCH_ID;

	--  		All valid records are inserted ORDER Condition table for SSP(Standalone Selling Price) and TP(Transaction Price)         
				INSERT INTO "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE")
				     SELECT COND."SRCDOC_COMP",
							COND."SRCDOC_LOGSYS",
							COND."SRCDOC_TYPE",
							COND."SRCDOC_ID",
							COND."TIMESTAMP_UTC",
							COND."CONDITION_TYPE",
							COND."PL_ACCOUNT",			
							COND."BETRW",
							COND."WAERS",
							COND."CATEGORY",
							COND."MAIN_COND_TYPE"
                       FROM	(SELECT * 
                               FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_TT"
                               WHERE "BATCH_ID" = LV_BATCH_ID)COND,
					        (SELECT "SRCDOC_ID" 
					           FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_TT" 
					          WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
					            AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
					  WHERE COND."SRCDOC_ID" = MAIN."SRCDOC_ID";
		    END;
   
	--  	Insert PK of successfully processed Records into Local Temp Tables 
	--  	for Updating NDB_TS in corresponding Landing Tables records
	 		INSERT INTO #UPDATE_HP_ORDER(
	   		 			PRIMARY_TELEPHONE_NUMBER, 
						WORKING_TELEPHONE_NUMBER,
						ITEM_CODE,
						SRCDOC_ID,
						REFERENCE_ID,
						RAI_ITEM_ID,
						BILL_DATE,
						TIME_IND,
						MOD_IND,
						BATCH_ID,
						CONTRACT_UNIQUE_IDENTIFIER,
						POB_END_DATE)
				 SELECT A."PRIMARY_TELEPHONE_NUMBER",
			   			A."WORKING_TELEPHONE_NUMBER",
		   		    	A."ITEM_CODE",
		   		    	A."CC_SRCDOCID",
		   		    	A."CC_REF_ID",
		   		    	A."CC_RAI_ITEM_ID",
		   		    	A."CC_BILL_DAY",
		   		    	A."CC_TIME_IND",
		   		    	A."CC_MOD_IND",
		   		    	B."ZZ_BATCH_ID",
		   		    	A."CONTRACT_UNIQUE_IDENTIFIER",
		   		    	A."POB_END_DATE"
		   		   FROM :HP_ORDR_RAI_ITEM A, 
   		    	        (SELECT "REFERENCE_ID","ZZ_BATCH_ID" 
   		    	           FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN"
   		    	          WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
   		    	            AND "ZZ_BATCH_ID" = LV_BATCH_ID) B 
		          WHERE A."CC_REF_ID" = B."REFERENCE_ID";
			   		        
			   		        
			INSERT INTO	#UPDATE_EH_DELETION_MAIN_HP (SRCDOC_ID) 
				 SELECT "SRCDOC_ID" 
				   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN"
				  WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
				    AND "ZZ_BATCH_ID" = LV_BATCH_ID;
			   		
			INSERT INTO	#UPDATE_EH_DELETION_COND_HP (SRCDOC_ID) 
				 SELECT COND."SRCDOC_ID" 
				   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND" COND,
	                	(SELECT "SRCDOC_ID" 
	                	   FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN" 
					  	  WHERE "REFERENCE_ID" = CUR_ORDER_PARENT."CC_REF_ID"
					  	    AND "ZZ_BATCH_ID" = LV_BATCH_ID) MAIN 
				  WHERE COND."SRCDOC_ID" = MAIN."SRCDOC_ID";
							          												 		   		        		   	   
		END IF;
	 
	END FOR;
																														   
	--------------------------------------------------------------------------------------------------
	-- Update NDB Tables
	-------------------------------------------------------------------------------------------------- 
			
	--  Updating the Source document Id, Reference Id, Header Id, Time indicator, RAI Item ID,Batch id 
	--  and RAI Timestamp in NDB order table for M2M Contracts as well as Optional POB of Term Contracts 
		UPDATE "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_ORDER" A
		  FROM "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_ORDER" A
		 INNER JOIN #UPDATE_HP_ORDER B
		    ON A.PRIMARY_TELEPHONE_NUMBER = B.PRIMARY_TELEPHONE_NUMBER
		   AND A.WORKING_TELEPHONE_NUMBER = B.WORKING_TELEPHONE_NUMBER
		   AND A.ITEM_CODE = B.ITEM_CODE
		   AND A.CONTRACT_UNIQUE_IDENTIFIER = B.CONTRACT_UNIQUE_IDENTIFIER
		   AND A.POB_END_DATE = B.POB_END_DATE		   
		   SET "SRCDOC_ID"     = B."SRCDOC_ID",
			   "REFERENCE_ID"  = B."REFERENCE_ID",			
			   "HEADER_ID"     = B."PRIMARY_TELEPHONE_NUMBER",			
			   "RAI_ITEM_ID"   = B."RAI_ITEM_ID",
			   "BATCH_ID"      = B."BATCH_ID",
			   "BILL_DATE"     = B."BILL_DATE",
			   "TIME_IND"      = B."TIME_IND",
			   "MOD_IND"       = B."MOD_IND",
			   "RAI_TS"        = LV_CUR_UTC
		 WHERE A.MOD_IND IS NULL; 
								 
	--  Update Order Main Error Table
		UPDATE "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_EH" A
		  FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_MAIN_EH" A
		 INNER JOIN #UPDATE_EH_DELETION_MAIN_HP B
		    ON A.SRCDOC_ID=B.SRCDOC_ID
		   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1); 
		
	--  Update Order Cond Error Table
		UPDATE "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_EH" A
		  FROM "RAI_HP"."IFRS_R1.HP.RAI_HP::HP_ORDR_COND_EH" A
		 INNER JOIN #UPDATE_EH_DELETION_COND_HP B
		    ON A.SRCDOC_ID=B.SRCDOC_ID
		   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1); 
				
	-------------------------------------------------------------------------------------------------
	-- Set Overall Status
	-------------------------------------------------------------------------------------------------- 
	
	--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
	--  executed successfully
		IF(LV_ERROR_FLAG = 'Y') THEN		
	
	     OP_STATUS := LC_ERROR_TEXT; 
				
		ELSE
	
	  	 OP_STATUS := LC_SUCCESS_TEXT; 	
					
		END IF;
	
	END;

END; 
