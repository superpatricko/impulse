PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_MDM_PROMO"
(IN IP_CYCL_ID NVARCHAR(3),
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_MDM_PROMO
-- Created By      : BC_EY94118 (Prakhar)       
-- Create Date     : 03-19-2017
-- Description     : Data Inserted using Calculation View - CA_MDM_PROMO
--                   To NDB Table - MDM_PROMO Using this stored procedure.
--                   MDM PROMO includes data from landing table MDM_PROMO.		
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);   

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG    INTEGER := 0;
DECLARE LV_PREV_RECORD	      NVARCHAR(100) := NULL;
--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
DECLARE CURSOR C_MDM FOR
		  SELECT
				 "PROMO_CD",
				 "ENG_NM",
				 "SERV_CD",
				 "RT_PLN_CD",
				 "DISC_CD",
				 "REFERENCE_EFFECTIVE_DT",
				 "REFERENCE_EXPIRY_DT",
				 "STRT_SELL_DT",
				 "CYCL_ID",
				 "SEQ_ID",
				 "SRC_TS",
				 "EFFECTIVE_DATE_PREV_DAY",
				 "INT_PROMO_PRIMARY_KEY_NDB",
				 "INT_PROMO_PRIMARY_KEY_LAND",
				 "FLAG_EXISTING_RECORD",
				 "ERROR_STATUS",
	             "ERROR_CODE"
			FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_MDM_PROMO"
				 (PLACEHOLDER."$$IP_CYCL_ID$$" => :IP_CYCL_ID)
	    ORDER BY PROMO_CD,DISC_CD,CYCL_ID ;
    
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_MDM_PROMO(INT_PROMO_PRIMARY_KEY NVARCHAR(81));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(INT_PROMO_PRIMARY_KEY NVARCHAR(100),REFERENCE_EFFECTIVE_DT NVARCHAR(100));    
    
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------
FOR CUR_MDM AS C_MDM DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 

		--  Define Exit Handler
			DECLARE EXIT HANDLER FOR SQLEXCEPTION 
			BEGIN AUTONOMOUS TRANSACTION 
			
			
			END;
								
		   -- Insert record into error table
		   	  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_PROMO_EH"(
		                  "PROMO_CD",
						  "ENG_NM",
						  "SERV_CD",
						  "RT_PLN_CD",
						  "DISC_CD",
						  "REFERENCE_EFFECTIVE_DT",
						  "REFERENCE_EXPIRY_DT",
						  "STRT_SELL_DT",
						  "INT_PROMO_PRIMARY_KEY",
						  "INSRT_TS",
						  "ERROR_CODE",
				          "TECHNICAL_MESSAGE",
				          "ERROR_CREATE_TS")
				   VALUES (CUR_MDM."PROMO_CD",
						   CUR_MDM."ENG_NM",
						   CUR_MDM."SERV_CD",
						   CUR_MDM."RT_PLN_CD",
						   CUR_MDM."DISC_CD",
						   CUR_MDM."SRC_TS",
						   CUR_MDM."REFERENCE_EXPIRY_DT",
						   CUR_MDM."STRT_SELL_DT",
						   CUR_MDM."INT_PROMO_PRIMARY_KEY_NDB",
						   LV_CUR_UTC,
						   ::SQL_ERROR_CODE,
				           ::SQL_ERROR_MESSAGE,
				           LV_CUR_UTC);
				          
		       LV_ERROR_FLAG := 'Y';
		       LV_LOOP_ERROR_FLAG := 1;
	  END;  		          
		   	 
        -- FOR CLEARING THE VARIABLES

	IF ((LV_PREV_RECORD IS NULL ) OR (CUR_MDM."INT_PROMO_PRIMARY_KEY_NDB" != LV_PREV_RECORD)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "CUR_MDM"."INT_PROMO_PRIMARY_KEY_NDB";
		
    END IF;
    
    --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CUR_MDM.ERROR_STATUS = '1'  THEN
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_MDM."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		 -- Insert record into error table
		   	  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_PROMO_EH"(
		                  "PROMO_CD",
						  "ENG_NM",
						  "SERV_CD",
						  "RT_PLN_CD",
						  "DISC_CD",
						  "REFERENCE_EFFECTIVE_DT",
						  "REFERENCE_EXPIRY_DT",
						  "STRT_SELL_DT",
						  "INT_PROMO_PRIMARY_KEY",
						  "INSRT_TS",
						  "ERROR_CODE",
				          "ERROR_CREATE_TS")
				   VALUES (CUR_MDM."PROMO_CD",
						   CUR_MDM."ENG_NM",
						   CUR_MDM."SERV_CD",
						   CUR_MDM."RT_PLN_CD",
						   CUR_MDM."DISC_CD",
						   CUR_MDM."SRC_TS",
						   CUR_MDM."REFERENCE_EXPIRY_DT",
						   CUR_MDM."STRT_SELL_DT",
						   CUR_MDM."INT_PROMO_PRIMARY_KEY_NDB",
						   LV_CUR_UTC,
						   :CURRENT_ERROR,
				           LV_CUR_UTC);   	 
		   	 
		   	        END FOR;
    
    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
    
   ELSE 
         IF CUR_MDM.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
		   -- Insert record into error table
		   	  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_PROMO_EH"(
		                  "PROMO_CD",
						  "ENG_NM",
						  "SERV_CD",
						  "RT_PLN_CD",
						  "DISC_CD",
						  "REFERENCE_EFFECTIVE_DT",
						  "REFERENCE_EXPIRY_DT",
						  "STRT_SELL_DT",
						  "INT_PROMO_PRIMARY_KEY",
						  "INSRT_TS",
						  "ERROR_CODE",
				          "ERROR_CREATE_TS")
				   VALUES (CUR_MDM."PROMO_CD",
						   CUR_MDM."ENG_NM",
						   CUR_MDM."SERV_CD",
						   CUR_MDM."RT_PLN_CD",
						   CUR_MDM."DISC_CD",
						   CUR_MDM."SRC_TS",
						   CUR_MDM."REFERENCE_EXPIRY_DT",
						   CUR_MDM."STRT_SELL_DT",
						   CUR_MDM."INT_PROMO_PRIMARY_KEY_NDB",
						   LV_CUR_UTC,
						   'PREVIOUS VERSION IN ERROR',
				           LV_CUR_UTC);   	 
		   	 
 -- Processing for Successful Records	   	  
 --   If Record exists in the Target NDB Table
      ELSE IF CUR_MDM.FLAG_EXISTING_RECORD = 'U' THEN  
      
      			BEGIN AUTONOMOUS TRANSACTION 
    
				--     Update the target NDB table
					   UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_PROMO" NDB
						  SET NDB.REFERENCE_EXPIRY_DT          	            = CUR_MDM.EFFECTIVE_DATE_PREV_DAY,
					 		  NDB.MODIFIED_TS                               = LV_CUR_UTC 
  						  WHERE CUR_MDM.INT_PROMO_PRIMARY_KEY_NDB           = NDB.INT_PROMO_PRIMARY_KEY
						  AND NDB.REFERENCE_EXPIRY_DT                       = '99991231';
				   	  
				--    Insert the Incoming new record
					  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_PROMO"(
					  		      "PROMO_CD",
								  "ENG_NM",
								  "SERV_CD",
								  "RT_PLN_CD",
								  "DISC_CD",
								  "REFERENCE_EFFECTIVE_DT",
								  "REFERENCE_EXPIRY_DT",
								  "STRT_SELL_DT",
								  "INT_PROMO_PRIMARY_KEY",
								  "INSRT_TS")		
						   VALUES (CUR_MDM."PROMO_CD",
								   CUR_MDM."ENG_NM",
								   CUR_MDM."SERV_CD",
								   CUR_MDM."RT_PLN_CD",
								   CUR_MDM."DISC_CD",
								   CUR_MDM."REFERENCE_EFFECTIVE_DT",
								   CUR_MDM."REFERENCE_EXPIRY_DT",
								   CUR_MDM."STRT_SELL_DT",
								   CUR_MDM."INT_PROMO_PRIMARY_KEY_NDB",
								   LV_CUR_UTC);
								  
					END;			  
				  
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_MDM_PROMO
					   ("INT_PROMO_PRIMARY_KEY" 
					    ) 
			    VALUES ( CUR_MDM."INT_PROMO_PRIMARY_KEY_LAND" 
					   );
					   				   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("INT_PROMO_PRIMARY_KEY",
					    "REFERENCE_EFFECTIVE_DT"
					    )
		        VALUES ( CUR_MDM."INT_PROMO_PRIMARY_KEY_NDB",
                    	 CUR_MDM."REFERENCE_EFFECTIVE_DT"
                    	);
                    	
      ELSEIF CUR_MDM.FLAG_EXISTING_RECORD = 'I' THEN 	
    	          
		--    Insert Records into the target NDB table   	  
		   	  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_PROMO"(				    
						  "PROMO_CD",
						  "ENG_NM",
						  "SERV_CD",
						  "RT_PLN_CD",
						  "DISC_CD",
						  "REFERENCE_EFFECTIVE_DT",
						  "REFERENCE_EXPIRY_DT",
						  "STRT_SELL_DT",
						  "INT_PROMO_PRIMARY_KEY",
						  "INSRT_TS")		
				   VALUES (CUR_MDM."PROMO_CD",
						   CUR_MDM."ENG_NM",
						   CUR_MDM."SERV_CD",
						   CUR_MDM."RT_PLN_CD",
						   CUR_MDM."DISC_CD",
						   CUR_MDM."REFERENCE_EFFECTIVE_DT",
						   CUR_MDM."REFERENCE_EXPIRY_DT",
						   CUR_MDM."STRT_SELL_DT",
						   CUR_MDM."INT_PROMO_PRIMARY_KEY_NDB",
						   LV_CUR_UTC);
						  
		--         Insert PK of successfully processed Records into Local Temp Tables 
		--         for Updating NDB_TS in corresponding Landing Tables records
		    INSERT INTO #UPDATE_MDM_PROMO
					   ("INT_PROMO_PRIMARY_KEY" 
					    ) 
			    VALUES ( CUR_MDM."INT_PROMO_PRIMARY_KEY_LAND" 
					   );
					   				   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("INT_PROMO_PRIMARY_KEY",
					   "REFERENCE_EFFECTIVE_DT"
					    )
		        VALUES ( CUR_MDM."INT_PROMO_PRIMARY_KEY_NDB",
                    	 CUR_MDM."REFERENCE_EFFECTIVE_DT"
                    	);
            			  
     END IF;   
    END IF;
   END IF;
  END IF; 
END FOR;
   

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::MDM_PROMO
UPDATE "LAND"."IFRS_R1.LAND::MDM_PROMO" A
  FROM "LAND"."IFRS_R1.LAND::MDM_PROMO" A 
 INNER JOIN #UPDATE_MDM_PROMO B 
    ON A."INT_PROMO_PRIMARY_KEY"     = B."INT_PROMO_PRIMARY_KEY"
     SET NDB_TS                      = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_PROMO_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::MDM_PROMO_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."INT_PROMO_PRIMARY_KEY"               = B."INT_PROMO_PRIMARY_KEY"
   AND A."REFERENCE_EFFECTIVE_DT"              = B."REFERENCE_EFFECTIVE_DT"
   SET (DELETE_DATE, DELETED)                  = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;    