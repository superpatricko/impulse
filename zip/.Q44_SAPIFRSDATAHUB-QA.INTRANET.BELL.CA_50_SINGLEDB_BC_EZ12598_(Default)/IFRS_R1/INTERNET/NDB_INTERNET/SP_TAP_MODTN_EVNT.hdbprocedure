PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_TAP_MODTN_EVNT"
(IN  IP_CID_DATE DATE,
 OUT OP_STATUS NVARCHAR(1000)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
----------------------------------------------------------------------
-- Procedure Title : SP_INT_POSTBILL
-- Created By      : BC_EZ08930 (Rakesh)       
-- Create Date     : 15-03-2017
-- Description     : Data Inserted using Calculation View - CA_TAP_MODTN_EVNT
--                   to NDB Table - INT_MODTN_EVNT Using this stored procedure.
--                   INT_MODTN_EVNT includes data from table TAP_MODTN_EVNT.			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------   
DECLARE CURSOR C_EVNT FOR
      SELECT
			 "ALTN_CONTR_NUM",
			 "CONTR_UNQ_ID",
			 "EVNT_EFF_DT",
			 "EVNT_ID",
			 "EVNT_STATE",
			 "EVNT_TY_CD",
			 "PRM_CONTR_CUST",
			 "RACTVN_DT",
			 "TEMP_SEAS_SUSPN",
			 "FLAG_EXISTING_RECORD",
			 "ERROR_CODE",
			 "ERROR_STATUS",
			 "CYCL_ID",
			 "SEQ_ID" 
        FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_TAP_MODTN_EVNT"  
             (PLACEHOLDER."$$IP_CID_DATE$$" => :IP_CID_DATE)
    ORDER BY "CYCL_ID","SEQ_ID";         
         
----------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-----------------------------------------------------------------------------------------------------
 
CREATE LOCAL TEMPORARY TABLE #UPDATE_TAP_MODTN_EVNT(ALTN_CONTR_NUM NVARCHAR(35), CONTR_UNQ_ID NVARCHAR(34), 
EVNT_EFF_DT SECONDDATE, EVNT_ID NVARCHAR(10), EVNT_STATE NVARCHAR(16), PRM_CONTR_CUST NVARCHAR(35));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(ALTN_CONTR_NUM NVARCHAR(35), CONTR_UNQ_ID NVARCHAR(34), 
EVNT_EFF_DT SECONDDATE, EVNT_ID NVARCHAR(10), EVNT_STATE NVARCHAR(16), PRM_CONTR_CUST NVARCHAR(35));
 
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 
FOR CUR_EVNT AS C_EVNT DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
 	  
	 -- Insert record into error table
	 
	     INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MODTN_EVNT_EH"( 
	     			 "ALTN_CONTR_NUM",
					 "CONTR_UNQ_ID",
					 "EVNT_EFF_DT",
					 "EVNT_ID",
					 "EVNT_STATE",
					 "EVNT_TY_CD",
					 "PRM_CONTR_CUST",
					 "RACTVN_DT",
					 "TEMP_SEAS_SUSPN",
					 "ERROR_CODE",
			         "TECHNICAL_MESSAGE",
			         "ERROR_CREATE_TS")
			  VALUES(CUR_EVNT."ALTN_CONTR_NUM",
					 CUR_EVNT."CONTR_UNQ_ID",
					 CUR_EVNT.CUR_EVNT."EVNT_EFF_DT",
					 CUR_EVNT."EVNT_ID",
					 CUR_EVNT."EVNT_STATE",
					 CUR_EVNT."EVNT_TY_CD",
					 CUR_EVNT."PRM_CONTR_CUST",
					 CUR_EVNT."RACTVN_DT",
					 CUR_EVNT."TEMP_SEAS_SUSPN",
					 ::SQL_ERROR_CODE,
		             ::SQL_ERROR_MESSAGE,
		             LV_CUR_UTC);
		             
       LV_ERROR_FLAG := 'Y';
      	
     END;	          
   	  
   	  
   	  --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
   	   /*   ALTN_CONTR_NUM already exists in INT_MODTN_EVNT NDB table for ALTN_CONTR_NUM  in CA_TAP_MODTN_EVNT view.
   	      Always new ALTN_CONTR_NUM is expected from CA_TAP_MODTN_EVNT , Therefore no update (FLAG_EXISTING_RECORD='U')
		  is expected in this view. If an update comes  ERROR_STATUS will be set to '1'	
	   */
	IF CUR_EVNT.ERROR_STATUS = '1' THEN
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_EVNT."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
			 -- Fetch the Error Code
				CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
				
			   -- Insert into the Error Table
			         INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MODTN_EVNT_EH"( 
				     			 "ALTN_CONTR_NUM",
								 "CONTR_UNQ_ID",
								 "EVNT_EFF_DT",
								 "EVNT_ID",
								 "EVNT_STATE",
								 "EVNT_TY_CD",
								 "PRM_CONTR_CUST",
								 "RACTVN_DT",
								 "TEMP_SEAS_SUSPN",
								 "ERROR_CODE",
						         "ERROR_CREATE_TS")
						 VALUES (CUR_EVNT."ALTN_CONTR_NUM",
								 CUR_EVNT."CONTR_UNQ_ID",
								 CUR_EVNT.CUR_EVNT."EVNT_EFF_DT",
								 CUR_EVNT."EVNT_ID",
								 CUR_EVNT."EVNT_STATE",
								 CUR_EVNT."EVNT_TY_CD",
								 CUR_EVNT."PRM_CONTR_CUST",
								 CUR_EVNT."RACTVN_DT",
								 CUR_EVNT."TEMP_SEAS_SUSPN",
								 :CURRENT_ERROR,
					             LV_CUR_UTC);
			             
		END FOR;
								     
         -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';

-- Processing for Successful Records

      ELSEIF CUR_EVNT.FLAG_EXISTING_RECORD = 'I' THEN	
      	          
--    Insert Records into the target NDB table   	
  
   	  INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MODTN_EVNT"(
   	              "ALTN_CONTR_NUM",
				  "CONTR_UNQ_ID",
				  "EVNT_EFF_DT",
				  "EVNT_ID",
				  "EVNT_STATE",
			      "EVNT_TY_CD",
				  "PRM_CONTR_CUST",
				  "RACTVN_DT",
				  "TEMP_SEAS_SUSPN",
				  "INSERT_TS")
		   VALUES (CUR_EVNT."ALTN_CONTR_NUM",
				   CUR_EVNT."CONTR_UNQ_ID",
				   CUR_EVNT."EVNT_EFF_DT",
				   CUR_EVNT."EVNT_ID",
				   CUR_EVNT."EVNT_STATE",
				   CUR_EVNT."EVNT_TY_CD",
				   CUR_EVNT."PRM_CONTR_CUST",
				   CUR_EVNT."RACTVN_DT",
				   CUR_EVNT."TEMP_SEAS_SUSPN",
		           LV_CUR_UTC);
		           
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_TAP_MODTN_EVNT
					   (ALTN_CONTR_NUM, 
					    CONTR_UNQ_ID,
					    EVNT_EFF_DT,
					    EVNT_ID,
					    EVNT_STATE,
					    PRM_CONTR_CUST) 
			    VALUES (CUR_EVNT.ALTN_CONTR_NUM, 
					    CUR_EVNT.CONTR_UNQ_ID,
					    CUR_EVNT.EVNT_EFF_DT,
					    CUR_EVNT.EVNT_ID,
					    CUR_EVNT.EVNT_STATE,
					    CUR_EVNT.PRM_CONTR_CUST);
					   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   (ALTN_CONTR_NUM, 
					    CONTR_UNQ_ID,
					    EVNT_EFF_DT,
					    EVNT_ID,
					    EVNT_STATE,
					    PRM_CONTR_CUST) 
			    VALUES (CUR_EVNT.ALTN_CONTR_NUM, 
					    CUR_EVNT.CONTR_UNQ_ID,
					    CUR_EVNT.EVNT_EFF_DT,
					    CUR_EVNT.EVNT_ID,
					    CUR_EVNT.EVNT_STATE,
					    CUR_EVNT.PRM_CONTR_CUST);  
					   	
    END IF;  

END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::TAP_MODTN_EVNT
UPDATE "LAND"."IFRS_R1.LAND::TAP_MODTN_EVNT" A
  FROM "LAND"."IFRS_R1.LAND::TAP_MODTN_EVNT" A 
 INNER JOIN #UPDATE_TAP_MODTN_EVNT B 
    ON A."ALTN_CONTR_NUM" = B."ALTN_CONTR_NUM"
   AND A."CONTR_UNQ_ID"   = B."CONTR_UNQ_ID"
   AND A."EVNT_EFF_DT"    = B."EVNT_EFF_DT"
   AND A."EVNT_ID"        = B."EVNT_ID"
   AND A."EVNT_STATE"     = B."EVNT_STATE"
   AND A."PRM_CONTR_CUST" = B."PRM_CONTR_CUST"
   SET NDB_TS             = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MODTN_EVNT_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_MODTN_EVNT_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."ALTN_CONTR_NUM"     = B."ALTN_CONTR_NUM"
   AND A."CONTR_UNQ_ID"       = B."CONTR_UNQ_ID"
   AND A."EVNT_EFF_DT"        = B."EVNT_EFF_DT"
   AND A."EVNT_ID"            = B."EVNT_ID"
   AND A."EVNT_STATE"         = B."EVNT_STATE"
   AND A."PRM_CONTR_CUST"     = B."PRM_CONTR_CUST"
   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;