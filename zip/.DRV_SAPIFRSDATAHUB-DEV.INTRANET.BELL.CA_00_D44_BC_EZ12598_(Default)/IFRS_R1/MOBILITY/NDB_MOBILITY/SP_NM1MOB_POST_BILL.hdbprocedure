PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_NM1MOB_POST_BILL" 
(IN IP_JOURNALIZATION_DATE DATE,
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA  
	AS
BEGIN 
 
----------------------------------------------------------------------
-- Procedure Title : SP_NM1MOB_POST_BILL
--
-- Created By      : Akanksha Singh          Date : 05/10/2016
-- 
-- Procedure Description : It is used to insert data into NDB Table
--                         using harmonization views -CA_NM1MOB_POST_BILL_ITEM
--                         and CA_NM1MOB_POST_BILL_DSCT. NDB_TS is updated in Landing Table         
--                         after data is loaded in NDB.
--Project :Bell Canada
--
--
----------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
----------------------------------------------------------------------
-- 22-10-2016  | BC_EY94137       | Amount logic incorporated
-- 30/11/2016  | BC_EY94137       | Added error and control logs
-- 02/05/2017  | EZ_18762		  | Effective date as input and one cursor logic/error logic  
---------------|------------------|----------------------------------
-- Description Of the changes 
----------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> :<Description of Changes>       
----------------------------------------------------------------------

	DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
	DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
	DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
	DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
	DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
	DECLARE i					INTEGER;
	DECLARE RECORD_COUNT		INTEGER;
	DECLARE CURRENT_ERROR		NVARCHAR(100);
	
	DECLARE CURSOR CA_MOB_POST_BILL FOR
		SELECT
		 "ACCR_IND",
		 "ACTV_CD",
		 "ACTV_RSN_CD",
		 "ADJ_RSN_CD",
		 "AR_ACTV",
		 "BAL_IMP_CD",
		 "BAN",
		 "BILL_SEQ_NO",
		 "CHRG_SEQ_NO",
		 "CR_DR_IND",
		 "CURR_CODE",
		 "DSCT_CD",
		 "EFF_DT",
		 "ENT_SEQ_NO",
		 "ITEM_SUB_ID",
		 "FTR_REV_CD",
		 "GL_ACCT_NO",
		 "GL_COST_CENTRE",
		 "GL_JURISD_CD",
		 "GL_TAX_CD",
		 "JOURN_DT",
		 "OVER_USE_IND",
		 "PRD_CVRG_END_DT",
		 "PRD_CVRG_STRT_DT",
		 "PROMO_CD",
		 "PROV",
		 "REALLOCATION_IND",
		 "ITEM_ID",
		 "SUBSCR_NO",
		 "BILLER",
		 "TRANS_TY",
		 "UOM",
		 "GL_PRICE_PLAN_GRP",
		 "ADJ_RSN_CLASS_CD",
		 "AMT",
		 "KUNNR_SID",		
		 "ERROR_CODE",
		 "ERROR_STATUS",
		 "CYCL_ID",
		 "BASE_OPT_SERV_IND",
		 "NM1BILL_PRIMARY_KEY",
		 "COUNT",
		 "BILL_PRIMARY_KEY"
		FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_NM1MOB_POST_BILL_ITEM"
		(PLACEHOLDER."$$IP_JOURNALIZATION_DATE$$"=> :IP_JOURNALIZATION_DATE)
		ORDER BY JOURN_DT,CYCL_ID;
	 
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------  
	CREATE LOCAL TEMPORARY TABLE #UPDATE_NM1_BILL(NM1BILL_PRIMARY_KEY NVARCHAR (600));
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(BILL_PRIMARY_KEY NVARCHAR(100));
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 		

	FOR CUR_BILL AS CA_MOB_POST_BILL DO
		
		-- Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION
			
			-- Define Exit Handler
			DECLARE EXIT HANDLER FOR SQLEXCEPTION 
			BEGIN AUTONOMOUS TRANSACTION 
			
			END;
			
			INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_BILL_EH"(
				     ITEM_ID,
					 BAN,
					 BILL_SEQ_NO,
					 ENT_SEQ_NO,
					 GL_ACCT_NO,
					 DSCT_CD,
					 ITEM_SUB_ID,
					 JOURN_DT,
					 SUBSCR_NO,
					 ADJ_RSN_CD,
					 CHRG_SEQ_NO,
					 EFF_DT,
					 GL_COST_CENTRE,
					 GL_JURISD_CD,
					 GL_TAX_CD,
					 PRD_CVRG_END_DT,
					 PRD_CVRG_STRT_DT,
					 PROMO_CD,
					 PROV,
					 UOM,
					 ACCR_IND,
					 ACTV_CD,
					 ACTV_RSN_CD,
					 AMT,
					 BAL_IMP_CD,
					 BILLER,
					 OVER_USE_IND,
					 TRANS_TY,
					 ADJ_RSN_CLASS_CD,
					 FTR_REV_CD,
					 AR_ACTV,
					 CURR_CODE,
					 CR_DR_IND,
					 REALLOCATION_IND,
					 GL_PRICE_PLAN_GRP,
					 KUNNR_SID,
					 BASE_OPT_SERV_IND,
					 "COUNT",
					 BILL_PRIMARY_KEY,					 
					 INSERT_TS,
				     ERROR_CODE,
					 TECHNICAL_MESSAGE,
					 ERROR_CREATE_TS
					 ) VALUES (
					 CUR_BILL.ITEM_ID,
					 CUR_BILL.BAN,
					 CUR_BILL.BILL_SEQ_NO,
					 CUR_BILL.ENT_SEQ_NO,
					 CUR_BILL.GL_ACCT_NO,
					 CUR_BILL.DSCT_CD,
					 CUR_BILL.ITEM_SUB_ID,
					 CUR_BILL.JOURN_DT,
					 CUR_BILL.SUBSCR_NO,
					 CUR_BILL.ADJ_RSN_CD,
					 CUR_BILL.CHRG_SEQ_NO,
					 CUR_BILL.EFF_DT,
					 CUR_BILL.GL_COST_CENTRE,
					 CUR_BILL.GL_JURISD_CD,
					 CUR_BILL.GL_TAX_CD,
					 CUR_BILL.PRD_CVRG_END_DT,
					 CUR_BILL.PRD_CVRG_STRT_DT,
					 CUR_BILL.PROMO_CD,
					 CUR_BILL.PROV,
					 CUR_BILL.UOM,
					 CUR_BILL.ACCR_IND,
					 CUR_BILL.ACTV_CD,
					 CUR_BILL.ACTV_RSN_CD,
					 CUR_BILL.AMT,
					 CUR_BILL.BAL_IMP_CD,
					 CUR_BILL.BILLER,
					 CUR_BILL.OVER_USE_IND,
					 CUR_BILL.TRANS_TY,
					 CUR_BILL.ADJ_RSN_CLASS_CD,
					 CUR_BILL.FTR_REV_CD,
					 CUR_BILL.AR_ACTV,
					 CUR_BILL.CURR_CODE,
					 CUR_BILL.CR_DR_IND,
					 CUR_BILL.REALLOCATION_IND,
					 CUR_BILL.GL_PRICE_PLAN_GRP,
					 CUR_BILL.KUNNR_SID,
					 CUR_BILL.BASE_OPT_SERV_IND,
					 CUR_BILL."COUNT",
					 CUR_BILL.BILL_PRIMARY_KEY,					 	 
					 LV_CUR_UTC,
					 ::SQL_ERROR_CODE,
				 	 ::SQL_ERROR_MESSAGE,
	  				 LV_CUR_UTC);
			LV_ERROR_FLAG := 'Y';		   
		--END for AUTONOMOS
		END;
		
		--Check the Error Status of the Record. If Record is with Error, then send to Error Table
		IF CUR_BILL.ERROR_STATUS = '1' THEN
		
			--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		    CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_BILL."ERROR_CODE", ERROR_TAB, RECORD_COUNT);
		    
		    FOR i IN 1 .. :RECORD_COUNT DO
		    	CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
		    	--Insert modification data into NDB ORDER table
		    	INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_BILL_EH"(
				     ITEM_ID,
					 BAN,
					 BILL_SEQ_NO,
					 ENT_SEQ_NO,
					 GL_ACCT_NO,
					 DSCT_CD,
					 ITEM_SUB_ID,
					 JOURN_DT,
					 SUBSCR_NO,
					 ADJ_RSN_CD,
					 CHRG_SEQ_NO,
					 EFF_DT,
					 GL_COST_CENTRE,
					 GL_JURISD_CD,
					 GL_TAX_CD,
					 PRD_CVRG_END_DT,
					 PRD_CVRG_STRT_DT,
					 PROMO_CD,
					 PROV,
					 UOM,
					 ACCR_IND,
					 ACTV_CD,
					 ACTV_RSN_CD,
					 AMT,
					 BAL_IMP_CD,
					 BILLER,
					 OVER_USE_IND,
					 TRANS_TY,
					 ADJ_RSN_CLASS_CD,
					 FTR_REV_CD,
					 AR_ACTV,
					 CURR_CODE,
					 CR_DR_IND,
					 REALLOCATION_IND,
					 GL_PRICE_PLAN_GRP,
					 KUNNR_SID,
					 BASE_OPT_SERV_IND,
					 "COUNT",
					 BILL_PRIMARY_KEY,			 
					 INSERT_TS,
				     ERROR_CODE,
					 ERROR_CREATE_TS
					 ) VALUES (
					 CUR_BILL.ITEM_ID,
					 CUR_BILL.BAN,
					 CUR_BILL.BILL_SEQ_NO,
					 CUR_BILL.ENT_SEQ_NO,
					 CUR_BILL.GL_ACCT_NO,
					 CUR_BILL.DSCT_CD,
					 CUR_BILL.ITEM_SUB_ID,
					 CUR_BILL.JOURN_DT,
					 CUR_BILL.SUBSCR_NO,
					 CUR_BILL.ADJ_RSN_CD,
					 CUR_BILL.CHRG_SEQ_NO,
					 CUR_BILL.EFF_DT,
					 CUR_BILL.GL_COST_CENTRE,
					 CUR_BILL.GL_JURISD_CD,
					 CUR_BILL.GL_TAX_CD,
					 CUR_BILL.PRD_CVRG_END_DT,
					 CUR_BILL.PRD_CVRG_STRT_DT,
					 CUR_BILL.PROMO_CD,
					 CUR_BILL.PROV,
					 CUR_BILL.UOM,
					 CUR_BILL.ACCR_IND,
					 CUR_BILL.ACTV_CD,
					 CUR_BILL.ACTV_RSN_CD,
					 CUR_BILL.AMT,
					 CUR_BILL.BAL_IMP_CD,
					 CUR_BILL.BILLER,
					 CUR_BILL.OVER_USE_IND,
					 CUR_BILL.TRANS_TY,
					 CUR_BILL.ADJ_RSN_CLASS_CD,
					 CUR_BILL.FTR_REV_CD,
					 CUR_BILL.AR_ACTV,
					 CUR_BILL.CURR_CODE,
					 CUR_BILL.CR_DR_IND,
					 CUR_BILL.REALLOCATION_IND,
					 CUR_BILL.GL_PRICE_PLAN_GRP,
					 CUR_BILL.KUNNR_SID,
					 CUR_BILL.BASE_OPT_SERV_IND,
					 CUR_BILL."COUNT",
					 CUR_BILL.BILL_PRIMARY_KEY,	 
					 LV_CUR_UTC,
					 :CURRENT_ERROR,
	  				 LV_CUR_UTC);
							
		    END FOR;
		    
		    LV_ERROR_FLAG := 'Y';	
		    
		 ELSE
		 		INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_BILL"(
				     ITEM_ID,
					 BAN,
					 BILL_SEQ_NO,
					 ENT_SEQ_NO,
					 GL_ACCT_NO,
					 DSCT_CD,
					 ITEM_SUB_ID,
					 JOURN_DT,
					 SUBSCR_NO,
					 ADJ_RSN_CD,
					 CHRG_SEQ_NO,
					 EFF_DT,
					 GL_COST_CENTRE,
					 GL_JURISD_CD,
					 GL_TAX_CD,
					 PRD_CVRG_END_DT,
					 PRD_CVRG_STRT_DT,
					 PROMO_CD,
					 PROV,
					 UOM,
					 ACCR_IND,
					 ACTV_CD,
					 ACTV_RSN_CD,
					 AMT,
					 BAL_IMP_CD,
					 BILLER,
					 OVER_USE_IND,
					 TRANS_TY,
					 ADJ_RSN_CLASS_CD,
					 FTR_REV_CD,
					 AR_ACTV,
					 CURR_CODE,
					 CR_DR_IND,
					 REALLOCATION_IND,
					 GL_PRICE_PLAN_GRP,
					 KUNNR_SID,
					 BASE_OPT_SERV_IND,
					 "COUNT",
					 BILL_PRIMARY_KEY,					 
					 INSERT_TS,
					 CYCL_ID
					 ) VALUES (
					 CUR_BILL.ITEM_ID,
					 CUR_BILL.BAN,
					 CUR_BILL.BILL_SEQ_NO,
					 CUR_BILL.ENT_SEQ_NO,
					 CUR_BILL.GL_ACCT_NO,
					 CUR_BILL.DSCT_CD,
					 CUR_BILL.ITEM_SUB_ID,
					 CUR_BILL.JOURN_DT,
					 CUR_BILL.SUBSCR_NO,
					 CUR_BILL.ADJ_RSN_CD,
					 CUR_BILL.CHRG_SEQ_NO,
					 CUR_BILL.EFF_DT,
					 CUR_BILL.GL_COST_CENTRE,
					 CUR_BILL.GL_JURISD_CD,
					 CUR_BILL.GL_TAX_CD,
					 CUR_BILL.PRD_CVRG_END_DT,
					 CUR_BILL.PRD_CVRG_STRT_DT,
					 CUR_BILL.PROMO_CD,
					 CUR_BILL.PROV,
					 CUR_BILL.UOM,
					 CUR_BILL.ACCR_IND,
					 CUR_BILL.ACTV_CD,
					 CUR_BILL.ACTV_RSN_CD,
					 CUR_BILL.AMT,
					 CUR_BILL.BAL_IMP_CD,
					 CUR_BILL.BILLER,
					 CUR_BILL.OVER_USE_IND,
					 CUR_BILL.TRANS_TY,
					 CUR_BILL.ADJ_RSN_CLASS_CD,
					 CUR_BILL.FTR_REV_CD,
					 CUR_BILL.AR_ACTV,
					 CUR_BILL.CURR_CODE,
					 CUR_BILL.CR_DR_IND,
					 CUR_BILL.REALLOCATION_IND,
					 CUR_BILL.GL_PRICE_PLAN_GRP,
					 CUR_BILL.KUNNR_SID,
					 CUR_BILL.BASE_OPT_SERV_IND,
					 CUR_BILL."COUNT",
					 CUR_BILL.BILL_PRIMARY_KEY,	 
					 LV_CUR_UTC,
					 CUR_BILL.CYCL_ID);
											
					INSERT INTO #UPDATE_NM1_BILL 
								   (NM1BILL_PRIMARY_KEY) 
									VALUES
								   (CUR_BILL."NM1BILL_PRIMARY_KEY"); 
								 	
					INSERT INTO #UPDATE_EH_DELETION 
								   (BILL_PRIMARY_KEY) 
									VALUES
								   (CUR_BILL."BILL_PRIMARY_KEY");	
					
		 END IF;
	END FOR;
	
	-- Update NDB_TS in Landing Table
	UPDATE "LAND"."IFRS_R1.LAND::NM1_BILL" A 
	FROM "LAND"."IFRS_R1.LAND::NM1_BILL" A
	INNER JOIN #UPDATE_NM1_BILL B
	ON A.NM1BILL_PRIMARY_KEY = B.NM1BILL_PRIMARY_KEY 
	SET A.NDB_TS = LV_CUR_UTC 
	WHERE A.NDB_TS IS NULL;
	 
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

	UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_BILL_EH" A
    FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_BILL_EH" A 
    INNER JOIN #UPDATE_EH_DELETION B       
  	ON A.BILL_PRIMARY_KEY = B.BILL_PRIMARY_KEY
    SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);
    
  
--------------------------------------------------------------------------------------------------
	-- Set Overall Status
-------------------------------------------------------------------------------------------------- 
	--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
	--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN
    	OP_STATUS := LC_ERROR_TEXT; 			
    ELSE
  		OP_STATUS := LC_SUCCESS_TEXT;				
	END IF;
	
END;