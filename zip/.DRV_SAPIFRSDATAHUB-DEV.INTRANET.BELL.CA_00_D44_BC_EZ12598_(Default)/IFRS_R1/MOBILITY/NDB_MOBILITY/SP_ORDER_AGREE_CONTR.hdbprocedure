PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_ORDER_AGREE_CONTR"
	(IN IP_EFF_DT DATE,
	OUT OP_STATUS  NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
	AS
BEGIN
----------------------------------------------------------------------
-- Procedure Title : SP_ORDER_AGREE_CONTR
--
-- Created By      : BC_EY94137(Akanksha Singh)          Date : 26/09/2016
-- 
-- Procedure Description : It is used to INSERT/UPDATE data in NDB Table
--                         from Harmonization view CA_ORDER_AGREE_CONTR.
--                         NDB_TS is updated in Landing Table         
--                         after data is loaded in NDB.
--Project :Bell Canda
--
-- 
----------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
----------------------------------------------------------------------
-- 21/10/2016  | BC_EY94137       | incorporated order flow change
-- 02/11/2016  | BC_EY94137       | incorporated order flow change
-- 30/11/2016  | BC_EY94137       | Added error and control log
-- 02/05/2017  | EZ_18762		  | Effective date as input and one cursor logic/error logic 
---------------|------------------|-----------------------------------

----------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> :<Description of Changes>       
----------------------------------------------------------------------

	DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
	DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
	DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
	DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
	DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
	DECLARE i					INTEGER;
	DECLARE RECORD_COUNT		INTEGER;
	DECLARE CURRENT_ERROR		NVARCHAR(100);
	-- New variables for version sequence check
	DECLARE LV_LOOP_ERROR_FLAG        INTEGER := 0;
	DECLARE LV_PREV_BAN_SUB		  NVARCHAR(41) := NULL;
	
	 
	
	DECLARE CURSOR CUR_ORDER_AGREE FOR
	SELECT
	 "ERROR_STATUS",
	 "ERROR_CODE",
	 "FLAG_EXISTING_RECORD",
	 "MIN_TIER_PRC",
	 "STNDLN_SELL_PRC",
	 "REV_CD",
	 "BRND",
	 "ACTV_CD",
	 "ACTV_RSN_CD",
	 "BYRS_RMRSE",
	 "CONTR_END_DT",
	 "CONTR_TERM",
	 "CONTR_STRT_DT",
	 "CONTR_TY",
	 "EI_GRP_SEQ_NO",
	 "TRX_SEQ_NO",
	 "CONTR_ID",
	 "BSE_SOC",
	 "BSE_SOC_AMT",
	 "COST_CENTRE",
	 "GL_ACCOUNT",
	 "GL_TAX_CD",
	 "ITEM_END_DT",
	 "ITEM_ID",
	 "ITEM_STRT_DT",
	 "ITEM_SUB_ID",
	 "JURISD_CD",
	 "PROMO_CD",
	 "TRANS_PRC",
	 "PROV_AGR",
	 "SOC_LEV_CD",
	 "SERV_TY",
	 "PROV_CUST",
	 "KUNNR_SID",
	 "SERV_TIER",
	 "GL_PRICE_PLAN_GRP",
	 "PRODUCT_TYPE",
	 "BAN",
	 "SUBSCR_NO",
	 "CONTR_TRANS_DT",
	 "ITEM_TRANS_DT",
	 "CONTR_DEALER_CODE",
	 "DLR_CD",
	 "CONTR_TIER",
	 "BASE_OPT_SERV_IND",
	 "EQP_SRC",
	 "EQP_TY",
	 "ITEM_GRP_CD",
	 "SUBS_EFF_DT",
	 "SUBS_EXP_DT",
	 "TERM_M2M",
	 "ORIG_CONTR_STRT_DT",
	 "ORIG_CONTR_TERM",
	 "ORIG_STNDLN_SELL_PRC",
	 "ORIG_TRANS_PRC",
	 "POB_END_DT",
	 "SUBS_AMT",
	 "CHRG_TY_CLASSIF",
	 "CONTR_EXPY_DT",
	 "SERV_FTR_SEQ_NO",
	 "SOC_SEQ_NUM",
	 "SUBSCR_ST",
	 "CONT_TREAT_CODE",
	 "CC_CONCAT_PK",	
	 "FICO_CHG_IND" 
FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_ORDER_AGREE_CONTR"
	(PLACEHOLDER."$$IP_EFF_DT$$"=> :IP_EFF_DT)
ORDER BY "BAN","SUBSCR_NO","CONTR_TRANS_DT","ITEM_STRT_DT","CONTR_EXPY_DT"
WITH HINT(NO_CS_JOIN);
		
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------  
		
CREATE LOCAL TEMPORARY TABLE #UPDATE_NM1_EDW_CONTR(BAN NVARCHAR(9),SUBSCRIBER_NO NVARCHAR(30), EFF_DT DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_NM1_EDW_AG(BAN NVARCHAR(9), SUBCR_NO NVARCHAR(30), SOC NVARCHAR(9), FAET_CD NVARCHAR(6),
                                                SERV_FTR_SEQ_NO NVARCHAR(11), SOC_SEQ_NUM NVARCHAR(11), EFF_DT DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION(BAN NVARCHAR(9), CONTR_TRANS_DT NVARCHAR(100), ITEM_ID NVARCHAR(20), ITEM_TRANS_DT NVARCHAR(100),
												TRX_SEQ_NO NVARCHAR(12), SUBSCR_NO NVARCHAR(30), ITEM_SUB_ID NVARCHAR(6));
				
				
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 				

	FOR CUR_ORDER AS CUR_ORDER_AGREE DO
		-- Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION
			-- Define Exit Handler
			DECLARE EXIT HANDLER FOR SQLEXCEPTION 
			BEGIN AUTONOMOUS TRANSACTION 
			END;
			INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH"(
			"BAN",
			"CONTR_TRANS_DT",
			"ITEM_ID",
			"ITEM_TRANS_DT",
			"SUBSCR_NO",
			"TRX_SEQ_NO",
			"BSE_SOC_AMT",
			"MIN_TIER_PRC",
			"STNDLN_SELL_PRC",
			"TRANS_PRC",
			"ACTV_CD",
			"ACTV_RSN_CD",
			"BASE_OPT_SERV_IND",
			"BSE_SOC",
			"BYRS_RMRSE",
			"CHRG_TY_CLASSIF",
			"CONTR_DEALER_CODE",
			"CONTR_END_DT",
			"CONTR_ID",
			"CONTR_STRT_DT",
			"CONTR_TERM",
			"CONTR_TIER",
			"CONTR_TY",
			"COST_CENTRE",
			"DLR_CD",
			"EI_GRP_SEQ_NO",
			"EQP_SRC",
			"EQP_TY",
			"GL_ACCOUNT",
			"GL_TAX_CD",
			"ITEM_END_DT",
			"ITEM_GRP_CD",
			"ITEM_STRT_DT",
			"ITEM_SUB_ID",
			"JURISD_CD",
			"POB_END_DT",
			"PROMO_CD",
			"PROV_AGR",
			"PROV_CUST",
			"SERV_TIER",
			"SOC_LEV_CD",
			"SUBS_AMT",
			"SUBS_EFF_DT",
			"SUBS_EXP_DT",
			"TERM_M2M",
			"REV_CD",
			"BRND",
			"INSERT_TS",
			"KUNNR_SID",
			"GL_PRICE_PLAN_GRP",
			"ORIG_CONTR_STRT_DT",
			"ORIG_CONTR_TERM",
			"ORIG_STNDLN_SELL_PRC",
			"ORIG_TRANS_PRC",
			"PRODUCT_TYPE",
			"SUBSCR_ST",
			FICO_CHG_IND,
			"CONT_TREAT_CODE",
			"ERROR_CODE",
			"TECHNICAL_MESSAGE",
			"ERROR_CREATE_TS")
			VALUES
			(CUR_ORDER."BAN",
			 CUR_ORDER."CONTR_TRANS_DT",
			 CUR_ORDER."ITEM_ID",
			 CUR_ORDER."ITEM_TRANS_DT",
			 CUR_ORDER."SUBSCR_NO",
			 CUR_ORDER."TRX_SEQ_NO",
			 CUR_ORDER."BSE_SOC_AMT",
			 CUR_ORDER."MIN_TIER_PRC",
			 CUR_ORDER."STNDLN_SELL_PRC",
			 CUR_ORDER."TRANS_PRC",
			 CUR_ORDER."ACTV_CD",
			 CUR_ORDER."ACTV_RSN_CD",
			 CUR_ORDER."BASE_OPT_SERV_IND",
			 CUR_ORDER."BSE_SOC",
			 CUR_ORDER."BYRS_RMRSE",
			 CUR_ORDER."CHRG_TY_CLASSIF",
			 CUR_ORDER."CONTR_DEALER_CODE",
			 CUR_ORDER."CONTR_END_DT",
			 CUR_ORDER."CONTR_ID",				 
			 CUR_ORDER."CONTR_STRT_DT",
			 CUR_ORDER."CONTR_TERM",
			 CUR_ORDER."CONTR_TIER",
			 CUR_ORDER."CONTR_TY",
			 CUR_ORDER."COST_CENTRE",
			 CUR_ORDER."DLR_CD",
			 CUR_ORDER."EI_GRP_SEQ_NO",
			 CUR_ORDER."EQP_SRC",
			 CUR_ORDER."EQP_TY",
			 CUR_ORDER."GL_ACCOUNT",
			 CUR_ORDER."GL_TAX_CD",
			 CUR_ORDER."ITEM_END_DT",
			 CUR_ORDER."ITEM_GRP_CD",
			 CUR_ORDER."ITEM_STRT_DT",
			 CUR_ORDER."ITEM_SUB_ID",
			 CUR_ORDER."JURISD_CD",
			 CUR_ORDER."POB_END_DT",
			 CUR_ORDER."PROMO_CD",
			 CUR_ORDER."PROV_AGR",
			 CUR_ORDER."PROV_CUST",
			 CUR_ORDER."SERV_TIER",
			 CUR_ORDER."SOC_LEV_CD",				
			 CUR_ORDER."SUBS_AMT",
			 CUR_ORDER."SUBS_EFF_DT",
			 CUR_ORDER."SUBS_EXP_DT",
			 CUR_ORDER."TERM_M2M",
			 CUR_ORDER."REV_CD",
			 CUR_ORDER."BRND",
			 LV_CUR_UTC,
			 CUR_ORDER."KUNNR_SID",
			 CUR_ORDER."GL_PRICE_PLAN_GRP",
			 CUR_ORDER."ORIG_CONTR_STRT_DT",
			 CUR_ORDER."ORIG_CONTR_TERM",
			 CUR_ORDER."ORIG_STNDLN_SELL_PRC",
			 CUR_ORDER."ORIG_TRANS_PRC",
			 CUR_ORDER."PRODUCT_TYPE",
			 CUR_ORDER."SUBSCR_ST",
			 CUR_ORDER."FICO_CHG_IND",
		     CUR_ORDER."CONT_TREAT_CODE",
			::SQL_ERROR_CODE,
			::SQL_ERROR_MESSAGE,
	  		LV_CUR_UTC);
			    
			LV_ERROR_FLAG := 'Y';
			
			LV_LOOP_ERROR_FLAG := 1;		   
			--END for AUTONOMOS   
		 	END;
		 	
-----------------------------------------------------------------------------------------------------------       
--- FOR CLEARING THE VARIABLES
-----------------------------------------------------------------------------------------------------------
	IF (LV_PREV_BAN_SUB IS NULL OR CUR_ORDER."CC_CONCAT_PK" != LV_PREV_BAN_SUB) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_BAN_SUB := CUR_ORDER."CC_CONCAT_PK";
			 	   
    END IF;

 -----------------------------------------------------------------------------------------------
		 	
		  --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
		    IF CUR_ORDER.ERROR_STATUS = '1' THEN		    
		    --  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		    	CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_ORDER."ERROR_CODE", ERROR_TAB, RECORD_COUNT);
		    	FOR i IN 1 .. :RECORD_COUNT DO
		    		CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
		    		INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH"(
						"BAN",
						"CONTR_TRANS_DT",
						"ITEM_ID",
						"ITEM_TRANS_DT",
						"SUBSCR_NO",
						"TRX_SEQ_NO",
						"BSE_SOC_AMT",
						"MIN_TIER_PRC",
						"STNDLN_SELL_PRC",
						"TRANS_PRC",
						"ACTV_CD",
						"ACTV_RSN_CD",
						"BASE_OPT_SERV_IND",
						"BSE_SOC",
						"BYRS_RMRSE",
						"CHRG_TY_CLASSIF",
						"CONTR_DEALER_CODE",
						"CONTR_END_DT",
						"CONTR_ID",
						"CONTR_STRT_DT",
						"CONTR_TERM",
						"CONTR_TIER",
						"CONTR_TY",
						"COST_CENTRE",
						"DLR_CD",
						"EI_GRP_SEQ_NO",
						"EQP_SRC",
						"EQP_TY",
						"GL_ACCOUNT",
						"GL_TAX_CD",
						"ITEM_END_DT",
						"ITEM_GRP_CD",
						"ITEM_STRT_DT",
						"ITEM_SUB_ID",
						"JURISD_CD",
						"POB_END_DT",
						"PROMO_CD",
						"PROV_AGR",
						"PROV_CUST",
						"SERV_TIER",
						"SOC_LEV_CD",
						"SUBS_AMT",
						"SUBS_EFF_DT",
						"SUBS_EXP_DT",
						"TERM_M2M",
						"REV_CD",
						"BRND",
						"INSERT_TS",
						"KUNNR_SID",
						"GL_PRICE_PLAN_GRP",
						"ORIG_CONTR_STRT_DT",
						"ORIG_CONTR_TERM",
						"ORIG_STNDLN_SELL_PRC",
						"ORIG_TRANS_PRC",
						"PRODUCT_TYPE",
						"SUBSCR_ST",
						"FICO_CHG_IND",
		     		    "CONT_TREAT_CODE",
						"ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
						VALUES
						(CUR_ORDER."BAN", 
						 CUR_ORDER."CONTR_TRANS_DT",
						 CUR_ORDER."ITEM_ID",
						 CUR_ORDER."ITEM_TRANS_DT",
						 CUR_ORDER."SUBSCR_NO",
						 CUR_ORDER."TRX_SEQ_NO",
						 CUR_ORDER."BSE_SOC_AMT",
						 CUR_ORDER."MIN_TIER_PRC",
						 CUR_ORDER."STNDLN_SELL_PRC",
						 CUR_ORDER."TRANS_PRC",
						 CUR_ORDER."ACTV_CD",
						 CUR_ORDER."ACTV_RSN_CD",
						 CUR_ORDER."BASE_OPT_SERV_IND",
						 CUR_ORDER."BSE_SOC",
						 CUR_ORDER."BYRS_RMRSE",
						 CUR_ORDER."CHRG_TY_CLASSIF",
						 CUR_ORDER."CONTR_DEALER_CODE",
						 CUR_ORDER."CONTR_END_DT",
						 CUR_ORDER."CONTR_ID",				 
						 CUR_ORDER."CONTR_STRT_DT",
						 CUR_ORDER."CONTR_TERM",
						 CUR_ORDER."CONTR_TIER",
						 CUR_ORDER."CONTR_TY",
						 CUR_ORDER."COST_CENTRE",
						 CUR_ORDER."DLR_CD",
						 CUR_ORDER."EI_GRP_SEQ_NO",
						 CUR_ORDER."EQP_SRC",
						 CUR_ORDER."EQP_TY",
						 CUR_ORDER."GL_ACCOUNT",
						 CUR_ORDER."GL_TAX_CD",
						 CUR_ORDER."ITEM_END_DT",
						 CUR_ORDER."ITEM_GRP_CD",
						 CUR_ORDER."ITEM_STRT_DT",
						 CUR_ORDER."ITEM_SUB_ID",
						 CUR_ORDER."JURISD_CD",
						 CUR_ORDER.POB_END_DT,
						 CUR_ORDER."PROMO_CD",
						 CUR_ORDER."PROV_AGR",
						 CUR_ORDER."PROV_CUST",
						 CUR_ORDER."SERV_TIER",
						 CUR_ORDER."SOC_LEV_CD",				
						 CUR_ORDER."SUBS_AMT",
						 CUR_ORDER."SUBS_EFF_DT",
						 CUR_ORDER."SUBS_EXP_DT",
						 CUR_ORDER."TERM_M2M",
						 CUR_ORDER."REV_CD",
						 CUR_ORDER."BRND",
						 LV_CUR_UTC,
						 CUR_ORDER."KUNNR_SID",
						 CUR_ORDER."GL_PRICE_PLAN_GRP",
						 CUR_ORDER."ORIG_CONTR_STRT_DT",
						 CUR_ORDER."ORIG_CONTR_TERM",
						 CUR_ORDER."ORIG_STNDLN_SELL_PRC",
						 CUR_ORDER."ORIG_TRANS_PRC",
						 CUR_ORDER."PRODUCT_TYPE",
						 CUR_ORDER."SUBSCR_ST",
						 CUR_ORDER."FICO_CHG_IND",
		                 CUR_ORDER."CONT_TREAT_CODE",
						 :CURRENT_ERROR,
						 NULL,
				  		 LV_CUR_UTC);
		    		
		    	--End for 2nd for
		    	END FOR ;
		    	
		    	LV_ERROR_FLAG := 'Y';	
		    	
		    	LV_LOOP_ERROR_FLAG := 1;
		    	
		  	    
		    	
		    	    	
		    -- Processing for Successful Records
		   
  				ELSE 
  				
         		IF CUR_ORDER.ERROR_STATUS = '0' THEN
	    
	   	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	   	        
	   	        INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH"(
						"BAN",
						"CONTR_TRANS_DT",
						"ITEM_ID",
						"ITEM_TRANS_DT",
						"SUBSCR_NO",
						"TRX_SEQ_NO",
						"BSE_SOC_AMT",
						"MIN_TIER_PRC",
						"STNDLN_SELL_PRC",
						"TRANS_PRC",
						"ACTV_CD",
						"ACTV_RSN_CD",
						"BASE_OPT_SERV_IND",
						"BSE_SOC",
						"BYRS_RMRSE",
						"CHRG_TY_CLASSIF",
						"CONTR_DEALER_CODE",
						"CONTR_END_DT",
						"CONTR_ID",
						"CONTR_STRT_DT",
						"CONTR_TERM",
						"CONTR_TIER",
						"CONTR_TY",
						"COST_CENTRE",
						"DLR_CD",
						"EI_GRP_SEQ_NO",
						"EQP_SRC",
						"EQP_TY",
						"GL_ACCOUNT",
						"GL_TAX_CD",
						"ITEM_END_DT",
						"ITEM_GRP_CD",
						"ITEM_STRT_DT",
						"ITEM_SUB_ID",
						"JURISD_CD",
						"POB_END_DT",
						"PROMO_CD",
						"PROV_AGR",
						"PROV_CUST",
						"SERV_TIER",
						"SOC_LEV_CD",
						"SUBS_AMT",
						"SUBS_EFF_DT",
						"SUBS_EXP_DT",
						"TERM_M2M",
						"REV_CD",
						"BRND",
						"INSERT_TS",
						"KUNNR_SID",
						"GL_PRICE_PLAN_GRP",
						"ORIG_CONTR_STRT_DT",
						"ORIG_CONTR_TERM",
						"ORIG_STNDLN_SELL_PRC",
						"ORIG_TRANS_PRC",
						"PRODUCT_TYPE",
						"SUBSCR_ST",
						"FICO_CHG_IND",
		     		    "CONT_TREAT_CODE",
						"ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
						VALUES
						(CUR_ORDER."BAN",
						 CUR_ORDER."CONTR_TRANS_DT",
						 CUR_ORDER."ITEM_ID",
						 CUR_ORDER."ITEM_TRANS_DT",
						 CUR_ORDER."SUBSCR_NO",
						 CUR_ORDER."TRX_SEQ_NO",
						 CUR_ORDER."BSE_SOC_AMT",
						 CUR_ORDER."MIN_TIER_PRC",
						 CUR_ORDER."STNDLN_SELL_PRC",
						 CUR_ORDER."TRANS_PRC",
						 CUR_ORDER."ACTV_CD",
						 CUR_ORDER."ACTV_RSN_CD",
						 CUR_ORDER."BASE_OPT_SERV_IND",
						 CUR_ORDER."BSE_SOC",
						 CUR_ORDER."BYRS_RMRSE",
						 CUR_ORDER."CHRG_TY_CLASSIF",
						 CUR_ORDER."CONTR_DEALER_CODE",
						 CUR_ORDER."CONTR_END_DT",
						 CUR_ORDER."CONTR_ID",				 
						 CUR_ORDER."CONTR_STRT_DT",
						 CUR_ORDER."CONTR_TERM",
						 CUR_ORDER."CONTR_TIER",
						 CUR_ORDER."CONTR_TY",
						 CUR_ORDER."COST_CENTRE",
						 CUR_ORDER."DLR_CD",
						 CUR_ORDER."EI_GRP_SEQ_NO",
						 CUR_ORDER."EQP_SRC",
						 CUR_ORDER."EQP_TY",
						 CUR_ORDER."GL_ACCOUNT",
						 CUR_ORDER."GL_TAX_CD",
						 CUR_ORDER."ITEM_END_DT",
						 CUR_ORDER."ITEM_GRP_CD",
						 CUR_ORDER."ITEM_STRT_DT",
						 CUR_ORDER."ITEM_SUB_ID",
						 CUR_ORDER."JURISD_CD",
						 CUR_ORDER.POB_END_DT,
						 CUR_ORDER."PROMO_CD",
						 CUR_ORDER."PROV_AGR",
						 CUR_ORDER."PROV_CUST",
						 CUR_ORDER."SERV_TIER",
						 CUR_ORDER."SOC_LEV_CD",				
						 CUR_ORDER."SUBS_AMT",
						 CUR_ORDER."SUBS_EFF_DT",
						 CUR_ORDER."SUBS_EXP_DT",
						 CUR_ORDER."TERM_M2M",
						 CUR_ORDER."REV_CD",
						 CUR_ORDER."BRND",
						 LV_CUR_UTC,
						 CUR_ORDER."KUNNR_SID",
						 CUR_ORDER."GL_PRICE_PLAN_GRP",
						 CUR_ORDER."ORIG_CONTR_STRT_DT",
						 CUR_ORDER."ORIG_CONTR_TERM",
						 CUR_ORDER."ORIG_STNDLN_SELL_PRC",
						 CUR_ORDER."ORIG_TRANS_PRC",
						 CUR_ORDER."PRODUCT_TYPE",
						 CUR_ORDER."SUBSCR_ST",
						 CUR_ORDER."FICO_CHG_IND",
		                 CUR_ORDER."CONT_TREAT_CODE",
						 :CURRENT_ERROR,
						 NULL,
				  		 LV_CUR_UTC);
		    		    	
		    
		    	-- If Record exists in the Target NDB Table
     			ELSEIF CUR_ORDER.FLAG_EXISTING_RECORD = 'U' THEN
		    		BEGIN AUTONOMOUS TRANSACTION
		    			
		    			--  Update the NDB Order Table to update POB_END_DT with sysdate -1 for the existing records         
						UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER" ORD 
						SET (POB_END_DT,MODIFIED_TS) = 
						(IFNULL(CUR_ORDER.ITEM_END_DT,(ADD_DAYS(CUR_ORDER.ITEM_TRANS_DT,-1))),:LV_CUR_UTC) 
							WHERE CUR_ORDER.BAN=ORD.BAN 
							AND CUR_ORDER.SUBSCR_NO = ORD.SUBSCR_NO 
							AND CUR_ORDER.ITEM_ID = ORD.ITEM_ID
							AND CUR_ORDER.ITEM_SUB_ID = ORD.ITEM_SUB_ID
							AND POB_END_DT = '99991231';
		    			--INSERT INTO TABLE FROM HERE
		    			
		    			
		    			--Insert modification data into NDB ORDER table, dont insert NULL, don't include columns
							INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER"(
							"BAN",
							"CONTR_TRANS_DT",
							"ITEM_ID",
							"ITEM_TRANS_DT",
							"SUBSCR_NO",
							"TRX_SEQ_NO",
							"BSE_SOC_AMT",
							"MIN_TIER_PRC",
							"STNDLN_SELL_PRC",
							"TRANS_PRC",
							"ACTV_CD",
							"ACTV_RSN_CD",
							"BASE_OPT_SERV_IND",
							"BSE_SOC",
							"BYRS_RMRSE",
							"CHRG_TY_CLASSIF",
							"CONTR_DEALER_CODE",
							"CONTR_END_DT",
							"CONTR_ID",
							"CONTR_STRT_DT",
							"CONTR_TERM",
							"CONTR_TIER",
							"CONTR_TY",
							"COST_CENTRE",
							"DLR_CD",
							"EI_GRP_SEQ_NO",
							"EQP_SRC",
							"EQP_TY",
							"GL_ACCOUNT",
							"GL_TAX_CD",
							"ITEM_END_DT",
							"ITEM_GRP_CD",
							"ITEM_STRT_DT",
							"ITEM_SUB_ID",
							"JURISD_CD",
							"POB_END_DT",
							"PROMO_CD",
							"PROV_AGR",
							"PROV_CUST",
							"SERV_TIER",
							"SOC_LEV_CD",
							"SUBS_AMT",
							"SUBS_EFF_DT",
							"SUBS_EXP_DT",
							"TERM_M2M",
							"REV_CD",
							"BRND",
							"INSERT_TS",
							"KUNNR_SID",
							"GL_PRICE_PLAN_GRP",
							"ORIG_CONTR_STRT_DT",
							"ORIG_CONTR_TERM",
							"ORIG_STNDLN_SELL_PRC",
							"ORIG_TRANS_PRC",
							"PRODUCT_TYPE",
							"SUBSCR_ST",
							"FICO_CHG_IND",
		    				"CONT_TREAT_CODE")
							VALUES
							(CUR_ORDER."BAN",
							 CUR_ORDER."CONTR_TRANS_DT",
							 CUR_ORDER."ITEM_ID",
							 CUR_ORDER."ITEM_TRANS_DT",
							 CUR_ORDER."SUBSCR_NO",
							 CUR_ORDER."TRX_SEQ_NO",
							 CUR_ORDER."BSE_SOC_AMT",
							 CUR_ORDER."MIN_TIER_PRC",
							 CUR_ORDER."STNDLN_SELL_PRC",
							 CUR_ORDER."TRANS_PRC",
							 CUR_ORDER."ACTV_CD",
							 CUR_ORDER."ACTV_RSN_CD",
							 CUR_ORDER."BASE_OPT_SERV_IND",
							 CUR_ORDER."BSE_SOC",
							 CUR_ORDER."BYRS_RMRSE",
							 CUR_ORDER."CHRG_TY_CLASSIF",
							 CUR_ORDER."CONTR_DEALER_CODE",
							 CUR_ORDER."CONTR_END_DT",
							 CUR_ORDER."CONTR_ID",				 
							 CUR_ORDER."CONTR_STRT_DT",
							 CUR_ORDER."CONTR_TERM",
							 CUR_ORDER."CONTR_TIER",
							 CUR_ORDER."CONTR_TY",
							 CUR_ORDER."COST_CENTRE",
							 CUR_ORDER."DLR_CD",
							 CUR_ORDER."EI_GRP_SEQ_NO",
							 CUR_ORDER."EQP_SRC",
							 CUR_ORDER."EQP_TY",
							 CUR_ORDER."GL_ACCOUNT",
							 CUR_ORDER."GL_TAX_CD",
							 CUR_ORDER."ITEM_END_DT",
							 CUR_ORDER."ITEM_GRP_CD",
							 CUR_ORDER."ITEM_STRT_DT",
							 CUR_ORDER."ITEM_SUB_ID",
							 CUR_ORDER."JURISD_CD",
							 CUR_ORDER."POB_END_DT",
							 CUR_ORDER."PROMO_CD",
							 CUR_ORDER."PROV_AGR",
							 CUR_ORDER."PROV_CUST",
							 CUR_ORDER."SERV_TIER",
							 CUR_ORDER."SOC_LEV_CD",				
							 CUR_ORDER."SUBS_AMT",
							 CUR_ORDER."SUBS_EFF_DT",
							 CUR_ORDER."SUBS_EXP_DT",
							 CUR_ORDER."TERM_M2M",
							 CUR_ORDER."REV_CD",
							 CUR_ORDER."BRND",
							 LV_CUR_UTC,
							 CUR_ORDER."KUNNR_SID",
							 CUR_ORDER."GL_PRICE_PLAN_GRP",
							 CUR_ORDER."ORIG_CONTR_STRT_DT",
							 CUR_ORDER."ORIG_CONTR_TERM",
							 CUR_ORDER."ORIG_STNDLN_SELL_PRC",
							 CUR_ORDER."ORIG_TRANS_PRC",
							 CUR_ORDER."PRODUCT_TYPE",
							 CUR_ORDER."SUBSCR_ST",
							 CUR_ORDER."FICO_CHG_IND",
		     				 CUR_ORDER."CONT_TREAT_CODE");
		    			
		    		
		    		
		    		
		    		END;
		    		-- Insert PK of successfully processed Records into Local Temp Tables 
					-- For Updating NDB_TS in corresponding Landing Tables records
						INSERT INTO #UPDATE_NM1_EDW_CONTR
							             (BAN,
							              SUBSCRIBER_NO,
							              EFF_DT)
					   		      VALUES (CUR_ORDER."BAN",
					           	          CUR_ORDER."SUBSCR_NO",
					           	          CUR_ORDER."CONTR_TRANS_DT");           	      
					           	      
					 	INSERT INTO #UPDATE_NM1_EDW_AG
					 		 			 (BAN,
							              SUBCR_NO,
							              SOC,
							              SERV_FTR_SEQ_NO,
							              SOC_SEQ_NUM,
							              EFF_DT)
					   		      VALUES (CUR_ORDER."BAN",
					           		      CUR_ORDER."SUBSCR_NO",
					           	          CUR_ORDER."ITEM_ID",
					           	          CUR_ORDER."SERV_FTR_SEQ_NO",
					           	          CUR_ORDER."SOC_SEQ_NUM",
					           	          CUR_ORDER."ITEM_TRANS_DT"); 	
					           	          
					    INSERT INTO #UPDATE_EH_DELETION
					    				  (BAN,
					    				  CONTR_TRANS_DT,
					    				  ITEM_ID,
					    				  ITEM_TRANS_DT,
							              TRX_SEQ_NO,
							              SUBSCR_NO,
							              ITEM_SUB_ID)     
 	     	  					  VALUES (CUR_ORDER."BAN",
 	     	  		       		  		  CUR_ORDER.CONTR_TRANS_DT,
 	     	  					  		  CUR_ORDER."ITEM_ID",
			 							  CUR_ORDER."ITEM_TRANS_DT",
					 	                  CUR_ORDER."TRX_SEQ_NO",
					 	                  CUR_ORDER."SUBSCR_NO",
					 	                  CUR_ORDER."ITEM_SUB_ID");
					 	                  
					 	                  

		    	ELSEIF CUR_ORDER.FLAG_EXISTING_RECORD = 'I' THEN
		    	
		    	BEGIN AUTONOMOUS TRANSACTION
		    	
		    		--Insert modification data into NDB ORDER table, dont insert NULL, don't include columns
					INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER"(
							"BAN",
							"CONTR_TRANS_DT",
							"ITEM_ID",
							"ITEM_TRANS_DT",
							"SUBSCR_NO",
							"TRX_SEQ_NO",
							"BSE_SOC_AMT",
							"MIN_TIER_PRC",
							"STNDLN_SELL_PRC",
							"TRANS_PRC",
							"ACTV_CD",
							"ACTV_RSN_CD",
							"BASE_OPT_SERV_IND",
							"BSE_SOC",
							"BYRS_RMRSE",
							"CHRG_TY_CLASSIF",
							"CONTR_DEALER_CODE",
							"CONTR_END_DT",
							"CONTR_ID",
							"CONTR_STRT_DT",
							"CONTR_TERM",
							"CONTR_TIER",
							"CONTR_TY",
							"COST_CENTRE",
							"DLR_CD",
							"EI_GRP_SEQ_NO",
							"EQP_SRC",
							"EQP_TY",
							"GL_ACCOUNT",
							"GL_TAX_CD",
							"ITEM_END_DT",
							"ITEM_GRP_CD",
							"ITEM_STRT_DT",
							"ITEM_SUB_ID",
							"JURISD_CD",
							"POB_END_DT",
							"PROMO_CD",
							"PROV_AGR",
							"PROV_CUST",
							"SERV_TIER",
							"SOC_LEV_CD",
							"SUBS_AMT",
							"SUBS_EFF_DT",
							"SUBS_EXP_DT",
							"TERM_M2M",
							"REV_CD",
							"BRND",
							"INSERT_TS",
							"KUNNR_SID",
							"GL_PRICE_PLAN_GRP",
							"ORIG_CONTR_STRT_DT",
							"ORIG_CONTR_TERM",
							"ORIG_STNDLN_SELL_PRC",
							"ORIG_TRANS_PRC",
							"PRODUCT_TYPE",
							"SUBSCR_ST",
							"FICO_CHG_IND",
		     				"CONT_TREAT_CODE")
							VALUES
							(CUR_ORDER."BAN",
							 CUR_ORDER."CONTR_TRANS_DT",
							 CUR_ORDER."ITEM_ID",
							 CUR_ORDER."ITEM_TRANS_DT",
							 CUR_ORDER."SUBSCR_NO",
							 CUR_ORDER."TRX_SEQ_NO",
							 CUR_ORDER."BSE_SOC_AMT",
							 CUR_ORDER."MIN_TIER_PRC",
							 CUR_ORDER."STNDLN_SELL_PRC",
							 CUR_ORDER."TRANS_PRC",
							 CUR_ORDER."ACTV_CD",
							 CUR_ORDER."ACTV_RSN_CD",
							 CUR_ORDER."BASE_OPT_SERV_IND",
							 CUR_ORDER."BSE_SOC",
							 CUR_ORDER."BYRS_RMRSE",
							 CUR_ORDER."CHRG_TY_CLASSIF",
							 CUR_ORDER."CONTR_DEALER_CODE",
							 CUR_ORDER."CONTR_END_DT",
							 CUR_ORDER."CONTR_ID",				 
							 CUR_ORDER."CONTR_STRT_DT",
							 CUR_ORDER."CONTR_TERM",
							 CUR_ORDER."CONTR_TIER",
							 CUR_ORDER."CONTR_TY",
							 CUR_ORDER."COST_CENTRE",
							 CUR_ORDER."DLR_CD",
							 CUR_ORDER."EI_GRP_SEQ_NO",
							 CUR_ORDER."EQP_SRC",
							 CUR_ORDER."EQP_TY",
							 CUR_ORDER."GL_ACCOUNT",
							 CUR_ORDER."GL_TAX_CD",
							 CUR_ORDER."ITEM_END_DT",
							 CUR_ORDER."ITEM_GRP_CD",
							 CUR_ORDER."ITEM_STRT_DT",
							 CUR_ORDER."ITEM_SUB_ID",
							 CUR_ORDER."JURISD_CD",
							 CUR_ORDER."POB_END_DT",
							 CUR_ORDER."PROMO_CD",
							 CUR_ORDER."PROV_AGR",
							 CUR_ORDER."PROV_CUST",
							 CUR_ORDER."SERV_TIER",
							 CUR_ORDER."SOC_LEV_CD",				
							 CUR_ORDER."SUBS_AMT",
							 CUR_ORDER."SUBS_EFF_DT",
							 CUR_ORDER."SUBS_EXP_DT",
							 CUR_ORDER."TERM_M2M",
							 CUR_ORDER."REV_CD",
							 CUR_ORDER."BRND",
							 LV_CUR_UTC,
							 CUR_ORDER."KUNNR_SID",
							 CUR_ORDER."GL_PRICE_PLAN_GRP",
							 CUR_ORDER."ORIG_CONTR_STRT_DT",
							 CUR_ORDER."ORIG_CONTR_TERM",
							 CUR_ORDER."ORIG_STNDLN_SELL_PRC",
							 CUR_ORDER."ORIG_TRANS_PRC",
							 CUR_ORDER."PRODUCT_TYPE",
							 CUR_ORDER."SUBSCR_ST",
							 CUR_ORDER."FICO_CHG_IND",
		     				 CUR_ORDER."CONT_TREAT_CODE");
							 
							
							 
								    			 
						END;	 
		    			
						-- Insert PK of successfully processed Records into Local Temp Tables 
					-- For Updating NDB_TS in corresponding Landing Tables records
						INSERT INTO #UPDATE_NM1_EDW_CONTR
							             (BAN,
							              SUBSCRIBER_NO,
							              EFF_DT)
					   		      VALUES (CUR_ORDER."BAN",
					           	          CUR_ORDER."SUBSCR_NO",
					           	          CUR_ORDER."CONTR_TRANS_DT");           	      
					           	      
					 	INSERT INTO #UPDATE_NM1_EDW_AG
					 		 			 (BAN,
							              SUBCR_NO,
							              SOC,
							              SERV_FTR_SEQ_NO,
							              SOC_SEQ_NUM,
							              EFF_DT)
					   		      VALUES (CUR_ORDER."BAN",
					           		      CUR_ORDER."SUBSCR_NO",
					           	          CUR_ORDER."ITEM_ID",
					           	          CUR_ORDER."SERV_FTR_SEQ_NO",
					           	          CUR_ORDER."SOC_SEQ_NUM",
					           	          CUR_ORDER."ITEM_TRANS_DT"); 	
					           	          
					    INSERT INTO #UPDATE_EH_DELETION
					    				  (BAN,
					    				  CONTR_TRANS_DT,
					    				  ITEM_ID,
					    				  ITEM_TRANS_DT,
							              TRX_SEQ_NO,
							              SUBSCR_NO,
							              ITEM_SUB_ID)     
 	     	  					  VALUES (CUR_ORDER."BAN",
 	     	  					  		  CUR_ORDER.CONTR_TRANS_DT,
 	     	  					  		  CUR_ORDER."ITEM_ID",
			 							  CUR_ORDER."ITEM_TRANS_DT",
					 	                  CUR_ORDER."TRX_SEQ_NO",
					 	                  CUR_ORDER."SUBSCR_NO",
					 	                  CUR_ORDER."ITEM_SUB_ID");
		    	    	
		 	
		 	
		 	END IF;
		 	END IF;
		 	END IF;
		 --END for 1st FOR loop	
	END FOR;
	
	-- Update Landing Table IFRS_R1.LAND::NM1_EDW_CONTR
     UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_CONTR" A
       FROM "LAND"."IFRS_R1.LAND::NM1_EDW_CONTR" A 
  	   INNER JOIN #UPDATE_NM1_EDW_CONTR B 
       ON A."BAN" = B."BAN"
       AND A."SUBSCRIBER_NO" = B."SUBSCRIBER_NO"
       AND A."EFF_DT" = B."EFF_DT"
       SET A.SP_ORDER_AGREE_CONTR_TS = LV_CUR_UTC
       WHERE A.SP_ORDER_AGREE_CONTR_TS IS NULL;
       
	-- Update Landing Table IFRS_R1.LAND::NM1_EDW_AG
     UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_AG" A
       FROM "LAND"."IFRS_R1.LAND::NM1_EDW_AG" A 
  	   INNER JOIN #UPDATE_NM1_EDW_AG B 
       ON A."BAN" = B."BAN"
       AND A."SUBCR_NO" = B."SUBCR_NO"
       AND A."SOC" = B."SOC" 
       AND A."SERV_FTR_SEQ_NO" = B."SERV_FTR_SEQ_NO"
       AND A."SOC_SEQ_NUM" = B."SOC_SEQ_NUM"
       AND A."EFF_DT" = B."EFF_DT"
       SET A.NDB_TS = LV_CUR_UTC
       WHERE A.NDB_TS IS NULL;
       
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

      UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH" A
        FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH" A 
        INNER JOIN #UPDATE_EH_DELETION B       
           ON A."BAN" = B."BAN"
           AND A."CONTR_TRANS_DT" = B."CONTR_TRANS_DT"
           AND A."ITEM_ID" =  B."ITEM_ID"
           AND A."ITEM_TRANS_DT" = B."ITEM_TRANS_DT"
           AND A."TRX_SEQ_NO" = B."TRX_SEQ_NO"
           AND A."SUBSCR_NO" = B."SUBSCR_NO"
           AND A."ITEM_SUB_ID" = B."ITEM_SUB_ID"
           SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);
	
	
	--------------------------------------------------------------------------------------------------
	-- Set Overall Status
	-------------------------------------------------------------------------------------------------- 
	--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
	--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN
     OP_STATUS := LC_ERROR_TEXT; 			
    ELSE
  	 OP_STATUS := LC_SUCCESS_TEXT;				
	END IF;
	
END;