PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_EDWMOB_PPLAN_OC_RATE_HIST"
(IN IP_EFF_DT DATE,
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	AS

BEGIN 
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_EDWMOB_PPLAN_OC_RATE_HIST
-- Created By      : BC_EZ07501 (SAMEER KUMAR BEHERA)       
-- Create Date     : 12-05-2017
-- Description     : It is used to Upsert data in NDB Table.
--                   NDB_TS is updated in Landing Table         
--                   after data is loaded in NDB.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);


-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG        INTEGER := 0;
DECLARE LV_PREV_RECORD		  NVARCHAR(100) := NULL;


--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 

DECLARE CURSOR C_REF_PP_OC_RATE_HIST FOR
	  SELECT
	         "SOC",
	         "EFFECTIVE_DATE",
	         "FEATURE_CODE",
	         "NO_OF_INSTALLMENTS",
	         "PAYMENT_INTERVAL",
	         "RATE",
	         "EXPIRATION_DATE",
	         "FLAG_EXISTING_RECORD",
	         "EFFECTIVE_DATE_PREV_DAY",
	         "EXPY_DT",
	         "REFERENCE_EFFECTIVE_DT",
	         "REFERENCE_EXPIRY_DT",
	         "CYCL_ID",
	         "ERROR_CODE",
	         "ERROR_STATUS",
	         "CONCAT_PK"
        FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_NM1_EDW_REF_PPLAN_OC_RATE_HIST"
			 (PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
	ORDER BY SOC,EFFECTIVE_DATE,FEATURE_CODE,NO_OF_INSTALLMENTS,PAYMENT_INTERVAL,"REFERENCE_EFFECTIVE_DT";
 

--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_PPLAN_OC_RATE_HIST ("SOC" NVARCHAR(9),"EFFECTIVE_DATE" DATE,"FEATURE_CODE" NVARCHAR(6),
                                          "NO_OF_INSTALLMENTS" INTEGER,"PAYMENT_INTERVAL" INTEGER, "EFF_DT" DATE, CYCL_ID NVARCHAR(3));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION ("SOC" NVARCHAR(100),"EFFECTIVE_DATE" NVARCHAR(100),"FEATURE_CODE" NVARCHAR(100),"NO_OF_INSTALLMENTS" NVARCHAR(100),
                                                  "PAYMENT_INTERVAL" NVARCHAR(100), "REFERENCE_EFFECTIVE_DT" NVARCHAR(100));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------  

FOR C_OC_RATE AS C_REF_PP_OC_RATE_HIST DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
	
		   -- Insert record into error table
		   	  INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_PP_OC_RATE_HIST_EH"(
						  "SOC",
	                      "EFFECTIVE_DATE",
	                      "FEATURE_CODE",
	                      "NO_OF_INSTALLMENTS",
	                      "PAYMENT_INTERVAL",
	                      "RATE",
	                      "EXPIRATION_DATE",
	                      "REFERENCE_EFFECTIVE_DT",
	                      "REFERENCE_EXPIRY_DT",
                          "INSERT_TS",
                          "ERROR_CODE",
                          "TECHNICAL_MESSAGE",
                          "ERROR_CREATE_TS")
											      
			   	   VALUES(C_OC_RATE."SOC",
	                      C_OC_RATE."EFFECTIVE_DATE",
	                      C_OC_RATE."FEATURE_CODE",
	                      C_OC_RATE."NO_OF_INSTALLMENTS",
	                      C_OC_RATE."PAYMENT_INTERVAL",
	                      C_OC_RATE."RATE",
	                      C_OC_RATE."EXPIRATION_DATE",
	                      C_OC_RATE."REFERENCE_EFFECTIVE_DT",
	                      C_OC_RATE."REFERENCE_EXPIRY_DT",
					      LV_CUR_UTC,
						  ::SQL_ERROR_CODE,
					      ::SQL_ERROR_MESSAGE,
					      LV_CUR_UTC);			
			   	    
	
		  	   LV_ERROR_FLAG := 'Y';
		  	   LV_LOOP_ERROR_FLAG := 1;
	         
	  END;    
	  
	  -- FOR CLEARING THE VARIABLES

	IF (LV_PREV_RECORD IS NULL OR C_OC_RATE."CONCAT_PK" != LV_PREV_RECORD) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "C_OC_RATE"."CONCAT_PK";
			 	   
    END IF;

 -----------------------------------------------------------------------------------------------
 
 
--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF C_OC_RATE.ERROR_STATUS = 1  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(C_OC_RATE."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
	   -- Insert record into error table
		   	  INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_PP_OC_RATE_HIST_EH"(
						  "SOC",
	                      "EFFECTIVE_DATE",
	                      "FEATURE_CODE",
	                      "NO_OF_INSTALLMENTS",
	                      "PAYMENT_INTERVAL",
	                      "RATE",
	                      "EXPIRATION_DATE",
	                      "REFERENCE_EFFECTIVE_DT",
	                      "REFERENCE_EXPIRY_DT",
                          "INSERT_TS",
                          "ERROR_CODE",
                          "ERROR_CREATE_TS")
											      
			   	   VALUES(C_OC_RATE."SOC",
	                      C_OC_RATE."EFFECTIVE_DATE",
	                      C_OC_RATE."FEATURE_CODE",
	                      C_OC_RATE."NO_OF_INSTALLMENTS",
	                      C_OC_RATE."PAYMENT_INTERVAL",
	                      C_OC_RATE."RATE",
	                      C_OC_RATE."EXPIRATION_DATE",
	                      C_OC_RATE."REFERENCE_EFFECTIVE_DT",
	                      C_OC_RATE."REFERENCE_EXPIRY_DT",
					      LV_CUR_UTC,
						  :CURRENT_ERROR,
					      LV_CUR_UTC);			
			   	    
	  
	  END FOR ; 
	  
	  -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
	   
	    -- Checking older record having same PK'S has some issue in loading then other records should be send to Error Handling table.
			--If ERROR_STATUS = ‘0’ and previous record went to error table then present record will go to error table with ERROR_CODE = 'PREVIOUS VERSION IN ERROR'
			
	  
   ELSE 
         IF C_OC_RATE.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
	     -- Insert record into error table
		   	  INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_PP_OC_RATE_HIST_EH"(
						  "SOC",
	                      "EFFECTIVE_DATE",
	                      "FEATURE_CODE",
	                      "NO_OF_INSTALLMENTS",
	                      "PAYMENT_INTERVAL",
	                      "RATE",
	                      "EXPIRATION_DATE",
	                      "REFERENCE_EFFECTIVE_DT",
	                      "REFERENCE_EXPIRY_DT",
                          "INSERT_TS",
                          "ERROR_CODE",
                          "ERROR_CREATE_TS")
											      
			   	   VALUES(C_OC_RATE."SOC",
	                      C_OC_RATE."EFFECTIVE_DATE",
	                      C_OC_RATE."FEATURE_CODE",
	                      C_OC_RATE."NO_OF_INSTALLMENTS",
	                      C_OC_RATE."PAYMENT_INTERVAL",
	                      C_OC_RATE."RATE",
	                      C_OC_RATE."EXPIRATION_DATE",
	                      C_OC_RATE."REFERENCE_EFFECTIVE_DT",
	                      C_OC_RATE."REFERENCE_EXPIRY_DT",
					      LV_CUR_UTC,
						  'PREVIOUS VERSION IN ERROR',
					      LV_CUR_UTC);			
		   
	        
	     
        
--   If Record exists in the Target NDB Table
     ELSE IF C_OC_RATE.FLAG_EXISTING_RECORD = 'U' THEN
     
     	BEGIN AUTONOMOUS TRANSACTION  
     
       --     Update the target NDB table
	          UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_PP_OC_RATE_HIST" NDB 
	   		     SET  NDB.REFERENCE_EXPIRY_DT    = C_OC_RATE.EFFECTIVE_DATE_PREV_DAY,
	 		          NDB."MODIFIED_TS"          = LV_CUR_UTC
			   WHERE  NDB.SOC                    = C_OC_RATE.SOC
			     AND  NDB.EFFECTIVE_DATE         = C_OC_RATE.EFFECTIVE_DATE
			     AND  NDB.FEATURE_CODE           = C_OC_RATE.FEATURE_CODE
			     AND  NDB.NO_OF_INSTALLMENTS     = C_OC_RATE.NO_OF_INSTALLMENTS
			     AND  NDB.PAYMENT_INTERVAL       = C_OC_RATE.PAYMENT_INTERVAL
			     AND  NDB.REFERENCE_EXPIRY_DT    = '99991231';
			     
       --    Insert the Incoming new record
             INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_PP_OC_RATE_HIST"(
						 "SOC",
	                     "EFFECTIVE_DATE",
	                     "FEATURE_CODE",
	                     "NO_OF_INSTALLMENTS",
	                     "PAYMENT_INTERVAL",
	                     "RATE",
	                     "EXPIRATION_DATE",
	                     "REFERENCE_EFFECTIVE_DT",
	                     "REFERENCE_EXPIRY_DT",
                         "INSERT_TS")		
											      
			   	   VALUES(C_OC_RATE."SOC",
	                      C_OC_RATE."EFFECTIVE_DATE",
	                      C_OC_RATE."FEATURE_CODE",
	                      C_OC_RATE."NO_OF_INSTALLMENTS",
	                      C_OC_RATE."PAYMENT_INTERVAL",
	                      C_OC_RATE."RATE",
	                      C_OC_RATE."EXPIRATION_DATE",
	                      C_OC_RATE."REFERENCE_EFFECTIVE_DT",
	                      C_OC_RATE."REFERENCE_EXPIRY_DT",
					      LV_CUR_UTC);
					      
					      
     	  END;				 
						 
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	

			   INSERT INTO #UPDATE_PPLAN_OC_RATE_HIST
						   (SOC, 
						    EFFECTIVE_DATE,
						    FEATURE_CODE,
						    NO_OF_INSTALLMENTS,
						    PAYMENT_INTERVAL,
						    EFF_DT,
						    CYCL_ID)
				    VALUES (C_OC_RATE.SOC, 
						    C_OC_RATE.EFFECTIVE_DATE,
						    C_OC_RATE.FEATURE_CODE,
						    C_OC_RATE.NO_OF_INSTALLMENTS,
						    C_OC_RATE.PAYMENT_INTERVAL,
						    C_OC_RATE.REFERENCE_EFFECTIVE_DT,
						    C_OC_RATE.CYCL_ID);
						   					   	    		
			   INSERT INTO #UPDATE_EH_DELETION
						   (SOC, 
						    EFFECTIVE_DATE,
						    FEATURE_CODE,
						    NO_OF_INSTALLMENTS,
						    PAYMENT_INTERVAL,
						    REFERENCE_EFFECTIVE_DT)
				    VALUES (C_OC_RATE.SOC, 
						    C_OC_RATE.EFFECTIVE_DATE,
						    C_OC_RATE.FEATURE_CODE,
						    C_OC_RATE.NO_OF_INSTALLMENTS,
						    C_OC_RATE.PAYMENT_INTERVAL,
						    C_OC_RATE.REFERENCE_EFFECTIVE_DT);

     ELSEIF C_OC_RATE.FLAG_EXISTING_RECORD = 'I' THEN
    
    BEGIN AUTONOMOUS TRANSACTION
    
--    Insert Records into the target NDB table
      INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_PP_OC_RATE_HIST"(
						 "SOC",
	                     "EFFECTIVE_DATE",
	                     "FEATURE_CODE",
	                     "NO_OF_INSTALLMENTS",
	                     "PAYMENT_INTERVAL",
	                     "RATE",
	                     "EXPIRATION_DATE",
	                     "REFERENCE_EFFECTIVE_DT",
	                     "REFERENCE_EXPIRY_DT",
                         "INSERT_TS")		
											      
			   	   VALUES(C_OC_RATE."SOC",
	                      C_OC_RATE."EFFECTIVE_DATE",
	                      C_OC_RATE."FEATURE_CODE",
	                      C_OC_RATE."NO_OF_INSTALLMENTS",
	                      C_OC_RATE."PAYMENT_INTERVAL",
	                      C_OC_RATE."RATE",
	                      C_OC_RATE."EXPIRATION_DATE",
	                      C_OC_RATE."REFERENCE_EFFECTIVE_DT",
	                      C_OC_RATE."REFERENCE_EXPIRY_DT",
					      LV_CUR_UTC);	
					      
					      
					      					      					               
			END;			 
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	

		   INSERT INTO #UPDATE_PPLAN_OC_RATE_HIST
						   (SOC, 
						    EFFECTIVE_DATE,
						    FEATURE_CODE,
						    NO_OF_INSTALLMENTS,
						    PAYMENT_INTERVAL,
						    EFF_DT,
						    CYCL_ID)
				    VALUES (C_OC_RATE.SOC, 
						    C_OC_RATE.EFFECTIVE_DATE,
						    C_OC_RATE.FEATURE_CODE,
						    C_OC_RATE.NO_OF_INSTALLMENTS,
						    C_OC_RATE.PAYMENT_INTERVAL,
						    C_OC_RATE.REFERENCE_EFFECTIVE_DT,
						    C_OC_RATE.CYCL_ID);
						   					   	    		
			INSERT INTO #UPDATE_EH_DELETION
						   (SOC, 
						    EFFECTIVE_DATE,
						    FEATURE_CODE,
						    NO_OF_INSTALLMENTS,
						    PAYMENT_INTERVAL,
						    REFERENCE_EFFECTIVE_DT)
				    VALUES (C_OC_RATE.SOC, 
						    C_OC_RATE.EFFECTIVE_DATE,
						    C_OC_RATE.FEATURE_CODE,
						    C_OC_RATE.NO_OF_INSTALLMENTS,
						    C_OC_RATE.PAYMENT_INTERVAL,
						    C_OC_RATE.REFERENCE_EFFECTIVE_DT);
						 		
					   	 
     END IF;  
    END IF; 
   END IF; 
  END IF; 
END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::NM1_EDW_REF_PPLAN_OC_RATE_HIST
UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_REF_PPLAN_OC_RATE_HIST" A
  FROM "LAND"."IFRS_R1.LAND::NM1_EDW_REF_PPLAN_OC_RATE_HIST" A 
 INNER JOIN #UPDATE_PPLAN_OC_RATE_HIST B 
    ON A.SOC                 = B.SOC
   AND A.EFFECTIVE_DATE      = B.EFFECTIVE_DATE
   AND A.FEATURE_CODE        = B.FEATURE_CODE
   AND A.NO_OF_INSTALLMENTS  = B.NO_OF_INSTALLMENTS
   AND A.PAYMENT_INTERVAL    = B.PAYMENT_INTERVAL
   AND A.EFF_DT              = B.EFF_DT
   AND A.CYCL_ID             = B.CYCL_ID
   SET NDB_TS                = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_PP_OC_RATE_HIST_EH" A
  FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_PP_OC_RATE_HIST_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A.SOC                       = B.SOC
   AND A.EFFECTIVE_DATE            = B.EFFECTIVE_DATE
   AND A.FEATURE_CODE              = B.FEATURE_CODE
   AND A.NO_OF_INSTALLMENTS        = B.NO_OF_INSTALLMENTS
   AND A.PAYMENT_INTERVAL          = B.PAYMENT_INTERVAL
   AND A.REFERENCE_EFFECTIVE_DT    = B.REFERENCE_EFFECTIVE_DT
   SET (DELETE_DATE, DELETED)      = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
   
    IF(LV_ERROR_FLAG = 'Y') THEN		

       OP_STATUS := LC_ERROR_TEXT;
			
    ELSE
 
  	   OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;		