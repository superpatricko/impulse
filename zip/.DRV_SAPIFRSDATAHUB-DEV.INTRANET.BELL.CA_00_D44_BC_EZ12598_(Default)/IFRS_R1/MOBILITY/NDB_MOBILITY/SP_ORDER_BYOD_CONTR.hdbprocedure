PROCEDURE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::SP_ORDER_BYOD_CONTR"
	(IN IP_EFF_DT DATE,
	OUT OP_STATUS  NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
	AS
BEGIN
----------------------------------------------------------------------
-- Procedure Title : SP_ORDER_BYOD_CONTR
--
-- Created By      : BC_EY94137(Akanksha Singh)          Date : 21/09/2016
-- 
-- Procedure Description : It is used to INSERT/UPDATE data in NDB Table.
--                         NDB_TS is updated in Landing Table         
--                         after data is loaded in NDB.
--Project :Bell Canada
--
-- 
----------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
----------------------------------------------------------------------
-- 17/10/2016  | BC_EY94137       | 0.2 
-- 26/10/2016  | BC_EY94137       | 0.3 
-- 02/11/2016  | BC_EY94137       | Comments added 
-- 30/11/2016  | BC_EY94137       | Added error and control logs
-- 02/03/2017  | BC_EY94137       | Changes made to update SRCDOC_ID 
-- 03/05/2017  | EZ_18762         | Add Error logging and one cursor
---------------|------------------|-----------------------------------
-- Description Of the changes 
----------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> :<Modified the procedure as ORDER flow 
--                                changed>       
----------------------------------------------------------------------

	DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
	DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
	DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
	DECLARE V_RECORD_CNT INT;
	
	
	

	
	/* Exception handling: Capture standard error and rollback, if any error is encountered.  
   The autonomous transaction is independent from the main procedure, if the error occurs
   at any place in the procedure, then this part of the code will execute and roll back the 
   updated records and insert into the error Log table with Standard error. */
  
   
DECLARE EXIT HANDLER FOR SQLEXCEPTION 
BEGIN AUTONOMOUS TRANSACTION 
	INSERT INTO "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER_EH"(
				 ERROR_CODE,
				 TECHNICAL_MESSAGE,
				 ERROR_CREATE_TS
				 )VALUES(
				 ::SQL_ERROR_CODE,
				 ::SQL_ERROR_MESSAGE,
		  		 :LV_CUR_UTC);
		  		
		
/* STATUS 1: Send the Error message to scheduling tool to confirm whether procedure is 
   successful or not */
	OP_STATUS := LC_ERROR_TEXT;
		
	COMMIT;
	RESIGNAL;
END;
NODE = SELECT
     "ACTV_CD",
	 "ACTV_RSN_CD",
	 "BAN",
	 "BYRS_RMRSE",
	 "CONTR_DEALER_CODE",
	 "CONTR_END_DT",
	 "CONTR_ID",
	 "CONTR_TERM",
	 "CONTR_TIER",
	 "CONTR_TY",
	 "EI_GRP_SEQ_NO",
	 "SUBSCR_NO",
	 "TRX_SEQ_NO",
	 "EQP_SRC",
	 "EQP_TY",
	 "ITEM_ID",
	 "ITEM_END_DT",
	 "STNDLN_SELL_PRC",
	 "PROV_CUST",
	 "BRND",
	 "KUNNR_SID",
	 "CONTR_TRANS_DT",
	 "ITEM_TRANS_DT",
	 "CONTR_EXPY_DT",
	 "IS_20401401",
	 "IS_20401402",
	 "IS_20401403",
	 "ITEM_GRP_CD",
	 "TERM_M2M",
	 "BASE_OPT_SERV_IND",
	 "BSE_SOC",
	 "BSE_SOC_AMT",
	 "COST_CENTRE",
	 "GL_ACCOUNT",
	 "GL_TAX_CD",
	 "JURISD_CD",
	 "MIN_TIER_PRC",
	 "PROMO_CD",
	 "PROV_AGR",
	 "SERV_TIER",
	 "SOC_LEV_CD",
	 "SUBS_AMT",
	 "SUBS_EFF_DT",
	 "SUBS_EXP_DT",
	 "TRANS_PRC",
	 "REV_CD",
	 "CHRG_TY_CLASSIF",
	 "GL_PRICE_PLAN_GRP",
	 "ORIG_CONTR_STRT_DT",
	 "ORIG_CONTR_TERM",
	 "ORIG_STNDLN_SELL_PRC",
	 "ORIG_TRANS_PRC",
	 "ITEM_SUB_ID",
	 "IS_20401101",
	 "SIM",
	 "ITEM_STRT_DT" 
	FROM "_SYS_BIC"."IFRS_R1.MOBILITY.NDB_MOBILITY/CA_ORDER_BYOD_CONTR"
	(PLACEHOLDER."$$IP_EFF_DT$$"=> :IP_EFF_DT)
	ORDER BY "CONTR_TRANS_DT","CONTR_EXPY_DT";



SELECT COUNT(*) INTO V_RECORD_CNT FROM :NODE;
--Check if there is any record to be processed                             
IF ( :V_RECORD_CNT != 0 ) THEN   
--  Update Landing Table IFRS_R1.LAND::NM1_EDW_CONTR
UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_CONTR" A
SET SP_ORDER_BYOD_CONTR_TS = '19000101'
WHERE A.SP_ORDER_BYOD_CONTR_TS IS NULL
AND 
EXISTS (SELECT
	 1 
	FROM :NODE V 
	WHERE V.BAN=A.BAN 
	AND V.SUBSCR_NO = A.SUBSCRIBER_NO 
	AND V.CONTR_TRANS_DT = A.EFF_DT);
 --Update Landing Table IFRS_R1.LAND::NM1_EDW_EQP
	
UPDATE "LAND"."IFRS_R1.LAND::NM1_EDW_EQP" A
SET SP_ORDER_BYOD_CONTR_TS = '19000101'
WHERE A.SP_ORDER_BYOD_CONTR_TS IS NULL
AND  EXISTS (SELECT
	 1 
	FROM :NODE V 
	WHERE V.BAN=A.BAN 
	AND V.SUBSCR_NO = A.SUBCR_NO 
	AND V.ITEM_TRANS_DT = A.TRANS_DT);            
END IF;
     
/* STATUS 0: Send the success message to scheduling tool to confirm whether this procedure has been
executed successfully. */
		OP_STATUS := LC_SUCCESS_TEXT;                         

		

END;