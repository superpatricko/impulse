PROCEDURE "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::SP_RAI_MOBL_ORDR"
(IN IP_DATE DATE,
IN IP_BAN NVARCHAR(1000),
OUT OP_STATUS NVARCHAR(1000))  
 	LANGUAGE SQLSCRIPT 
	SQL SECURITY INVOKER  
	AS 
BEGIN
----------------------------------------------------------------------------------------------------
-- Procedure Title : IFRS_R1.MOBILITY.RAI_MOBILITY::SP_RAI_MOBL_ORDR
----------------------------------------------------------------------------------------------------
-- Created By      : BC_EY44387(Gunjan Joshi)          Date :10/09/2016
----------------------------------------------------------------------------------------------------
-- Procedure Description : 
--   This Procedure will create the RAI order Items based on
--	 Mobility NDB order data for both term and M2M contract types
--   If the Batch ID is blank in the NDB order, then it will create 
--   RAI item at T0.
--   Based on the Bill Cycle, it will create RAI item for T1... T24. 
--   If the time indicator in NDB is T0, then it will create RAI for T1.
--   If the time indicator in NDB is T1, then it will create RAI for T2.
--  This procedure will cover both order creation and order modifcation
--  for term contract, STNDLN_SELL_PRC and TRANS_PRC will be calcualted for the entire contract period
--  if the contracts gets modified in between the billing cycle, the STNDLN_SELL_PRC and TRANS_PRC for the contract
--  modifiction will be calculated based on the pro-rated.
                           
--    This Procedure has three parameters:
--	   	1. The date parameter 'IP_DATE': Using this date paramter,
--	   	   RAI item	can be created for past records(if it is required).
--	   	2. The error parameter 'IP_ERROR': If this parameter is not null, 
--	   	   the data will be inserted into staging table from Error Table 
--	   	   for re-processing of Errored records. 
--      3. The  OT_STATUS parametere : This parameter give the status of the Procedure whether it is 
--         success or failure

-- ERROR_LOG Table : will be used to trace the system error like transaction failed

-- Track Error/Process Control Table: This table will be used to tract the start and end
--  time of the execution
----------------------------------------------------------------------------------------------------
-- Release :R1/IFRS
----------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
----------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
----------------------------------------------------------------------------------------------------
-- 06/10/2016  | BC_EY94137       | Updated after unit testing
-- 01/08/2017  | BC_EZ18725       | Defect#2812 - EH table update of deleted flag has been 
--                                  modified to be based on REFERENCE_ID 
-- 08/08/2017  | BC_EZ23103       | CR 283 - SP Updated to process the records based on input parameter as IP_BAN 
----------------------------------------------------------------------------------------------------
-- Description Of the changes 
----------------------------------------------------------------------------------------------------
-- Modification Number          :<Assign Some Number> 
-- Description of Changes Made> :<Updated the logic of RAI_TS write back>       
----------------------------------------------------------------------------------------------------


/* Declaring Local Variables */

DECLARE LV_BATCH_ID       		INTEGER;
DECLARE LV_COUNT                INTEGER;
DECLARE LV_COMMIT_COUNT         INTEGER := 0; -- Commit count to ensure EH records are committed every 10k records
DECLARE LV_ERROR_FLAG 		    NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 				TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE LC_SQL_ERROR            NVARCHAR(40) DEFAULT 'SQL_SIBLING_ERROR';
DECLARE LC_SQL_ERROR_TEXT       NVARCHAR(40) DEFAULT 'SQL_EXCEPTION : SECOND LEVEL';                                
DECLARE LC_ERROR_TEXT 		    NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	    NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE i					    INTEGER;
DECLARE IP_BAN_LIST             NVARCHAR(1000);
DECLARE CURRENT_ERROR		    NVARCHAR(100);
DECLARE ERROR_TAB 			    TABLE (ERROR_CODE NVARCHAR(100));
DECLARE RECORD_COUNT		    INTEGER;
DECLARE LC_SET		  			NVARCHAR (1) DEFAULT 'X';

--------------------------------------------------------------------------------------------------
-- Temporary table/Variable/Node Declaration to hold data from the final CVs
-------------------------------------------------------------------------------------------------- 

	MOBL_ORDR_RAI_ITEM_TEMP= 
		     SELECT
				"LC_SSP",
				"LC_TP",
				"CATEGORY",
				"MAIN_COND_TYPE",
				"QUANTITY",
				"QUANTITY_UNIT",
				"BILREL",
				"SRCDOC_ID_MODIF",     -- Added in Mobility Modification scenarios
				"SRCDOC_ID",
				"SRCDOC_ID_TERM",
				"BAN",
				"SUBSCR_NO",
				"STNDLN_SELL_PRC",
				"TRANS_PRC",
				"ITEM_TRANS_DT",
				"ITEM_SUB_ID",
				"TIME_IND",
				"RAI_ITEM_ID",
				"KUNNR_SID",
				"CONTR_STRT_DT",
				"TRX_SEQ_NO",
				"CONTR_TRANS_DT",
				"ITEM_STRT_DT",
				"BILL_DAY",
				"REF_ID",
				"ITEM_ID",
				"END_DT",
				"START_DT",
				"X_NEGATIVE_ITEM",
				"BUKRS",
				"ZZ_SGTXT",
				"KOSTL",
				"ZZ_BKTXT",
				"ZZ_XBLNR",
				"ZZ_ZUONR",
				"ZZ_LEGACY",
				"ZZ_VBUND",
				"ZZ_CATRANSFER",
				"ZZ_AUFNR",
				"ZZ_UPPFLAG",
				"ZZ_ADJ_RSN_CD",
				"ZZ_ALLOCATE",
				"ZZ_BILLER",
				"ZZ_BRANDACT",
				"ZZ_BU_VIEW",
				"ZZ_CONVERSION",
				"ZZ_MOD_TYPE",
				"ZZ_PAOBJNR",
				"ZZ_PRE_POST",
				"ZZ_KOSTL",
				"ZZ_BUKRS",
				"ZZ_ICHKONT",
				"ZZ_MWSKZ",
				"ZZ_TXJCD",
				"SRCDOC_COMP",
				"SRCDOC_LOGSYS",
				"SRCDOC_TYPE",
				"REFERENCE_TYPE",
				"WAERS",
				"RECEIV_ACCOUNT",
				"TERM_POB_IND",
				"PL_ACCOUNT",
				"VALUE_RELEVANT",
				"ZZ_MATNR",
				"ZZ_MATNR_GRP",
				"ERROR_STATUS" ,
				"ZZ_BLDAT",
				"ZZ_BUDAT",
				"IS_SIBLING_ERROR" ,
				"ERROR_CODE",
				"CC_MOD_IND_ONLY",
				"CC_NEW_PLAN_REC",
				"CC_MODIF_IND",
				"CC_TERM_SUSP_IND",
				to_decimal(CC_TIMESTAMP,15,0)TIMESTAMP_DT
			FROM "_SYS_BIC"."IFRS_R1.MOBILITY.RAI_MOBILITY/CA_MOBL_ORDR_SIBLING_CHECK" 
	   			 (PLACEHOLDER."$$IP_BILL_DAY$$" => :IP_DATE);
 --------------------------------------------------------------------------------------------------
-- FILTER BANs as per CR 283
--------------------------------------------------------------------------------------------------
	
	IF IP_BAN IS NULL THEN
	 	IP_BAN_LIST := '1=1';
	ELSE
	 IP_BAN_LIST := 'BAN IN('||:IP_BAN||')';
	END IF;
	
	MOBL_ORDR_RAI_ITEM = APPLY_FILTER (:MOBL_ORDR_RAI_ITEM_TEMP,:IP_BAN_LIST);	     

	   			 


  BEGIN    
	--------------------------------------------------------------------------------------------------
	-- Cursors Declaration
	-------------------------------------------------------------------------------------------------- 

	DECLARE CURSOR C_RAI_ORDR FOR 
	SELECT * FROM :MOBL_ORDR_RAI_ITEM 
	WHERE "CC_MOD_IND_ONLY" IS NULL;
		  
	DECLARE CURSOR C_RAI_ORDR_PARENT FOR 
	    SELECT "REF_ID" 
	      FROM :MOBL_ORDR_RAI_ITEM 
	     WHERE "CC_MOD_IND_ONLY" IS NULL
	       AND "IS_SIBLING_ERROR" = '0' 
	       AND "ERROR_STATUS" = '0' 
	  GROUP BY "REF_ID";
	--------------------------------------------------------------------------------------------------
	-- Batch ID creation for RAI processing
	-------------------------------------------------------------------------------------------------- 			 
	
	SELECT "RAI_COMMON"."IFRS_R1.COMMON_COMP.RAI_COMMON::RAI_BATCH_ID".NEXTVAL 
	  INTO LV_BATCH_ID 
	  FROM DUMMY;	
		 
	--------------------------------------------------------------------------------------------------
	-- Local Temporary Tables Declaration
	-------------------------------------------------------------------------------------------------- 			 	   	   
	
	CREATE LOCAL TEMPORARY TABLE #UPDATE_MOBL_ORDER(
	    BAN    						NVARCHAR(16),
	    SUBSCR_NO 					NVARCHAR(30),
		ITEM_ID                     NVARCHAR(20),
		ITEM_SUB_ID                 NVARCHAR(6),
		SRCDOC_ID                   NVARCHAR(35),
		SRCDOC_ID_TERM				NVARCHAR(35),
		REFERENCE_ID                NVARCHAR(30),
		RAI_ITEM_ID                 NVARCHAR(15),
		BILL_DATE                   DATE,
		TIME_IND                    NVARCHAR(4),
		ITEM_TRANS_DT 				DATE,
		CONTR_TRANS_DT 				DATE,
		TRX_SEQ_NO 					INTEGER,
		MOD_IND                     NVARCHAR(1),
		BATCH_ID                    INTEGER,
		CC_NEW_PLAN_REC				NVARCHAR(1),
	    TERM_POB_IND                NVARCHAR(1),
	    TIMESTAMP_UTC               DECIMAL(15,0));
	    
	-- Defect#2812 Modification
	    
	--------------------------------------------------------------------------------------------------
	-- Cursors Loop
	-------------------------------------------------------------------------------------------------- 
	
	FOR CUR_ORDER AS C_RAI_ORDR DO
	
	--  Define Exit Handler
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		BEGIN AUTONOMOUS TRANSACTION 
	
	--    Define Exit Handler
		  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		  BEGIN AUTONOMOUS TRANSACTION 
		
	--      Do Nothing. Exception Handled to ensure SP does not get terminated
	  		LV_ERROR_FLAG := 'E';
	  		
	      END;
	 
	--    Insert record into Mobility ORDER main error table
	
	      
		  INSERT INTO   "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_EH"(
						"SRCDOC_COMP",			
						"SRCDOC_LOGSYS",
						"SRCDOC_TYPE",
						"SRCDOC_ID",
						"TIMESTAMP_UTC",
						"HEADER_ID",
						"ITEM_ID",
						"REFERENCE_TYPE",
						"REFERENCE_ID",
						"KUNNR",
						"BUKRS",
						"WAERS",
						"QUANTITY",
						"QUANTITY_UNIT",
						"BILREL",
						"START_DATE",
						"END_DATE",
						"XNEGATIVE_ITEM",
						"RECEIV_ACCOUNT",
						"INCEPTION_DATE",
						"ZZ_ALLOCATE",
						"ZZ_AUFNR",
						"ZZ_BATCH_ID",
						"ZZ_BILLER",
						"ZZ_BKTXT",
						"ZZ_BRANDACT",
						"ZZ_BUKRS",
						"ZZ_BU_VIEW",
						"ZZ_CATRANSFER",
						"ZZ_KOSTL",
						"ZZ_LEGACY",
						"ZZ_MATNR",
						"ZZ_MATNR_GRP",
						"ZZ_MOD_TYPE",
						"ZZ_MWSKZ",
						"ZZ_PAOBJNR",
						"ZZ_PRE_POST",
						"ZZ_SGTXT",
						"ZZ_TXJCD",
						"ZZ_UPFFLG",
						"ZZ_VBUND",
						"ZZ_XBLNR",
						"ZZ_ZUONR",
						"CONDITION_TYPE_SSP",						
						"CONDITION_TYPE_TP",
						"PL_ACCOUNT",			
						"BETRW_SSP",			
						"BETRW_TP",
						"CATEGORY",
						"MAIN_COND_TYPE",
						"VALUE_RELEVANT",
						"ZZ_CONVERSION",
						"ERROR_CODE",
					    "TECHNICAL_MESSAGE",
					    "ERROR_CREATE_TS")
				VALUES (CUR_ORDER."SRCDOC_COMP",
						CUR_ORDER."SRCDOC_LOGSYS",
						CUR_ORDER."SRCDOC_TYPE",
						CUR_ORDER."SRCDOC_ID_MODIF",
						CUR_ORDER."TIMESTAMP_DT",
						CUR_ORDER."BAN",
						CUR_ORDER."RAI_ITEM_ID",
						CUR_ORDER."REFERENCE_TYPE",
						CUR_ORDER."REF_ID",
						CUR_ORDER."KUNNR_SID",
						CUR_ORDER."BUKRS",
						CUR_ORDER."WAERS",
						CUR_ORDER."QUANTITY",
						CUR_ORDER."QUANTITY_UNIT",
						CUR_ORDER."BILREL",
						CUR_ORDER."START_DT",
						CUR_ORDER."END_DT",
						CUR_ORDER."X_NEGATIVE_ITEM",
						CUR_ORDER."RECEIV_ACCOUNT",
						CUR_ORDER."CONTR_STRT_DT",
						CUR_ORDER."ZZ_ALLOCATE",
						CUR_ORDER."ZZ_AUFNR",
						:LV_BATCH_ID,
						CUR_ORDER."ZZ_BILLER",
						CUR_ORDER."ZZ_BKTXT",
						CUR_ORDER."ZZ_BRANDACT",
						CUR_ORDER."ZZ_BUKRS",
						CUR_ORDER."ZZ_BU_VIEW",
						CUR_ORDER."ZZ_CATRANSFER",
						CUR_ORDER."ZZ_KOSTL",
						CUR_ORDER."ZZ_LEGACY",
						CUR_ORDER."ZZ_MATNR",
						CUR_ORDER."ZZ_MATNR_GRP",
						CUR_ORDER."ZZ_MOD_TYPE",
						CUR_ORDER."ZZ_MWSKZ",
						CUR_ORDER."ZZ_PAOBJNR",
						CUR_ORDER."ZZ_PRE_POST",
						CUR_ORDER."ZZ_SGTXT",
						CUR_ORDER."ZZ_TXJCD",
						CUR_ORDER."ZZ_UPPFLAG",
						CUR_ORDER."ZZ_VBUND",
						CUR_ORDER."ZZ_XBLNR",
						CUR_ORDER."ZZ_ZUONR",							
						CUR_ORDER."LC_SSP",	
						CUR_ORDER."LC_TP",
						CUR_ORDER."PL_ACCOUNT",
						CUR_ORDER."STNDLN_SELL_PRC",
						CUR_ORDER."TRANS_PRC",
						CUR_ORDER."CATEGORY",
						CUR_ORDER."MAIN_COND_TYPE",
						CUR_ORDER."VALUE_RELEVANT",
						CUR_ORDER."ZZ_CONVERSION",
						::SQL_ERROR_CODE,
						::SQL_ERROR_MESSAGE,
						:LV_CUR_UTC);
						
			LV_ERROR_FLAG := 'Y';
	    
	    END;
	   
	--  Increment the commit count at every loop
	    LV_COMMIT_COUNT = :LV_COMMIT_COUNT + 1;
	--  When the commit count is at or over 10000, commit the records and reset the count
	    IF LV_COMMIT_COUNT >= 10000 THEN
	    	COMMIT;
	    	LV_COMMIT_COUNT = 0;
	    END IF;
	    
	--  Check the Error Status of the Record. 
	--  If Record is with Error or the sibling is with Error, then send to Error Table
		IF CUR_ORDER.IS_SIBLING_ERROR = '1' 
		OR CUR_ORDER.ERROR_STATUS = '1' 
		THEN
		
    --  	Call the Stored Procedure to split the concatenated Error Messages into Error Rows
			CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_ORDER."ERROR_CODE", 
																		   ERROR_TAB,
																		   RECORD_COUNT);
	
    --	    Loop through the Error Records
			FOR i IN 1 .. :RECORD_COUNT DO
				
    --      	Fetch the Error Code
				CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
				
	--  		All erroneous records are inserted into Order Main EH table 
				INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_EH"(
							"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
						    "CONDITION_TYPE_SSP",						
						    "CONDITION_TYPE_TP",
						    "PL_ACCOUNT",			
						    "BETRW_SSP",			
						    "BETRW_TP",
						    "CATEGORY",
						    "MAIN_COND_TYPE",
							"VALUE_RELEVANT",
							"ZZ_CONVERSION",
							"ERROR_CODE",
						    "ERROR_CREATE_TS")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."SRCDOC_ID_MODIF",
							CUR_ORDER."TIMESTAMP_DT",
							CUR_ORDER."BAN",
							CUR_ORDER."RAI_ITEM_ID",
							CUR_ORDER."REFERENCE_TYPE",
							CUR_ORDER."REF_ID",
							CUR_ORDER."KUNNR_SID",
							CUR_ORDER."BUKRS",
							CUR_ORDER."WAERS",
							CUR_ORDER."QUANTITY",
							CUR_ORDER."QUANTITY_UNIT",
							CUR_ORDER."BILREL",
							CUR_ORDER."START_DT",
							CUR_ORDER."END_DT",
							CUR_ORDER."X_NEGATIVE_ITEM",
							CUR_ORDER."RECEIV_ACCOUNT",
							CUR_ORDER."CONTR_STRT_DT",
							CUR_ORDER."ZZ_ALLOCATE",
							CUR_ORDER."ZZ_AUFNR",
							LV_BATCH_ID,
							CUR_ORDER."ZZ_BILLER",
							CUR_ORDER."ZZ_BKTXT",
							CUR_ORDER."ZZ_BRANDACT",
							CUR_ORDER."ZZ_BUKRS",
							CUR_ORDER."ZZ_BU_VIEW",
							CUR_ORDER."ZZ_CATRANSFER",
							CUR_ORDER."ZZ_KOSTL",
							CUR_ORDER."ZZ_LEGACY",
							CUR_ORDER."ZZ_MATNR",
							CUR_ORDER."ZZ_MATNR_GRP",
							CUR_ORDER."ZZ_MOD_TYPE",
							CUR_ORDER."ZZ_MWSKZ",
							CUR_ORDER."ZZ_PAOBJNR",
							CUR_ORDER."ZZ_PRE_POST",
							CUR_ORDER."ZZ_SGTXT",
							CUR_ORDER."ZZ_TXJCD",
							CUR_ORDER."ZZ_UPPFLAG",
							CUR_ORDER."ZZ_VBUND",
							CUR_ORDER."ZZ_XBLNR",
							CUR_ORDER."ZZ_ZUONR",							
							CUR_ORDER."LC_SSP",	
							CUR_ORDER."LC_TP",
							CUR_ORDER."PL_ACCOUNT",
							CUR_ORDER."STNDLN_SELL_PRC",
							CUR_ORDER."TRANS_PRC",
							CUR_ORDER."CATEGORY",
							CUR_ORDER."MAIN_COND_TYPE",
							CUR_ORDER."VALUE_RELEVANT",
							CUR_ORDER."ZZ_CONVERSION",
							:CURRENT_ERROR,
							LV_CUR_UTC);

	--  		Set Error Flag				        
				LV_ERROR_FLAG := 'Y';
				
			END FOR;
			
			
	-- Processing for Successful Records
	   ELSEIF (CUR_ORDER.IS_SIBLING_ERROR = '0' 
		   AND CUR_ORDER.ERROR_STATUS = '0')
	   THEN 
	   	    
	   	    
	   	    BEGIN AUTONOMOUS TRANSACTION
	   	    
	--  		All valid records are inserted into Order Main TEMP table which
	--  		would finally move  into the Order Main table if all the
	--  		siblings of the corresponding parent are available in the Temp table
				INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_MAIN_TT"(
							"SRCDOC_COMP",			
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"HEADER_ID",
							"ITEM_ID",
							"REFERENCE_TYPE",
							"REFERENCE_ID",
							"KUNNR",
							"BUKRS",
							"WAERS",
							"QUANTITY",
							"QUANTITY_UNIT",
							"BILREL",
							"START_DATE",
							"END_DATE",
							"XNEGATIVE_ITEM",
							"RECEIV_ACCOUNT",
							"INCEPTION_DATE",
							"ZZ_ALLOCATE",
							"ZZ_AUFNR",
							"ZZ_BATCH_ID",
							"ZZ_BILLER",
							"ZZ_BKTXT",
							"ZZ_BRANDACT",
							"ZZ_BUKRS",
							"ZZ_BU_VIEW",
							"ZZ_CATRANSFER",
							"ZZ_KOSTL",
							"ZZ_LEGACY",
							"ZZ_MATNR",
							"ZZ_MATNR_GRP",
							"ZZ_MOD_TYPE",
							"ZZ_MWSKZ",
							"ZZ_PAOBJNR",
							"ZZ_PRE_POST",
							"ZZ_SGTXT",
							"ZZ_TXJCD",
							"ZZ_UPFFLG",
							"ZZ_VBUND",
							"ZZ_XBLNR",
							"ZZ_ZUONR",
							"VALUE_RELEVANT",
							"ZZ_CONVERSION")
					VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."SRCDOC_ID_MODIF",
							CUR_ORDER."TIMESTAMP_DT",
							CUR_ORDER."BAN",
							CUR_ORDER."RAI_ITEM_ID",
							CUR_ORDER."REFERENCE_TYPE",
							CUR_ORDER."REF_ID",
							CUR_ORDER."KUNNR_SID",
							CUR_ORDER."BUKRS",
							CUR_ORDER."WAERS",
							CUR_ORDER."QUANTITY",
							CUR_ORDER."QUANTITY_UNIT",
							CUR_ORDER."BILREL",
							CUR_ORDER."START_DT",
							CUR_ORDER."END_DT",
							CUR_ORDER."X_NEGATIVE_ITEM",
							CUR_ORDER."RECEIV_ACCOUNT",
							CUR_ORDER."CONTR_STRT_DT",
							CUR_ORDER."ZZ_ALLOCATE",
							CUR_ORDER."ZZ_AUFNR",
							LV_BATCH_ID,
							CUR_ORDER."ZZ_BILLER",
							CUR_ORDER."ZZ_BKTXT",
							CUR_ORDER."ZZ_BRANDACT",
							CUR_ORDER."ZZ_BUKRS",
							CUR_ORDER."ZZ_BU_VIEW",
							CUR_ORDER."ZZ_CATRANSFER",
							CUR_ORDER."ZZ_KOSTL",
							CUR_ORDER."ZZ_LEGACY",
							CUR_ORDER."ZZ_MATNR",
							CUR_ORDER."ZZ_MATNR_GRP",
							CUR_ORDER."ZZ_MOD_TYPE",
							CUR_ORDER."ZZ_MWSKZ",
							CUR_ORDER."ZZ_PAOBJNR",
							CUR_ORDER."ZZ_PRE_POST",
							CUR_ORDER."ZZ_SGTXT",
							CUR_ORDER."ZZ_TXJCD",
							CUR_ORDER."ZZ_UPPFLAG",
							CUR_ORDER."ZZ_VBUND",
							CUR_ORDER."ZZ_XBLNR",
							CUR_ORDER."ZZ_ZUONR",
							CUR_ORDER."VALUE_RELEVANT",
							CUR_ORDER."ZZ_CONVERSION");
				 
	--  		All valid records are inserted ORDER Condition TEMP table for STNDLN_SELL_PRC(Standalone Selling Price)
	--  		which would finally move into the Order Main table if all the
	--  		siblings of the corresponding parent are available in the Temp table          
				INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_COND_TT"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."SRCDOC_ID_MODIF",
							CUR_ORDER."TIMESTAMP_DT",
							CUR_ORDER."LC_SSP",
							CUR_ORDER."PL_ACCOUNT",
							CUR_ORDER."STNDLN_SELL_PRC",
							CUR_ORDER."WAERS",
							CUR_ORDER."CATEGORY",
							CUR_ORDER."MAIN_COND_TYPE",
							LV_BATCH_ID);		
				 
	--  		All valid records are inserted ORDER Condition TEMP table for TRANS_PRC(Transaction Price)
    --  		which would finally move  into the Order Main table if all the
	--  		siblings of the corresponding parent are available in the Temp table
		        INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_COND_TT"(
							"SRCDOC_COMP",
							"SRCDOC_LOGSYS",
							"SRCDOC_TYPE",
							"SRCDOC_ID",
							"TIMESTAMP_UTC",
							"CONDITION_TYPE",
							"PL_ACCOUNT",			
							"BETRW",
							"WAERS",
							"CATEGORY",
							"MAIN_COND_TYPE",
							"BATCH_ID")
				    VALUES (CUR_ORDER."SRCDOC_COMP",
							CUR_ORDER."SRCDOC_LOGSYS",			
							CUR_ORDER."SRCDOC_TYPE",
							CUR_ORDER."SRCDOC_ID_MODIF",
							CUR_ORDER."TIMESTAMP_DT",
							CUR_ORDER."LC_TP",
							CUR_ORDER."PL_ACCOUNT",
							CUR_ORDER."TRANS_PRC",
							CUR_ORDER."WAERS",
							CUR_ORDER."CATEGORY",
							CUR_ORDER."MAIN_COND_TYPE",
							LV_BATCH_ID);
							
			END;
			
	    END IF;
		
	END FOR;
	
	-- Commit the remaining EH records
	COMMIT;
	
	/*** PHASE 2 Processing, moving from TT into the final Order tables ***/ 
	
	-- Get the Order Main records with the sibling error information
	MOBL_ORDER_MAIN_EH = SELECT TT."SRCDOC_COMP",			
								TT."SRCDOC_LOGSYS",
								TT."SRCDOC_TYPE",
								TT."SRCDOC_ID",
								TT."TIMESTAMP_UTC",
								TT."HEADER_ID",
								TT."ITEM_ID",
								TT."REFERENCE_TYPE",
								TT."REFERENCE_ID",
								TT."KUNNR",
								TT."BUKRS",
								TT."WAERS",
								TT."QUANTITY",
								TT."QUANTITY_UNIT",
								TT."BILREL",
								TT."START_DATE",
								TT."END_DATE",
								TT."XNEGATIVE_ITEM",
								TT."RECEIV_ACCOUNT",
								TT."INCEPTION_DATE",
								TT."ZZ_ALLOCATE",
								TT."ZZ_AUFNR",
								TT."ZZ_BATCH_ID",
								TT."ZZ_BILLER",
								TT."ZZ_BKTXT",
								TT."ZZ_BRANDACT",
								TT."ZZ_BUKRS",
								TT."ZZ_BU_VIEW",
								TT."ZZ_CATRANSFER",
								TT."ZZ_KOSTL",
								TT."ZZ_LEGACY",
								TT."ZZ_MATNR",
								TT."ZZ_MATNR_GRP",
								TT."ZZ_MOD_TYPE",
								TT."ZZ_MWSKZ",
								TT."ZZ_PAOBJNR",
								TT."ZZ_PRE_POST",
								TT."ZZ_SGTXT",
								TT."ZZ_TXJCD",
								TT."ZZ_UPFFLG",
								TT."ZZ_VBUND",
								TT."ZZ_XBLNR",
								TT."ZZ_ZUONR",
								TT."VALUE_RELEVANT",
								TT."ZZ_CONVERSION",
								EH."REFERENCE_ID" AS "REFERENCE_ID_EH"
							FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_MAIN_TT" TT
							LEFT JOIN (SELECT "REFERENCE_ID" FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_EH" WHERE ZZ_BATCH_ID = LV_BATCH_ID GROUP BY "REFERENCE_ID") EH ON TT."REFERENCE_ID" = EH."REFERENCE_ID"
							WHERE TT.ZZ_BATCH_ID = LV_BATCH_ID;
	
	/** Insert valid records to final table**/						
	-- Insert order records w/o sibling errors
	INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_MAIN"(
			"SRCDOC_COMP",			
			"SRCDOC_LOGSYS",
			"SRCDOC_TYPE",
			"SRCDOC_ID",
			"TIMESTAMP_UTC",
			"HEADER_ID",
			"ITEM_ID",
			"REFERENCE_TYPE",
			"REFERENCE_ID",
			"KUNNR",
			"BUKRS",
			"WAERS",
			"QUANTITY",
			"QUANTITY_UNIT",
			"BILREL",
			"START_DATE",
			"END_DATE",
			"XNEGATIVE_ITEM",
			"RECEIV_ACCOUNT",
			"INCEPTION_DATE",
			"ZZ_ALLOCATE",
			"ZZ_AUFNR",
			"ZZ_BATCH_ID",
			"ZZ_BILLER",
			"ZZ_BKTXT",
			"ZZ_BRANDACT",
			"ZZ_BUKRS",
			"ZZ_BU_VIEW",
			"ZZ_CATRANSFER",
			"ZZ_KOSTL",
			"ZZ_LEGACY",
			"ZZ_MATNR",
			"ZZ_MATNR_GRP",							
			"ZZ_MOD_TYPE",
			"ZZ_MWSKZ",
			"ZZ_PAOBJNR",
			"ZZ_PRE_POST",
			"ZZ_SGTXT",
			"ZZ_TXJCD",
			"ZZ_UPFFLG",
			"ZZ_VBUND",
			"ZZ_XBLNR",
			"ZZ_ZUONR",
			"VALUE_RELEVANT",
			"RAI_TS",
			"ZZ_CONVERSION")
	(SELECT "SRCDOC_COMP",			
			"SRCDOC_LOGSYS",
			"SRCDOC_TYPE",
			"SRCDOC_ID",
			"TIMESTAMP_UTC",
			"HEADER_ID",
			"ITEM_ID",
			"REFERENCE_TYPE",
			"REFERENCE_ID",
			"KUNNR",
			"BUKRS",
			"WAERS",
			"QUANTITY",
			"QUANTITY_UNIT",
			"BILREL",
			"START_DATE",
			"END_DATE",
			"XNEGATIVE_ITEM",
			"RECEIV_ACCOUNT",
			"INCEPTION_DATE",
			"ZZ_ALLOCATE",
			"ZZ_AUFNR",
			"ZZ_BATCH_ID",
			"ZZ_BILLER",
			"ZZ_BKTXT",
			"ZZ_BRANDACT",
			"ZZ_BUKRS",
			"ZZ_BU_VIEW",
			"ZZ_CATRANSFER",
			"ZZ_KOSTL",
			"ZZ_LEGACY",
			"ZZ_MATNR",
			"ZZ_MATNR_GRP",
			"ZZ_MOD_TYPE",
			"ZZ_MWSKZ",
			"ZZ_PAOBJNR",
			"ZZ_PRE_POST",
			"ZZ_SGTXT",
			"ZZ_TXJCD",
			"ZZ_UPFFLG",
			"ZZ_VBUND",
			"ZZ_XBLNR",
			"ZZ_ZUONR",
			"VALUE_RELEVANT",
			:LV_CUR_UTC,
			"ZZ_CONVERSION"
			FROM :MOBL_ORDER_MAIN_EH WHERE REFERENCE_ID_EH IS NULL);
			
    -- Insert condition records of the main records w/o sibling errors			
	INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_COND"(
			"SRCDOC_COMP",
			"SRCDOC_LOGSYS",
			"SRCDOC_TYPE",
			"SRCDOC_ID",
			"TIMESTAMP_UTC",
			"CONDITION_TYPE",
			"PL_ACCOUNT",			
			"BETRW",
			"WAERS",
			"CATEGORY",
			"MAIN_COND_TYPE")
	( SELECT COND."SRCDOC_COMP",
			 COND."SRCDOC_LOGSYS",
			 COND."SRCDOC_TYPE",
			 COND."SRCDOC_ID",
			 "TIMESTAMP_UTC",
			 COND."CONDITION_TYPE",
			 COND."PL_ACCOUNT",			
			 COND."BETRW",
			 COND."WAERS",
			 COND."CATEGORY",
			 COND."MAIN_COND_TYPE"
 		FROM (SELECT *
			FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_COND_TT"
			WHERE "BATCH_ID" = LV_BATCH_ID) COND,
		   (SELECT "SRCDOC_ID" 
		      FROM :MOBL_ORDER_MAIN_EH
		     WHERE "REFERENCE_ID_EH" IS NULL
		       AND "ZZ_BATCH_ID" = LV_BATCH_ID 
		       GROUP BY "SRCDOC_ID" -- Should not be necessary but saw some test data where SRCDOC_ID was duplicated
		       ) MAIN_EH
	 WHERE COND."SRCDOC_ID" = MAIN_EH."SRCDOC_ID");
	
	/** Insert invalid records to EH table**/
	-- Insert order records with sibling errors
	INSERT INTO "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_EH"(
			  "SRCDOC_COMP",			  
			  "SRCDOC_LOGSYS",
			  "SRCDOC_TYPE",
			  "SRCDOC_ID",
			  "TIMESTAMP_UTC",
			  "HEADER_ID",
			  "ITEM_ID",
			  "REFERENCE_TYPE",
			  "REFERENCE_ID",
			  "KUNNR",
			  "BUKRS",
			  "WAERS",
			  "QUANTITY",
			  "QUANTITY_UNIT",
			  "BILREL",
			  "START_DATE",
			  "END_DATE",
			  "XNEGATIVE_ITEM",
			  "RECEIV_ACCOUNT",
			  "INCEPTION_DATE",
			  "ZZ_ALLOCATE",
			  "ZZ_AUFNR",
			  "ZZ_BATCH_ID",
			  "ZZ_BILLER",
			  "ZZ_BKTXT",
			  "ZZ_BRANDACT",
			  "ZZ_BUKRS",
			  "ZZ_BU_VIEW",
			  "ZZ_CATRANSFER",
			  "ZZ_KOSTL",
			  "ZZ_LEGACY",
			  "ZZ_MATNR",
			  "ZZ_MATNR_GRP",
			  "ZZ_MOD_TYPE",
			  "ZZ_MWSKZ",
			  "ZZ_PAOBJNR",
			  "ZZ_PRE_POST",
			  "ZZ_SGTXT",
			  "ZZ_TXJCD",
			  "ZZ_UPFFLG",
			  "ZZ_VBUND",
			  "ZZ_XBLNR",
			  "ZZ_ZUONR",
			  "CONDITION_TYPE_SSP",			  			  
			  "CONDITION_TYPE_TP",
			  "PL_ACCOUNT",			  
			  "BETRW_SSP",			  
			  "BETRW_TP",
			  "CATEGORY",
			  "MAIN_COND_TYPE",
			  "VALUE_RELEVANT",
			  "ZZ_CONVERSION",
			  "ERROR_CODE",
			  "ERROR_CREATE_TS")
	(SELECT   EH."SRCDOC_COMP",			
			  EH."SRCDOC_LOGSYS",
			  EH."SRCDOC_TYPE",
			  EH."SRCDOC_ID",
			  EH."TIMESTAMP_UTC",
			  EH."HEADER_ID",
			  EH."ITEM_ID",
			  EH."REFERENCE_TYPE",
			  EH."REFERENCE_ID",
			  EH."KUNNR",
			  EH."BUKRS",
			  EH."WAERS",
			  EH."QUANTITY",
			  EH."QUANTITY_UNIT",
			  EH."BILREL",
			  EH."START_DATE",
			  EH."END_DATE",
			  EH."XNEGATIVE_ITEM",
			  EH."RECEIV_ACCOUNT",
			  EH."INCEPTION_DATE",
			  EH."ZZ_ALLOCATE",
			  EH."ZZ_AUFNR",
			  EH."ZZ_BATCH_ID",
			  EH."ZZ_BILLER",
			  EH."ZZ_BKTXT",
			  EH."ZZ_BRANDACT",
			  EH."ZZ_BUKRS",
			  EH."ZZ_BU_VIEW",
			  EH."ZZ_CATRANSFER",
			  EH."ZZ_KOSTL",
			  EH."ZZ_LEGACY",
			  EH."ZZ_MATNR",
			  EH."ZZ_MATNR_GRP",
			  EH."ZZ_MOD_TYPE",
			  EH."ZZ_MWSKZ",
			  EH."ZZ_PAOBJNR",
			  EH."ZZ_PRE_POST",
			  EH."ZZ_SGTXT",
			  EH."ZZ_TXJCD",
			  EH."ZZ_UPFFLG",
			  EH."ZZ_VBUND",
			  EH."ZZ_XBLNR",
			  EH."ZZ_ZUONR",
			TEMP."LC_SSP",	
			TEMP."LC_TP",
			TEMP."PL_ACCOUNT",
			TEMP."STNDLN_SELL_PRC",
			TEMP."TRANS_PRC",
			TEMP."CATEGORY",
			TEMP."MAIN_COND_TYPE",
			  EH."VALUE_RELEVANT",
			  EH."ZZ_CONVERSION",
			LC_SQL_ERROR,
			LV_CUR_UTC
		FROM :MOBL_ORDER_MAIN_EH EH, 
			     :MOBL_ORDR_RAI_ITEM_TEMP TEMP
	    WHERE 
	    	EH.REFERENCE_ID = TEMP.REF_ID -- Checking for the contract
	    	AND (TEMP.ERROR_STATUS = '0' AND TEMP.IS_SIBLING_ERROR = '0' ) -- Only valid record from calc view
		    AND ( EH.SRCDOC_ID != TEMP.SRCDOC_ID_MODIF 
		    		AND EH.TIMESTAMP_UTC  != TEMP.TIMESTAMP_DT 
	    		) -- We avoid adding an error already present in EH table
	        AND EH.REFERENCE_ID_EH IS NOT NULL );
			
	
	--  for Updating RAI control fields in corresponding NDB Tables records
	 INSERT INTO #UPDATE_MOBL_ORDER(
					BAN, 
					SUBSCR_NO,
					ITEM_ID, 
					ITEM_SUB_ID,
					SRCDOC_ID,
					SRCDOC_ID_TERM,
					REFERENCE_ID,
					RAI_ITEM_ID,
					BILL_DATE,
					TIME_IND,
					ITEM_TRANS_DT,
					CONTR_TRANS_DT,
					TRX_SEQ_NO,
					CC_NEW_PLAN_REC,
					BATCH_ID,
					TERM_POB_IND,
					MOD_IND,
					TIMESTAMP_UTC)
				SELECT A."BAN",
					A."SUBSCR_NO",
					A."ITEM_ID",
					A."ITEM_SUB_ID",
					A."SRCDOC_ID",
					A."SRCDOC_ID_TERM",
					A."REF_ID",
					A."RAI_ITEM_ID",
					A."BILL_DAY",
					A."TIME_IND",
					A.ITEM_TRANS_DT,
					A.CONTR_TRANS_DT,
					A.TRX_SEQ_NO,
					A."CC_NEW_PLAN_REC",
					B."ZZ_BATCH_ID",
					A."TERM_POB_IND",
					A."CC_MODIF_IND",
					A."TIMESTAMP_DT"
					FROM :MOBL_ORDR_RAI_ITEM A, 
					(SELECT "REFERENCE_ID","ZZ_BATCH_ID" 
					   FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_MAIN"
					  WHERE "ZZ_BATCH_ID" = LV_BATCH_ID) B 
				WHERE A."REF_ID" = B."REFERENCE_ID";
				
	 --  	for Updating RAI control fields in corresponding NDB Tables records
 	 INSERT INTO #UPDATE_MOBL_ORDER(
   		 			BAN, 
   		 			SUBSCR_NO,
					ITEM_ID, 
					ITEM_SUB_ID,
					SRCDOC_ID,
					SRCDOC_ID_TERM,
					REFERENCE_ID,
					RAI_ITEM_ID,
					BILL_DATE,
					TIME_IND,
					ITEM_TRANS_DT,
					CONTR_TRANS_DT,
					TRX_SEQ_NO,
					CC_NEW_PLAN_REC,
					BATCH_ID,
					TERM_POB_IND,
					MOD_IND,
					TIMESTAMP_UTC)
	 		 SELECT A."BAN",
				    A."SUBSCR_NO",
	   		    	A."ITEM_ID",
	   		    	A."ITEM_SUB_ID",
	   		    	A."SRCDOC_ID",
	   		    	A."SRCDOC_ID_TERM",
	   		    	A."REF_ID",
	   		    	A."RAI_ITEM_ID",
	   		    	A."BILL_DAY",
	   		    	A."TIME_IND",
					A.ITEM_TRANS_DT,
					A.CONTR_TRANS_DT,
					A.TRX_SEQ_NO,
	   		    	A."CC_NEW_PLAN_REC",
	   		    	LV_BATCH_ID,
	   		    	A."TERM_POB_IND",
	   		    	A."CC_MODIF_IND",
	   		    	A."TIMESTAMP_DT"
	   		  FROM :MOBL_ORDR_RAI_ITEM A
	   		  WHERE "CC_MOD_IND_ONLY"='Y';
						 
		-- Update Order Main Error Table		
		UPDATE "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_EH" A
		  FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_EH" A
		 INNER JOIN (SELECT REFERENCE_ID FROM "RAI_MOBILITY"."IFRS_R1.MOBILITY.RAI_MOBILITY::MOBL_ORDR_MAIN" WHERE "ZZ_BATCH_ID" = LV_BATCH_ID) B
		    ON A.REFERENCE_ID=B.REFERENCE_ID
		   SET  (DELETE_DATE, DELETED) = (CURRENT_DATE, 1); 
		
			
	--------------------------------------------------------------------------------------------------
	-- Update NDB Tables
	-------------------------------------------------------------------------------------------------- 
			
	--  Updating the Source document Id, Reference Id, Header Id, Time indicator, RAI Item ID,Batch id 
	--  and RAI Timestamp in in NDB order table for Non-Optional POB in case of Term Contracts*/		 
		UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER" A
		  FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER" A
		 INNER JOIN #UPDATE_MOBL_ORDER B
		    ON  A.BAN         	       = B.BAN
			AND A.SUBSCR_NO            = B.SUBSCR_NO
			AND A.ITEM_SUB_ID          = B.ITEM_SUB_ID
			AND A.ITEM_ID              = B.ITEM_ID
			AND A.ITEM_TRANS_DT        = B.ITEM_TRANS_DT
			AND A.CONTR_TRANS_DT       = B.CONTR_TRANS_DT
			AND A.TRX_SEQ_NO    	   = B.TRX_SEQ_NO
		   	SET A."SRCDOC_ID_TERM"     = B."SRCDOC_ID_TERM",
			    A."REFERENCE_ID"       = B."REFERENCE_ID",	
				A.HEADER_ID 	       = B.BAN,
				A.TIME_IND 			   = B.TIME_IND,
				A.RAI_ITEM_ID 		   = B.RAI_ITEM_ID,				
				A.RAI_TS               = LV_CUR_UTC,
				A.BATCH_ID 			   = LV_BATCH_ID,
				A.BILL_DATE 		   = B.BILL_DATE,
				A.MOD_IND 			   = B.MOD_IND,
				A.TIMESTAMP_UTC        = B.TIMESTAMP_UTC
		  WHERE B.TERM_POB_IND         = LC_SET;
			

/* Updating the Source document Id, Reference Id, Header Id, Time indicator, RAI Item ID and
	Batch id in NDB order table for M2M Contracts as well as Optional POB of Term Contracts */

		UPDATE "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER" A
		  FROM "NDB_MOBILITY"."IFRS_R1.MOBILITY.NDB_MOBILITY::MOBL_POST_ORDER" A
		 INNER JOIN #UPDATE_MOBL_ORDER B
		    ON  A.BAN          	    = B.BAN
			AND A.SUBSCR_NO         = B.SUBSCR_NO
			AND A.ITEM_SUB_ID       = B.ITEM_SUB_ID
			AND A.ITEM_ID           = B.ITEM_ID
			AND A.ITEM_TRANS_DT     = B.ITEM_TRANS_DT
			AND A.CONTR_TRANS_DT    = B.CONTR_TRANS_DT
			AND A.TRX_SEQ_NO    	= B.TRX_SEQ_NO
			SET A."SRCDOC_ID"      	= B."SRCDOC_ID",
			    A."REFERENCE_ID"    = B."REFERENCE_ID",	
				A.HEADER_ID 	    = B.BAN,
				A.TIME_IND 			= B.TIME_IND,
				A.RAI_ITEM_ID 		= B.RAI_ITEM_ID,
				A.BATCH_ID 			= LV_BATCH_ID,
				A.RAI_TS            = LV_CUR_UTC,
				A.BILL_DATE 		= B.BILL_DATE,
				A.MOD_IND 			= B.MOD_IND,
				A.TIMESTAMP_UTC     = B.TIMESTAMP_UTC
		  WHERE (B.TERM_POB_IND IS NULL 
		     OR B.CC_NEW_PLAN_REC = LC_SET);	

		IF(LV_ERROR_FLAG = 'Y') THEN		
	
	     	OP_STATUS := LC_ERROR_TEXT; 
				
		ELSE IF(LV_ERROR_FLAG = 'E') THEN		
	
	    		OP_STATUS := LC_SQL_ERROR_TEXT; 
				
			ELSE
		
		  	 	OP_STATUS := LC_SUCCESS_TEXT; 	
					
			END IF;
			
		END IF;
		
	END;

END; 
