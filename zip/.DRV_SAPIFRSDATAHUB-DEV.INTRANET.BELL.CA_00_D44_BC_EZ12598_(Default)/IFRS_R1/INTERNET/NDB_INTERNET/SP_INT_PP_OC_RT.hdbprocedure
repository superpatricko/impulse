PROCEDURE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::SP_INT_PP_OC_RT" ( IN IP_EFF_DT DATE,
OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER  
	AS
BEGIN   
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_INT_PP_OC_RT
-- Created By      : BC_EY94106 (Ashutosh)       
-- Create Date     : 05-17-2017
-- Description     : Data Inserted using Calculation View - CA_INT_PP_OC_RT
--                   to NDB Table - INT_PP_OC_RT Using this stored procedure.
--                   INT PP_RC_RT includes data from table INT_PP_RC_RT.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------
DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG    INTEGER := 0;
DECLARE LV_PREV_RECORD	      NVARCHAR(100) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 
DECLARE CURSOR INT_PP_OC_RT FOR
SELECT
	 "EFFECTIVE_DATE",
	 "ODS_SYST_CD",
	 "EXPIRATION_DATE",
	 "FEATURE_CODE",
	 "NO_OF_INSTALLMENTS",
	 "PAYMENT_INTERVAL",
	 "RATE",
	 "SOC",
	 "REFERENCE_EFFECTIVE_DT",
	 "REFERENCE_EXPIRY_DT",
	 "FLAG_EXISTING_RECORD",
	 "EFFECTIVE_DATE_PREV_DAY" ,
	 "ERROR_STATUS",
	 "ERROR_CODE",
	 "CONCAT_PK"
FROM "_SYS_BIC"."IFRS_R1.INTERNET.NDB_INTERNET/CA_INT_PP_OC_RT"
(PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
ORDER BY 
EFFECTIVE_DATE,FEATURE_CODE,NO_OF_INSTALLMENTS,PAYMENT_INTERVAL,SOC,REFERENCE_EFFECTIVE_DT ; 


--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 


CREATE LOCAL TEMPORARY TABLE #UPDATE_INT_PP_OC_RT (EFFECTIVE_DATE DATE, FEATURE_CODE NVARCHAR(6), NO_OF_INSTALLMENTS INTEGER, PAYMENT_INTERVAL INTEGER, SOC NVARCHAR(9), EFF_DT DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (EFFECTIVE_DATE NVARCHAR(100), FEATURE_CODE NVARCHAR(100), NO_OF_INSTALLMENTS NVARCHAR(100), PAYMENT_INTERVAL NVARCHAR(100), SOC NVARCHAR(100), REFERENCE_EFFECTIVE_DT NVARCHAR(100));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------


FOR OC_RT AS INT_PP_OC_RT DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
 	  		 -- Insert record into error table
		 INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_OC_RT_EH"(
		 	 			"EFFECTIVE_DATE",
	 					"ODS_SYST_CD",
	 					"EXPIRATION_DATE",
	 					"FEATURE_CODE",
	 					"NO_OF_INSTALLMENTS",
	 					"PAYMENT_INTERVAL",
	 					"RATE",
	 					"SOC",
	 					"REFERENCE_EFFECTIVE_DT",
	 					"REFERENCE_EXPIRY_DT",
						"ERROR_CODE",
						"TECHNICAL_MESSAGE",
						"ERROR_CREATE_TS")
				 VALUES(OC_RT."EFFECTIVE_DATE",
	 					OC_RT."ODS_SYST_CD",
	 					OC_RT."EXPIRATION_DATE",
	 					OC_RT."FEATURE_CODE",
	 					OC_RT."NO_OF_INSTALLMENTS",
	 					OC_RT."PAYMENT_INTERVAL",
	 					OC_RT."RATE",
	 					OC_RT."SOC",
	 					OC_RT."REFERENCE_EFFECTIVE_DT",
	 					OC_RT."REFERENCE_EXPIRY_DT",						
						::SQL_ERROR_CODE,
					    ::SQL_ERROR_MESSAGE,
					    LV_CUR_UTC);
					    
		  	   LV_ERROR_FLAG := 'Y';
		  	  LV_LOOP_ERROR_FLAG := 1;
	         
	  END;  
	  
	      -- FOR CLEARING THE VARIABLES

	IF ((LV_PREV_RECORD IS NULL )OR (OC_RT."CONCAT_PK" != LV_PREV_RECORD)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "OC_RT"."CONCAT_PK";
		
    END IF;
	  
	  --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF OC_RT.ERROR_STATUS = '1'  THEN
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(OC_RT."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
 INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_OC_RT_EH"(
		 	 			"EFFECTIVE_DATE",
	 					"ODS_SYST_CD",
	 					"EXPIRATION_DATE",
	 					"FEATURE_CODE",
	 					"NO_OF_INSTALLMENTS",
	 					"PAYMENT_INTERVAL",
	 					"RATE",
	 					"SOC",
	 					"REFERENCE_EFFECTIVE_DT",
	 					"REFERENCE_EXPIRY_DT",
						"INSERT_TS",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
				 VALUES(OC_RT."EFFECTIVE_DATE",
	 					OC_RT."ODS_SYST_CD",
	 					OC_RT."EXPIRATION_DATE",
	 					OC_RT."FEATURE_CODE",
	 					OC_RT."NO_OF_INSTALLMENTS",
	 					OC_RT."PAYMENT_INTERVAL",
	 					OC_RT."RATE",
	 					OC_RT."SOC",
	 					OC_RT."REFERENCE_EFFECTIVE_DT",
	 					OC_RT."REFERENCE_EXPIRY_DT",						
						LV_CUR_UTC,
					    :CURRENT_ERROR,
					    LV_CUR_UTC);	  
	  
		  END FOR; 
		  
		  -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
		    
   ELSE 
         IF OC_RT.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
		 INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_OC_RT_EH"(
		 	 			"EFFECTIVE_DATE",
	 					"ODS_SYST_CD",
	 					"EXPIRATION_DATE",
	 					"FEATURE_CODE",
	 					"NO_OF_INSTALLMENTS",
	 					"PAYMENT_INTERVAL",
	 					"RATE",
	 					"SOC",
	 					"REFERENCE_EFFECTIVE_DT",
	 					"REFERENCE_EXPIRY_DT",
						"INSERT_TS",
						"ERROR_CODE",
						"ERROR_CREATE_TS")
				 VALUES(OC_RT."EFFECTIVE_DATE",
	 					OC_RT."ODS_SYST_CD",
	 					OC_RT."EXPIRATION_DATE",
	 					OC_RT."FEATURE_CODE",
	 					OC_RT."NO_OF_INSTALLMENTS",
	 					OC_RT."PAYMENT_INTERVAL",
	 					OC_RT."RATE",
	 					OC_RT."SOC",
	 					OC_RT."REFERENCE_EFFECTIVE_DT",
	 					OC_RT."REFERENCE_EXPIRY_DT",						
						LV_CUR_UTC,
					    'PREVIOUS VERSION IN ERROR',
					    LV_CUR_UTC);	  
	     
	 -- Processing for Successful Records
    --   If Record exists in the Target NDB Table
    ELSE IF OC_RT.FLAG_EXISTING_RECORD = 'U' THEN
     
     	BEGIN AUTONOMOUS TRANSACTION  
     
          --     Update the target NDB table
	          UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_OC_RT" NDB 
	   		     SET  NDB.REFERENCE_EXPIRY_DT        = OC_RT.EFFECTIVE_DATE_PREV_DAY,
	 		          NDB."MODIFIED_TS"              = LV_CUR_UTC
			   WHERE  NDB.EFFECTIVE_DATE         	 = OC_RT.EFFECTIVE_DATE
			   AND    NDB.FEATURE_CODE               = OC_RT.FEATURE_CODE
			   AND    NDB.NO_OF_INSTALLMENTS         = OC_RT.NO_OF_INSTALLMENTS
			   AND    NDB.PAYMENT_INTERVAL           = OC_RT.PAYMENT_INTERVAL
			   AND    NDB.SOC	                     = OC_RT.SOC	
			   AND    NDB.REFERENCE_EXPIRY_DT 	     = '99991231';
			   
--    Insert the Incoming new record			   
		 INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_OC_RT"(
		 	 			"EFFECTIVE_DATE",
	 					"ODS_SYST_CD",
	 					"EXPIRATION_DATE",
	 					"FEATURE_CODE",
	 					"NO_OF_INSTALLMENTS",
	 					"PAYMENT_INTERVAL",
	 					"RATE",
	 					"SOC",
	 					"REFERENCE_EFFECTIVE_DT",
	 					"REFERENCE_EXPIRY_DT",
						"INSERT_TS"
						)
				 VALUES(OC_RT."EFFECTIVE_DATE",
	 					OC_RT."ODS_SYST_CD",
	 					OC_RT."EXPIRATION_DATE",
	 					OC_RT."FEATURE_CODE",
	 					OC_RT."NO_OF_INSTALLMENTS",
	 					OC_RT."PAYMENT_INTERVAL",
	 					OC_RT."RATE",
	 					OC_RT."SOC",
	 					OC_RT."REFERENCE_EFFECTIVE_DT",
	 					OC_RT."REFERENCE_EXPIRY_DT",
					    LV_CUR_UTC
					    );
					    
	END;

--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	

			   INSERT INTO #UPDATE_INT_PP_OC_RT
						   ("EFFECTIVE_DATE",
						    "FEATURE_CODE",
						    "NO_OF_INSTALLMENTS",
						    "PAYMENT_INTERVAL",
						    "SOC",
						    "EFF_DT")
				    VALUES (OC_RT."EFFECTIVE_DATE",
						    OC_RT."FEATURE_CODE",
						    OC_RT."NO_OF_INSTALLMENTS",
						    OC_RT."PAYMENT_INTERVAL",
						    OC_RT."SOC",
						    OC_RT."REFERENCE_EFFECTIVE_DT");

						   					   	    		
			   INSERT INTO #UPDATE_EH_DELETION
						   ("EFFECTIVE_DATE",
						    "FEATURE_CODE",
						    "NO_OF_INSTALLMENTS",
						    "PAYMENT_INTERVAL",
						    "SOC",
						    "REFERENCE_EFFECTIVE_DT")
				    VALUES (OC_RT."EFFECTIVE_DATE",
						    OC_RT."FEATURE_CODE",
						    OC_RT."NO_OF_INSTALLMENTS",
						    OC_RT."PAYMENT_INTERVAL",
						    OC_RT."SOC",
						    OC_RT."REFERENCE_EFFECTIVE_DT");

    ELSEIF OC_RT.FLAG_EXISTING_RECORD = 'I' THEN
    
       BEGIN AUTONOMOUS TRANSACTION  
    
--    Insert the Incoming new record			   
		 INSERT INTO "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_OC_RT"(
		 	 			"EFFECTIVE_DATE",
	 					"ODS_SYST_CD",
	 					"EXPIRATION_DATE",
	 					"FEATURE_CODE",
	 					"NO_OF_INSTALLMENTS",
	 					"PAYMENT_INTERVAL",
	 					"RATE",
	 					"SOC",
	 					"REFERENCE_EFFECTIVE_DT",
	 					"REFERENCE_EXPIRY_DT",
						"INSERT_TS",
						"MODIFIED_TS")
				 VALUES(OC_RT."EFFECTIVE_DATE",
	 					OC_RT."ODS_SYST_CD",
	 					OC_RT."EXPIRATION_DATE",
	 					OC_RT."FEATURE_CODE",
	 					OC_RT."NO_OF_INSTALLMENTS",
	 					OC_RT."PAYMENT_INTERVAL",
	 					OC_RT."RATE",
	 					OC_RT."SOC",
	 					OC_RT."REFERENCE_EFFECTIVE_DT",
	 					OC_RT."REFERENCE_EXPIRY_DT",
					    LV_CUR_UTC,
					    LV_CUR_UTC);

		END ; -- END AUTONOMOUS TRANSACTION 

--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records	

			   INSERT INTO #UPDATE_INT_PP_OC_RT
						   ("EFFECTIVE_DATE",
						    "FEATURE_CODE",
						    "NO_OF_INSTALLMENTS",
						    "PAYMENT_INTERVAL",
						    "SOC",
						    "EFF_DT")
				    VALUES (OC_RT."EFFECTIVE_DATE",
						    OC_RT."FEATURE_CODE",
						    OC_RT."NO_OF_INSTALLMENTS",
						    OC_RT."PAYMENT_INTERVAL",
						    OC_RT."SOC",
						    OC_RT."REFERENCE_EFFECTIVE_DT");

						   					   	    		
			   INSERT INTO #UPDATE_EH_DELETION
						   ("EFFECTIVE_DATE",
						    "FEATURE_CODE",
						    "NO_OF_INSTALLMENTS",
						    "PAYMENT_INTERVAL",
						    "SOC",
						    REFERENCE_EFFECTIVE_DT)
				    VALUES (OC_RT."EFFECTIVE_DATE",
						    OC_RT."FEATURE_CODE",
						    OC_RT."NO_OF_INSTALLMENTS",
						    OC_RT."PAYMENT_INTERVAL",
						    OC_RT."SOC",
						    OC_RT."REFERENCE_EFFECTIVE_DT");
						    
     END IF;   
    END IF;
   END IF;
  END IF;
END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::INT_PP_RC_RT
UPDATE "LAND"."IFRS_R1.LAND::INT_PP_OC_RT" A
  FROM "LAND"."IFRS_R1.LAND::INT_PP_OC_RT" A 
 INNER JOIN #UPDATE_INT_PP_OC_RT B 
    ON  A."EFFECTIVE_DATE"      = B."EFFECTIVE_DATE"
    AND A."FEATURE_CODE"        = B."FEATURE_CODE"
    AND A."NO_OF_INSTALLMENTS"  = B."NO_OF_INSTALLMENTS"
    AND A."PAYMENT_INTERVAL"    = B."PAYMENT_INTERVAL"
    AND A."SOC"                 = B."SOC"
    AND A.EFF_DT                = B.EFF_DT
    SET NDB_TS                  = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_OC_RT_EH" A
  FROM "NDB_INTERNET"."IFRS_R1.INTERNET.NDB_INTERNET::INT_PP_OC_RT_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."EFFECTIVE_DATE"        = B."EFFECTIVE_DATE"
    AND A."FEATURE_CODE"         = B."FEATURE_CODE"
    AND A."NO_OF_INSTALLMENTS"   = B."NO_OF_INSTALLMENTS"
    AND A."PAYMENT_INTERVAL"     = B."PAYMENT_INTERVAL"
    AND A."SOC"                  = B."SOC"
    AND A.REFERENCE_EFFECTIVE_DT = B.REFERENCE_EFFECTIVE_DT 
   SET (DELETE_DATE, DELETED)    = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

       OP_STATUS := LC_ERROR_TEXT;
			
    ELSE
 
  	   OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;					   	
