PROCEDURE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::SP_OB_CHARGE_INFO" 
(IN  IP_EFF_DT DATE,
 OUT OP_STATUS NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
----------------------------------------------------------------------
-- Procedure Title : SP_OB_CHARGE_INFO
-- Created By      : BC_EY96110 (Arpit)       
-- Create Date     : 15-03-2017
-- Description     : Data Inserted using Calculation View - CA_IFRS_CHARGE_INFO
--                   To NDB Table - OB_CHARGE_INFO Using this stored procedure.
--                   OB_CHARGE_INFO includes data from table LANDING IFRS_OB_CHARGE_INFO	
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG    INTEGER := 0;
DECLARE LV_PREV_RECORD	      NVARCHAR(100) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------   
DECLARE CURSOR OB_CHARGE_INFO FOR
				SELECT   "FEATURE_CODE",
						 "CHARGE_TYPE",
						 "FTR_REVENUE_CODE",
						 "GL_CHARGE_TYPE",
						 "INVOICE_TYPE",
						 "GL_CLASSIF_CODE",
						 "PROFIT_CENTER",
						 "EFF_DT",
						 "REFERENCE_EFFECTIVE_DT",
						 "REFERENCE_EXPIRY_DT",
						 "FLAG_EXISTING_RECORD",
						 "EFFECTIVE_DATE_PREV_DAY",
						 "ERROR_CODE",
						 "ERROR_STATUS",
						 "CONCAT_PK" 
                  FROM   "_SYS_BIC"."IFRS_R1.COMMON_COMP.NDB_COMMON/CA_IFRS_OB_CHARGE_INFO"
					     (PLACEHOLDER."$$IP_EFF_DT$$" => :IP_EFF_DT)
			  ORDER BY   "FEATURE_CODE","CHARGE_TYPE","FTR_REVENUE_CODE","REFERENCE_EFFECTIVE_DT";	  	     
			
----------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-----------------------------------------------------------------------------------------------------

CREATE LOCAL TEMPORARY TABLE #UPDATE_IFRS_CHARGE_INFO ("FEATURE_CODE" NVARCHAR(6),"CHARGE_TYPE" NVARCHAR(1),"FTR_REVENUE_CODE" NVARCHAR(3),"EFF_DT" DATE);
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION ("FEATURE_CODE" NVARCHAR(100),"CHARGE_TYPE" NVARCHAR(100),"FTR_REVENUE_CODE" NVARCHAR(100),"REFERENCE_EFFECTIVE_DT" NVARCHAR(100)); 
 
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 
FOR CHRG_INFO AS OB_CHARGE_INFO DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
	-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
 	  
	 --  Insert record into error table	 
	     INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_CHARGE_INFO_EH"(
                     "FEATURE_CODE",
				     "CHARGE_TYPE",
					 "FTR_REVENUE_CODE",
					 "GL_CHARGE_TYPE",
					 "INVOICE_TYPE",
					 "GL_CLASSIF_CODE",
					 "PROFIT_CENTER",
					 "REFERENCE_EFFECTIVE_DT",
					 "REFERENCE_EXPIRY_DT",
					 "ERROR_CODE",
					 "TECHNICAL_MESSAGE",
					 "ERROR_CREATE_TS")
		VALUES      (CHRG_INFO."FEATURE_CODE",
				     CHRG_INFO."CHARGE_TYPE",
					 CHRG_INFO."FTR_REVENUE_CODE",
					 CHRG_INFO."GL_CHARGE_TYPE",
					 CHRG_INFO."INVOICE_TYPE",
					 CHRG_INFO."GL_CLASSIF_CODE",
					 CHRG_INFO."PROFIT_CENTER",
					 CHRG_INFO."EFF_DT", 				-- EFF_DT from source is populated in REFERENCE_EFFECTIVE_DT column in EH table
					 CHRG_INFO."REFERENCE_EXPIRY_DT",
					 ::SQL_ERROR_CODE,
		             ::SQL_ERROR_MESSAGE,
		             LV_CUR_UTC);
		             
	  	LV_ERROR_FLAG := 'Y';
		
		LV_LOOP_ERROR_FLAG := 1;
	  	    
         
    END;
    
    -- FOR CLEARING THE VARIABLES

	IF ((LV_PREV_RECORD IS NULL )OR (CHRG_INFO."CONCAT_PK" != LV_PREV_RECORD)) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_RECORD := "CHRG_INFO"."CONCAT_PK";
		
    END IF;
    
     
--  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF CHRG_INFO.ERROR_STATUS = '1'  THEN
	
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CHRG_INFO."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		   INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_CHARGE_INFO_EH"(
                     "FEATURE_CODE",
				     "CHARGE_TYPE",
					 "FTR_REVENUE_CODE",
					 "GL_CHARGE_TYPE",
					 "INVOICE_TYPE",
					 "GL_CLASSIF_CODE",
					 "PROFIT_CENTER",
					 "REFERENCE_EFFECTIVE_DT",
					 "REFERENCE_EXPIRY_DT",
					 "INSERT_TS",
					 "ERROR_CODE",
					 "ERROR_CREATE_TS")
		VALUES      (CHRG_INFO."FEATURE_CODE",
				     CHRG_INFO."CHARGE_TYPE",
					 CHRG_INFO."FTR_REVENUE_CODE",
					 CHRG_INFO."GL_CHARGE_TYPE",
					 CHRG_INFO."INVOICE_TYPE",
					 CHRG_INFO."GL_CLASSIF_CODE",
					 CHRG_INFO."PROFIT_CENTER",
					 CHRG_INFO."EFF_DT", 				-- EFF_DT from source is populated in REFERENCE_EFFECTIVE_DT column in EH table
					 CHRG_INFO."REFERENCE_EXPIRY_DT",
					 LV_CUR_UTC,
					 :CURRENT_ERROR,
		             LV_CUR_UTC);
         	
			
		END FOR;
		
		-- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';
		    LV_LOOP_ERROR_FLAG := 1;
	    
	
-- Processing for Successful Records
   ELSE 
         IF CHRG_INFO.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
	         INSERT INTO "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_CHARGE_INFO_EH"(
                     "FEATURE_CODE",
				     "CHARGE_TYPE",
					 "FTR_REVENUE_CODE",
					 "GL_CHARGE_TYPE",
					 "INVOICE_TYPE",
					 "GL_CLASSIF_CODE",
					 "PROFIT_CENTER",
					 "REFERENCE_EFFECTIVE_DT",
					 "REFERENCE_EXPIRY_DT",
					 "INSERT_TS",
					 "ERROR_CODE",
					 "ERROR_CREATE_TS")
		VALUES      (CHRG_INFO."FEATURE_CODE",
				     CHRG_INFO."CHARGE_TYPE",
					 CHRG_INFO."FTR_REVENUE_CODE",
					 CHRG_INFO."GL_CHARGE_TYPE",
					 CHRG_INFO."INVOICE_TYPE",
					 CHRG_INFO."GL_CLASSIF_CODE",
					 CHRG_INFO."PROFIT_CENTER",
					 CHRG_INFO."EFF_DT", 				-- EFF_DT from source is populated in REFERENCE_EFFECTIVE_DT column in EH table
					 CHRG_INFO."REFERENCE_EXPIRY_DT",
					 LV_CUR_UTC,
					 'PREVIOUS VERSION IN ERROR',
		             LV_CUR_UTC);
         
--  Processing for Successful Records   

--  If Record exists in the Target NDB Table
    ELSE 
    IF CHRG_INFO.FLAG_EXISTING_RECORD = 'U' THEN
    
       BEGIN AUTONOMOUS TRANSACTION 

	--     Update the target NDB table
		   UPDATE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_CHARGE_INFO" NDB 
			  SET  NDB.REFERENCE_EXPIRY_DT      = CHRG_INFO.EFFECTIVE_DATE_PREV_DAY,
		 		   NDB.MODIFIED_TS              = LV_CUR_UTC 
        	 WHERE CHRG_INFO."FEATURE_CODE"     = NDB."FEATURE_CODE" 
			   AND CHRG_INFO."CHARGE_TYPE"      = NDB."CHARGE_TYPE" 
			   AND CHRG_INFO."FTR_REVENUE_CODE" = NDB."FTR_REVENUE_CODE"
			   AND NDB.REFERENCE_EXPIRY_DT      = '99991231';	
				   
		 --     Insert the Incoming new record
		        INSERT INTO  "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_CHARGE_INFO"(
		                     "FEATURE_CODE",
						     "CHARGE_TYPE",
							 "FTR_REVENUE_CODE",
							 "GL_CHARGE_TYPE",
							 "INVOICE_TYPE",
							 "GL_CLASSIF_CODE",
							 "PROFIT_CENTER",
							 "REFERENCE_EFFECTIVE_DT",
							 "REFERENCE_EXPIRY_DT",
							 "INSERT_TS")
				     VALUES (CHRG_INFO."FEATURE_CODE",
						     CHRG_INFO."CHARGE_TYPE",
							 CHRG_INFO."FTR_REVENUE_CODE",
							 CHRG_INFO."GL_CHARGE_TYPE",
							 CHRG_INFO."INVOICE_TYPE",
							 CHRG_INFO."GL_CLASSIF_CODE",
							 CHRG_INFO."PROFIT_CENTER",
							 CHRG_INFO."EFF_DT",
							 CHRG_INFO."REFERENCE_EXPIRY_DT",
		                     LV_CUR_UTC);
       END;
  
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_IFRS_CHARGE_INFO
					   ("FEATURE_CODE",  
					    "CHARGE_TYPE",
					    "FTR_REVENUE_CODE",
					    "EFF_DT") 
			    VALUES (CHRG_INFO."FEATURE_CODE",  
					    CHRG_INFO."CHARGE_TYPE",
					    CHRG_INFO."FTR_REVENUE_CODE",
					    CHRG_INFO."EFF_DT");
					     		   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("FEATURE_CODE",  
					    "CHARGE_TYPE",
					    "FTR_REVENUE_CODE",
					    "REFERENCE_EFFECTIVE_DT") 
			    VALUES (CHRG_INFO."FEATURE_CODE",  
					    CHRG_INFO."CHARGE_TYPE",
					    CHRG_INFO."FTR_REVENUE_CODE",
					    CHRG_INFO."EFF_DT");
					   	
     ELSEIF CHRG_INFO.FLAG_EXISTING_RECORD = 'I' THEN
    
     BEGIN AUTONOMOUS TRANSACTION
     	 --     Insert Records into the target NDB table
		        INSERT INTO  "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_CHARGE_INFO"(
		                     "FEATURE_CODE",
						     "CHARGE_TYPE",
							 "FTR_REVENUE_CODE",
							 "GL_CHARGE_TYPE",
							 "INVOICE_TYPE",
							 "GL_CLASSIF_CODE",
							 "PROFIT_CENTER",
							 "REFERENCE_EFFECTIVE_DT",
							 "REFERENCE_EXPIRY_DT",
							 "INSERT_TS")
				     VALUES (CHRG_INFO."FEATURE_CODE",
						     CHRG_INFO."CHARGE_TYPE",
							 CHRG_INFO."FTR_REVENUE_CODE",
							 CHRG_INFO."GL_CHARGE_TYPE",
							 CHRG_INFO."INVOICE_TYPE",
							 CHRG_INFO."GL_CLASSIF_CODE",
							 CHRG_INFO."PROFIT_CENTER",
							 CHRG_INFO."REFERENCE_EFFECTIVE_DT",
							 CHRG_INFO."REFERENCE_EXPIRY_DT",
		                     LV_CUR_UTC);
		     END;                
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_IFRS_CHARGE_INFO
					   ("FEATURE_CODE",  
					    "CHARGE_TYPE",
					    "FTR_REVENUE_CODE",
					    "EFF_DT") 
			    VALUES (CHRG_INFO."FEATURE_CODE",  
					    CHRG_INFO."CHARGE_TYPE",
					    CHRG_INFO."FTR_REVENUE_CODE",
					    CHRG_INFO."EFF_DT");
					     		   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("FEATURE_CODE",  
					    "CHARGE_TYPE",
					    "FTR_REVENUE_CODE",
					    "REFERENCE_EFFECTIVE_DT") 
			    VALUES (CHRG_INFO."FEATURE_CODE",  
					    CHRG_INFO."CHARGE_TYPE",
					    CHRG_INFO."FTR_REVENUE_CODE",
					    CHRG_INFO."EFF_DT");
					   	
     END IF;   
    END IF;
   END IF;
  END IF; 
END FOR;	

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::IFRS_OB_CHRG_INFO
UPDATE "LAND"."IFRS_R1.LAND::IFRS_OB_CHARGE_INFO"  A
  FROM "LAND"."IFRS_R1.LAND::IFRS_OB_CHARGE_INFO"  A
 INNER JOIN #UPDATE_IFRS_CHARGE_INFO B
    ON A."FEATURE_CODE"      = B."FEATURE_CODE"
   AND A."CHARGE_TYPE"       = B."CHARGE_TYPE"
   AND A."FTR_REVENUE_CODE"  = B."FTR_REVENUE_CODE"
   AND A."EFF_DT"            = B."EFF_DT"
   SET NDB_TS                = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_CHARGE_INFO_EH" A
  FROM "NDB_COMMON"."IFRS_R1.COMMON_COMP.NDB_COMMON::OB_CHARGE_INFO_EH" A
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."FEATURE_CODE"           = B."FEATURE_CODE"
   AND A."CHARGE_TYPE"            = B."CHARGE_TYPE"
   AND A."FTR_REVENUE_CODE"       = B."FTR_REVENUE_CODE"
   AND A."REFERENCE_EFFECTIVE_DT" = B."REFERENCE_EFFECTIVE_DT"
   SET (DELETE_DATE, DELETED)     = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
	
END;
