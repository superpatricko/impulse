PROCEDURE "NDB_HP"."IFRS_R1.HP.NDB_HP::SP_CBSS_CUST_ON_BUSINESS"
(IN IP_CYCL_ID NVARCHAR(3),
OUT OP_STATUS  NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_CBSS_CUST_ON_BUSINESS
-- Created By      : BC_EZ08929 (Shivam Prakash)       
-- Create Date     : 03-18-2017
-- Description     : Data Inserted using Calculation View - CA_CBSS_CUST_ON_BUSINES
--                   To NDB Table - HP_CUSTOMER Using this stored procedure.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE LV_PREV_DAY         DATE;
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);  
-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG  INTEGER := 0;
DECLARE LV_PREV_UNIQUE_IDENTIFIER  NVARCHAR(34) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------
DECLARE CURSOR C_CBSS_CUST_BUS FOR 
   SELECT  "CONTRACT_UNIQUE_IDENTIFIER",
	       "CBSS_ACC_STATUS",
	       "TO_BE_REBILL_IND",
	       "BILL_SYS_CODE",
	       "ACC_TYPE",
	       "CBSS_CAN",
	       "SUBSCRIBER_NUMBER",
	       "CYCL_ID",
	       --"FLAG_EXISTING_RECORD",
	       "REF_EFFECTIVE_DATE",
	       "SEQ_ID",
	       "INV_DATE",
	       "ERROR_STATUS",
		   "ERROR_CODE",
		   "CC_CONCAT_PK"
      FROM "_SYS_BIC"."IFRS_R1.HP.NDB_HP/CA_CBSS_CUST_ON_BUSINES"
           (PLACEHOLDER."$$IP_CYCL_ID$$" => :IP_CYCL_ID)
           ORDER BY CONTRACT_UNIQUE_IDENTIFIER, SUBSCRIBER_NUMBER, INV_DATE, CYCL_ID, SEQ_ID;
                   
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_CBSS_CUST_ON_BUSINESS (INV_DATE DATE, CAN NVARCHAR(10), INV_NO NVARCHAR(16), CYCL_ID NVARCHAR(3));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (CONTRACT_UNIQUE_IDENTIFIER NVARCHAR(20), SUBSCRIBER_NUMBER NVARCHAR(16));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 

FOR C_CBSS_CUST AS C_CBSS_CUST_BUS DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 
	
      -- Do Nothing. Exception Handled to ensure SP does not get terminated
	
	  END; 
			
   -- Insert record into error table
   	  INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER_EH"(
		   	      "CONTRACT_UNIQUE_IDENTIFIER",
	              "CBSS_ACC_STATUS",
	              "TO_BE_REBILL_IND",
	              "BILL_SYS_CODE",
	              "ACC_TYPE",
	              "CBSS_CAN",
	              "SUBSCRIBER_NUMBER",
	              "REF_EFFECTIVE_DATE",
				  "ERROR_CODE",
				  "TECHNICAL_MESSAGE",
			      "ERROR_CREATE_TS") 
		   VALUES (C_CBSS_CUST."CONTRACT_UNIQUE_IDENTIFIER",
	               C_CBSS_CUST."CBSS_ACC_STATUS",
	               C_CBSS_CUST."TO_BE_REBILL_IND",
	               C_CBSS_CUST."BILL_SYS_CODE",
	               C_CBSS_CUST."ACC_TYPE",
	               C_CBSS_CUST."CBSS_CAN",
	               C_CBSS_CUST."SUBSCRIBER_NUMBER",
	               C_CBSS_CUST."REF_EFFECTIVE_DATE",
				   ::SQL_ERROR_CODE,
		           ::SQL_ERROR_MESSAGE,
		           LV_CUR_UTC);   
   
	  	LV_ERROR_FLAG := 'Y';
	  	LV_LOOP_ERROR_FLAG := 1;
     END;
     
	--------------------------------------------------------------------------------------------------------	
	-- FOR CLEARING THE VARIABLES
	IF (LV_PREV_UNIQUE_IDENTIFIER IS NULL OR C_CBSS_CUST."CC_CONCAT_PK" != LV_PREV_UNIQUE_IDENTIFIER) THEN
		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_UNIQUE_IDENTIFIER := C_CBSS_CUST."CC_CONCAT_PK";			 	   
    END IF;    
	--------------------------------------------------------------------------------------------------------
    
    --  Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF C_CBSS_CUST."ERROR_STATUS" = 1 THEN 
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(C_CBSS_CUST."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		 -- Insert into the Error Table
			INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER_EH"
						("CONTRACT_UNIQUE_IDENTIFIER",
	                    "CBSS_ACC_STATUS",
	                    "TO_BE_REBILL_IND",
	                    "BILL_SYS_CODE",
	                    "ACC_TYPE",
	                    "CBSS_CAN",
	                    "SUBSCRIBER_NUMBER",
						"INSERT_TS",
						"REF_EFFECTIVE_DATE",
				        "ERROR_CODE",
				        "ERROR_CREATE_TS")
				VALUES (C_CBSS_CUST."CONTRACT_UNIQUE_IDENTIFIER",
	                    C_CBSS_CUST."CBSS_ACC_STATUS",
	                    C_CBSS_CUST."TO_BE_REBILL_IND",
	                    C_CBSS_CUST."BILL_SYS_CODE",
	                    C_CBSS_CUST."ACC_TYPE",
	                    C_CBSS_CUST."CBSS_CAN",
	                    C_CBSS_CUST."SUBSCRIBER_NUMBER",
						LV_CUR_UTC,
						C_CBSS_CUST."REF_EFFECTIVE_DATE",
						:CURRENT_ERROR,
				        LV_CUR_UTC);
		 -- End for inner for loop. 	       		
		 END FOR;
		
		    -- Set Error Flag				        
			LV_ERROR_FLAG := 'Y';	
			LV_LOOP_ERROR_FLAG := 1;
		    	
-- Processing for Successful Records
   ELSE 
         IF C_CBSS_CUST.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
	        -- Insert into the Error Table
			INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER_EH"
						("CONTRACT_UNIQUE_IDENTIFIER",
	                    "CBSS_ACC_STATUS",
	                    "TO_BE_REBILL_IND",
	                    "BILL_SYS_CODE",
	                    "ACC_TYPE",
	                    "CBSS_CAN",
	                    "SUBSCRIBER_NUMBER",
						"INSERT_TS",
						"REF_EFFECTIVE_DATE",
				        "ERROR_CODE",
				        "ERROR_CREATE_TS")
				VALUES (C_CBSS_CUST."CONTRACT_UNIQUE_IDENTIFIER",
	                    C_CBSS_CUST."CBSS_ACC_STATUS",
	                    C_CBSS_CUST."TO_BE_REBILL_IND",
	                    C_CBSS_CUST."BILL_SYS_CODE",
	                    C_CBSS_CUST."ACC_TYPE",
	                    C_CBSS_CUST."CBSS_CAN",
	                    C_CBSS_CUST."SUBSCRIBER_NUMBER",
						LV_CUR_UTC,
						C_CBSS_CUST."REF_EFFECTIVE_DATE",
						:CURRENT_ERROR,
				        LV_CUR_UTC);					        									
				ELSE      
 -- If Record exists in the Target NDB Table
 --   IF C_CBSS_CUST.FLAG_EXISTING_RECORD = 'U' THEN

 --    Update the target NDB table
   	      UPDATE  "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER" NDB
   	      SET     (CBSS_ACC_STATUS,
                   TO_BE_REBILL_IND,
                   BILL_SYS_CODE,
                   ACC_TYPE,
                   CBSS_CAN,
			       MODIFIED_TS)
		          =(C_CBSS_CUST.CBSS_ACC_STATUS,
	                C_CBSS_CUST.TO_BE_REBILL_IND,
	                C_CBSS_CUST.BILL_SYS_CODE,
	                C_CBSS_CUST.ACC_TYPE,
	                C_CBSS_CUST.CBSS_CAN,
			        LV_CUR_UTC)        
		  WHERE  NDB.SUBSCRIBER_NUMBER             = C_CBSS_CUST."SUBSCRIBER_NUMBER"
		  AND    NDB.CONTRACT_UNIQUE_IDENTIFIER    = C_CBSS_CUST."CONTRACT_UNIQUE_IDENTIFIER" 
		  AND    NDB."REF_EXPIRY_DATE"			   = TO_DATE('99991231','YYYYMMDD');
		--AND    NDB.REF_EFFECTIVE_DATE            = C_CBSS_CUST."REF_EFFECTIVE_DATE"; 	        
		    
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records
		   INSERT INTO #UPDATE_CBSS_CUST_ON_BUSINESS
		   			   (INV_DATE,
		   			    CAN,
		   			    INV_NO, 
		   			    CYCL_ID) 
		   		VALUES (C_CBSS_CUST."INV_DATE",
		   		        C_CBSS_CUST."CBSS_CAN",
		   		        left(C_CBSS_CUST."SUBSCRIBER_NUMBER",10), 
		   				C_CBSS_CUST."CYCL_ID");
		   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
		   			   (CONTRACT_UNIQUE_IDENTIFIER,
		   			    SUBSCRIBER_NUMBER) 
		   		VALUES (C_CBSS_CUST."CONTRACT_UNIQUE_IDENTIFIER",
		   		        C_CBSS_CUST."SUBSCRIBER_NUMBER");    
	       		END IF ;
			END IF;
	    END IF;
	END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::CBSS_CUST_ON_BUSINES
UPDATE "LAND"."IFRS_R1.LAND::CBSS_CUST_ON_BUSINES" A
  FROM "LAND"."IFRS_R1.LAND::CBSS_CUST_ON_BUSINES" A 
 INNER JOIN #UPDATE_CBSS_CUST_ON_BUSINESS B 
    ON A."INV_DATE"                    = B."INV_DATE"
   AND A."CAN"                         = B."CAN"
   AND left(A."INV_NO" ,10)            = B."INV_NO"
   AND A."CYCL_ID"                     = B."CYCL_ID"
   SET NDB_TS = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER_EH" A
  FROM "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_CUSTOMER_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
   ON A."CONTRACT_UNIQUE_IDENTIFIER"                      = B."CONTRACT_UNIQUE_IDENTIFIER"
   AND A."SUBSCRIBER_NUMBER"                              = B."SUBSCRIBER_NUMBER"
   SET (DELETE_DATE, DELETED)                             = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;