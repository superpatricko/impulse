PROCEDURE "NDB_HP"."IFRS_R1.HP.NDB_HP::SP_MDM_TEL_BILL_CD"
(IN IP_CYCL_ID NVARCHAR(3),
OUT OP_STATUS  NVARCHAR(100)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS

BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_MDM_TEL_BILL_CD
-- Created By      : BC_EZ08929 (Shivam)       
-- Create Date     : 03-15-2017
-- Description     : Data Inserted using Calculation View - CA_MDM_TEL_BILL_CD
--                   To NDB Table - HP_MDM_BILL_CD Using this stored procedure.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE LV_PREV_DAY         DATE;
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG        INTEGER := 0;
DECLARE LV_PREV_UNIQUE_KEY		  NVARCHAR(100) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------
DECLARE CURSOR C_BILL_CD FOR 
   SELECT "CD_NM",
	      "PROD_SHRT_NM",
	      "REF_EFFC_DT",
	      "REF_EXP_DT",
	      "ATTR_ENG_NM",
	      "ATTR_FR_NM",
	      "ATTR_SHRT_NM",
	      "ATTR_VAL_ENG_NM",
	      "ATTR_VAL_FR_NM",
	      "ATTR_VAL_SHRT_NM",
	      "CAT",
	      "CD_TY",
	      "ELIG_LOBS",
	      "LOB_NM",
	      "MANDT_LOBS",
	      "OFFR_TY",
	      "PROD_ENG_NM",
	      "PROD_FR_NM",
	      "REQ_NUM_OF_NEW_LOB_SEL",
	      "SEL_OPERTR",
	      "STOP_SOLD_DT",
	      "STRT_SELL_DT",
	      "CYCL_ID",
	      "FLAG_EXISTING_RECORD",
	      "SEQ_ID",
	      "TEL_BILL_CD_PRIMARY_KEY" ,
	      "NDB_CC_REF_EFFC_DT",
	      "ERROR_STATUS",
	      "ERROR_CODE",
	      "SRC_TS",
	      "CC_UNIQUE_KEY"
     FROM "_SYS_BIC"."IFRS_R1.HP.NDB_HP/CA_MDM_TEL_BILL_CD"
          (PLACEHOLDER."$$IP_CYCL_ID$$" => :IP_CYCL_ID)
          ORDER BY CD_NM, PROD_SHRT_NM, CYCL_ID, SEQ_ID ;
                   
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
-------------------------------------------------------------------------------------------------- 

CREATE LOCAL TEMPORARY TABLE #UPDATE_MDM_TEL_BILL_CD (TEL_BILL_CD_PRIMARY_KEY NVARCHAR(100));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION (PROD_SHRT_NM NVARCHAR(30), CD_NM NVARCHAR(40));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 

FOR CUR_BILL_CD AS C_BILL_CD DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 
	
      -- Do Nothing. Exception Handled to ensure SP does not get terminated
	
	  END; 
	
   -- Insert record into error table
   	  INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_MDM_BILL_CD_EH"(
		   	      "CD_NM",
	              "PROD_SHRT_NM",
                  "REF_EFFC_DT",
	              "REF_EXP_DT",	              
	              "ATTR_ENG_NM",
	              "ATTR_FR_NM",
	              "ATTR_SHRT_NM",
	              "ATTR_VAL_ENG_NM",
	              "ATTR_VAL_FR_NM",
	              "ATTR_VAL_SHRT_NM", 
	              "CAT",
			      "CD_TY",
			      "ELIG_LOBS",
			      "LOB_NM",
			      "MANDT_LOBS",
			      "OFFR_TY",
			      "PROD_ENG_NM",
			      "PROD_FR_NM",
			      "REQ_NUM_OF_NEW_LOB_SEL",
			      "SEL_OPERTR",
			      "STOP_SOLD_DT",
			      "STRT_SELL_DT",
				  "ERROR_CODE",
				  "TECHNICAL_MESSAGE",
			      "ERROR_CREATE_TS") 
		   VALUES (CUR_BILL_CD."CD_NM",
	               CUR_BILL_CD."PROD_SHRT_NM",
	               CUR_BILL_CD."SRC_TS",
	               CUR_BILL_CD."REF_EXP_DT",
	               CUR_BILL_CD."ATTR_ENG_NM",
	               CUR_BILL_CD."ATTR_FR_NM",
	               CUR_BILL_CD."ATTR_SHRT_NM",
	               CUR_BILL_CD."ATTR_VAL_ENG_NM",
	               CUR_BILL_CD."ATTR_VAL_FR_NM",
	               CUR_BILL_CD."ATTR_VAL_SHRT_NM",
	               CUR_BILL_CD."CAT",
			       CUR_BILL_CD."CD_TY",
			       CUR_BILL_CD."ELIG_LOBS",
			       CUR_BILL_CD."LOB_NM",
			       CUR_BILL_CD."MANDT_LOBS",
			       CUR_BILL_CD."OFFR_TY",
			       CUR_BILL_CD."PROD_ENG_NM",
			       CUR_BILL_CD."PROD_FR_NM",
			       CUR_BILL_CD."REQ_NUM_OF_NEW_LOB_SEL",
			       CUR_BILL_CD."SEL_OPERTR",
			       CUR_BILL_CD."STOP_SOLD_DT",
			       CUR_BILL_CD."STRT_SELL_DT",
				   ::SQL_ERROR_CODE,
		           ::SQL_ERROR_MESSAGE,
		           LV_CUR_UTC);   
   
	  	LV_ERROR_FLAG := 'Y';
	  	LV_LOOP_ERROR_FLAG := 1;
    
    END;
    
   -- FOR CLEARING THE VARIABLES
   IF (LV_PREV_UNIQUE_KEY IS NULL OR CUR_BILL_CD."CC_UNIQUE_KEY" != LV_PREV_UNIQUE_KEY) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_UNIQUE_KEY := "CUR_BILL_CD"."CC_UNIQUE_KEY";
			 	   
   END IF;

-- Check the Error Status of the Record. If Record is with Error, then send to Error Table
   IF CUR_BILL_CD.ERROR_STATUS = '1' THEN
	
	--  Call the Stored Procedure to split the concatenated Error Messages into Error Rows
		CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(CUR_BILL_CD."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

     -- Loop through the Error Records
		FOR i IN 1 .. :RECORD_COUNT DO
			
		 -- Fetch the Error Code
			CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
		 -- Insert into the Error Table
			INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_MDM_BILL_CD_EH"(
		   	      "CD_NM",
	              "PROD_SHRT_NM",
                  "REF_EFFC_DT",
	              "REF_EXP_DT",	              
	              "ATTR_ENG_NM",
	              "ATTR_FR_NM",
	              "ATTR_SHRT_NM",
	              "ATTR_VAL_ENG_NM",
	              "ATTR_VAL_FR_NM",
	              "ATTR_VAL_SHRT_NM", 
	              "CAT",
			      "CD_TY",
			      "ELIG_LOBS",
			      "LOB_NM",
			      "MANDT_LOBS",
			      "OFFR_TY",
			      "PROD_ENG_NM",
			      "PROD_FR_NM",
			      "REQ_NUM_OF_NEW_LOB_SEL",
			      "SEL_OPERTR",
			      "STOP_SOLD_DT",
			      "STRT_SELL_DT",
				  "ERROR_CODE",
				  "ERROR_CREATE_TS") 
		   VALUES (CUR_BILL_CD."CD_NM",
	               CUR_BILL_CD."PROD_SHRT_NM",
	               CUR_BILL_CD."SRC_TS",
	               CUR_BILL_CD."REF_EXP_DT",
	               CUR_BILL_CD."ATTR_ENG_NM",
	               CUR_BILL_CD."ATTR_FR_NM",
	               CUR_BILL_CD."ATTR_SHRT_NM",
	               CUR_BILL_CD."ATTR_VAL_ENG_NM",
	               CUR_BILL_CD."ATTR_VAL_FR_NM",
	               CUR_BILL_CD."ATTR_VAL_SHRT_NM",
	               CUR_BILL_CD."CAT",
			       CUR_BILL_CD."CD_TY",
			       CUR_BILL_CD."ELIG_LOBS",
			       CUR_BILL_CD."LOB_NM",
			       CUR_BILL_CD."MANDT_LOBS",
			       CUR_BILL_CD."OFFR_TY",
			       CUR_BILL_CD."PROD_ENG_NM",
			       CUR_BILL_CD."PROD_FR_NM",
			       CUR_BILL_CD."REQ_NUM_OF_NEW_LOB_SEL",
			       CUR_BILL_CD."SEL_OPERTR",
			       CUR_BILL_CD."STOP_SOLD_DT",
			       CUR_BILL_CD."STRT_SELL_DT",						 
			       :CURRENT_ERROR,
				   LV_CUR_UTC); 					
			
		END FOR;
						         		        
       -- Set Error Flag				        
	    LV_ERROR_FLAG := 'Y';
	    LV_LOOP_ERROR_FLAG := 1;

-- Processing for Successful Records
   ELSE

     IF CUR_BILL_CD.ERROR_STATUS = '0' THEN
	    
	   IF LV_LOOP_ERROR_FLAG = 1 THEN
	        
	     INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_MDM_BILL_CD_EH"(
		   	      "CD_NM",
	              "PROD_SHRT_NM",
                  "REF_EFFC_DT",
	              "REF_EXP_DT",	              
	              "ATTR_ENG_NM",
	              "ATTR_FR_NM",
	              "ATTR_SHRT_NM",
	              "ATTR_VAL_ENG_NM",
	              "ATTR_VAL_FR_NM",
	              "ATTR_VAL_SHRT_NM", 
	              "CAT",
			      "CD_TY",
			      "ELIG_LOBS",
			      "LOB_NM",
			      "MANDT_LOBS",
			      "OFFR_TY",
			      "PROD_ENG_NM",
			      "PROD_FR_NM",
			      "REQ_NUM_OF_NEW_LOB_SEL",
			      "SEL_OPERTR",
			      "STOP_SOLD_DT",
			      "STRT_SELL_DT",
				  "ERROR_CODE",
				  "ERROR_CREATE_TS") 
		   VALUES (CUR_BILL_CD."CD_NM",
	               CUR_BILL_CD."PROD_SHRT_NM",
	               CUR_BILL_CD."SRC_TS",
	               CUR_BILL_CD."REF_EXP_DT",
	               CUR_BILL_CD."ATTR_ENG_NM",
	               CUR_BILL_CD."ATTR_FR_NM",
	               CUR_BILL_CD."ATTR_SHRT_NM",
	               CUR_BILL_CD."ATTR_VAL_ENG_NM",
	               CUR_BILL_CD."ATTR_VAL_FR_NM",
	               CUR_BILL_CD."ATTR_VAL_SHRT_NM",
	               CUR_BILL_CD."CAT",
			       CUR_BILL_CD."CD_TY",
			       CUR_BILL_CD."ELIG_LOBS",
			       CUR_BILL_CD."LOB_NM",
			       CUR_BILL_CD."MANDT_LOBS",
			       CUR_BILL_CD."OFFR_TY",
			       CUR_BILL_CD."PROD_ENG_NM",
			       CUR_BILL_CD."PROD_FR_NM",
			       CUR_BILL_CD."REQ_NUM_OF_NEW_LOB_SEL",
			       CUR_BILL_CD."SEL_OPERTR",
			       CUR_BILL_CD."STOP_SOLD_DT",
			       CUR_BILL_CD."STRT_SELL_DT",	
				   'PREVIOUS VERSION IN ERROR',
				   LV_CUR_UTC); 
      
       ELSE

--       If Record exists in the Target NDB Table
         IF CUR_BILL_CD.FLAG_EXISTING_RECORD = 'U' THEN
	  
	       BEGIN AUTONOMOUS TRANSACTION
	  
	--     Update the target NDB table
	       LV_PREV_DAY := ADD_DAYS(CUR_BILL_CD."REF_EFFC_DT", -1);
	      
	--     Update Expiry Date of Current NDB Record to New Record.Effective Date - 1
	       UPDATE "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_MDM_BILL_CD" NDB
	         SET NDB."REF_EXP_DT"        = ADD_DAYS(CUR_BILL_CD."REF_EFFC_DT", -1),
	             NDB."MODIFIED_TS"       = :LV_CUR_UTC
	       WHERE NDB."PROD_SHRT_NM"  = CUR_BILL_CD."PROD_SHRT_NM"
	         AND NDB."CD_NM"         = CUR_BILL_CD."CD_NM"
	         AND NDB."REF_EXP_DT"    = TO_DATE('99991231','YYYYMMDD');
	
	--     Insert the Incoming new record
	   	   INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_MDM_BILL_CD"(
			   	      "CD_NM",
				      "PROD_SHRT_NM",
				      "REF_EFFC_DT",
				      "REF_EXP_DT",
				      "ATTR_ENG_NM",
				      "ATTR_FR_NM",
				      "ATTR_SHRT_NM",
				      "ATTR_VAL_ENG_NM",
				      "ATTR_VAL_FR_NM",
				      "ATTR_VAL_SHRT_NM",
				      "CAT",
				      "CD_TY",
				      "ELIG_LOBS",
				      "LOB_NM",
				      "MANDT_LOBS",
				      "OFFR_TY",
				      "PROD_ENG_NM",
				      "PROD_FR_NM",
				      "REQ_NUM_OF_NEW_LOB_SEL",
				      "SEL_OPERTR",
				      "STOP_SOLD_DT",
				      "STRT_SELL_DT",
				      "INSERT_TS")
			   VALUES (CUR_BILL_CD."CD_NM",
		               CUR_BILL_CD."PROD_SHRT_NM",
		               CUR_BILL_CD."REF_EFFC_DT",
		               CUR_BILL_CD."REF_EXP_DT",
		               CUR_BILL_CD."ATTR_ENG_NM",
		               CUR_BILL_CD."ATTR_FR_NM",
		               CUR_BILL_CD."ATTR_SHRT_NM",
		               CUR_BILL_CD."ATTR_VAL_ENG_NM",
		               CUR_BILL_CD."ATTR_VAL_FR_NM",
		               CUR_BILL_CD."ATTR_VAL_SHRT_NM",
		               CUR_BILL_CD."CAT",
				       CUR_BILL_CD."CD_TY",
				       CUR_BILL_CD."ELIG_LOBS",
				       CUR_BILL_CD."LOB_NM",
				       CUR_BILL_CD."MANDT_LOBS",
				       CUR_BILL_CD."OFFR_TY",
				       CUR_BILL_CD."PROD_ENG_NM",
				       CUR_BILL_CD."PROD_FR_NM",
				       CUR_BILL_CD."REQ_NUM_OF_NEW_LOB_SEL",
				       CUR_BILL_CD."SEL_OPERTR",
				       CUR_BILL_CD."STOP_SOLD_DT",
				       CUR_BILL_CD."STRT_SELL_DT",
				       LV_CUR_UTC);  
	    END; 
	                
	--         Insert PK of successfully processed Records into Local Temp Tables 
	--         for Updating NDB_TS in corresponding Landing Tables records
			   INSERT INTO #UPDATE_MDM_TEL_BILL_CD			   			  
			   				(TEL_BILL_CD_PRIMARY_KEY)
			   				VALUES ( CUR_BILL_CD."TEL_BILL_CD_PRIMARY_KEY" );
			   					   	    		
			   INSERT INTO #UPDATE_EH_DELETION
			   			   (PROD_SHRT_NM, 
			   				CD_NM) 
			   		VALUES (CUR_BILL_CD."PROD_SHRT_NM", 
			   			    CUR_BILL_CD."CD_NM"); 	   			              
         ELSE
         
          BEGIN AUTONOMOUS TRANSACTION
	--    Insert Records into the target NDB table     
	   	  INSERT INTO "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_MDM_BILL_CD"(
			   	      "CD_NM",
				      "PROD_SHRT_NM",
				      "REF_EFFC_DT",
				      "REF_EXP_DT",
				      "ATTR_ENG_NM",
				      "ATTR_FR_NM",
				      "ATTR_SHRT_NM",
				      "ATTR_VAL_ENG_NM",
				      "ATTR_VAL_FR_NM",
				      "ATTR_VAL_SHRT_NM",
				      "CAT",
				      "CD_TY",
				      "ELIG_LOBS",
				      "LOB_NM",
				      "MANDT_LOBS",
				      "OFFR_TY",
				      "PROD_ENG_NM",
				      "PROD_FR_NM",
				      "REQ_NUM_OF_NEW_LOB_SEL",
				      "SEL_OPERTR",
				      "STOP_SOLD_DT",
				      "STRT_SELL_DT",
				      "INSERT_TS") 
			   VALUES (CUR_BILL_CD."CD_NM",
		               CUR_BILL_CD."PROD_SHRT_NM",
		               CUR_BILL_CD."NDB_CC_REF_EFFC_DT",--'19000101'
		               CUR_BILL_CD."REF_EXP_DT",
		               CUR_BILL_CD."ATTR_ENG_NM",
		               CUR_BILL_CD."ATTR_FR_NM",
		               CUR_BILL_CD."ATTR_SHRT_NM",
		               CUR_BILL_CD."ATTR_VAL_ENG_NM",
		               CUR_BILL_CD."ATTR_VAL_FR_NM",
		               CUR_BILL_CD."ATTR_VAL_SHRT_NM",
		               CUR_BILL_CD."CAT",
				       CUR_BILL_CD."CD_TY",
				       CUR_BILL_CD."ELIG_LOBS",
				       CUR_BILL_CD."LOB_NM",
				       CUR_BILL_CD."MANDT_LOBS",
				       CUR_BILL_CD."OFFR_TY",
				       CUR_BILL_CD."PROD_ENG_NM",
				       CUR_BILL_CD."PROD_FR_NM",
				       CUR_BILL_CD."REQ_NUM_OF_NEW_LOB_SEL",
				       CUR_BILL_CD."SEL_OPERTR",
				       CUR_BILL_CD."STOP_SOLD_DT",
				       CUR_BILL_CD."STRT_SELL_DT",
				       LV_CUR_UTC);    
		  END;
	--         Insert PK of successfully processed Records into Local Temp Tables 
	--         for Updating NDB_TS in corresponding Landing Tables records
			   INSERT INTO #UPDATE_MDM_TEL_BILL_CD
			   				(TEL_BILL_CD_PRIMARY_KEY)
				   			VALUES ( CUR_BILL_CD."TEL_BILL_CD_PRIMARY_KEY" );
			   					   	    		
			   INSERT INTO #UPDATE_EH_DELETION
			   			   (PROD_SHRT_NM, 
			   				CD_NM) 
			   		VALUES (CUR_BILL_CD."PROD_SHRT_NM", 
			   			    CUR_BILL_CD."CD_NM");
	     END IF ;  
       END IF;
     END IF ;
   END IF ;

END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::MDM_TEL_BILL_CD
UPDATE "LAND"."IFRS_R1.LAND::MDM_TEL_BILL_CD" A
  FROM "LAND"."IFRS_R1.LAND::MDM_TEL_BILL_CD" A 
 INNER JOIN #UPDATE_MDM_TEL_BILL_CD B 
   ON A."TEL_BILL_CD_PRIMARY_KEY" = B."TEL_BILL_CD_PRIMARY_KEY"
   SET NDB_TS = LV_CUR_UTC
 WHERE A.NDB_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

UPDATE "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_MDM_BILL_CD_EH" A
  FROM "NDB_HP"."IFRS_R1.HP.NDB_HP::HP_MDM_BILL_CD_EH" A 
 INNER JOIN #UPDATE_EH_DELETION B
    ON A."PROD_SHRT_NM" = B."PROD_SHRT_NM"
   AND A."CD_NM"        = B."CD_NM"
   SET (DELETE_DATE, DELETED) = (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT; 
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;
