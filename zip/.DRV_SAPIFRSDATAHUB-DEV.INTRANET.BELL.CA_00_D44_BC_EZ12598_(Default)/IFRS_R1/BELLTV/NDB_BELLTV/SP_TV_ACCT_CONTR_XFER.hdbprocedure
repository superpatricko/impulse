PROCEDURE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::SP_TV_ACCT_CONTR_XFER" (
IN IP_CYCL_ID NVARCHAR(200),OUT OP_STATUS NVARCHAR(100) ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--READS SQL DATA 
	AS
BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_TV_ACCT_CONTR_XFER
-- Created By      : BC_EZ08922 (ADITYA KUMAR AZAD)       
-- Create Date     : 23-08-2017
-- Description     : Data Inserted using Calculation View - CA_TV_ACCT_CONTR_XFER
--                   to NDB Table - TV_ACCT_CONTR_XFER Using this stored procedure.
--                   			
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
--             |                  | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes 
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number>
-- Description of Changes Made> : <Description of Changes>    
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Local Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
-------------------------------------------------------------------------------------------------- 

   DECLARE CURSOR CUR_XFER FOR
   		          SELECT "SP_TV_ORDER_TS",
						 "SP_TV_CUST_TS",
						 "PROCESS_ID",
						 "SRC_TS",
						 "SEQ_ID",
						 "INSRT_TS",
						 "CYCL_ID",
						 "REC_TY_ID",
						 "OLD_ACCT_NUM",
						 "EVNT_TY",
						 "EVNT_ID",
						 "EVNT_EFF_DT",
						 "CONTR_ID",
						 "ACCT_NUM",
						 "REFERENCE_EFFECTIVE_DATE",
						 "REFERENCE_EXPIRY_DATE"
					FROM "_SYS_BIC"."IFRS_R1.BELLTV.NDB_BELLTV/CA_TV_ACCT_CONTR_XFER"
					(PLACEHOLDER."$$IP_CYCL_ID$$"=>IFNULL(:IP_CYCL_ID,'999'));
   
--------------------------------------------------------------------------------------------------
-- Local Temporary Tables Declaration
--------------------------------------------------------------------------------------------------

CREATE LOCAL TEMPORARY TABLE #UPDATE_TV_ACCT_CONTR_XFER("CONTR_ID" NVARCHAR(50),"ACCT_NUM" NVARCHAR(16),
                             "EVNT_ID" NVARCHAR(50),"EVNT_EFF_DT" DATE,
                             "OLD_ACCT_NUM" NVARCHAR(16));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION("CONTR_ID" NVARCHAR(50),"ACCT_NUM" NVARCHAR(16),
                             "EVNT_ID" NVARCHAR(50),"EVNT_TY" NVARCHAR(50),"EVNT_EFF_DT" DATE,
                             "OLD_ACCT_NUM" NVARCHAR(16));
                             
--------------------------------------------------------------------------------------------------
-- Cursors Loop
--------------------------------------------------------------------------------------------------

	FOR C_XFER AS CUR_XFER DO

--  Define Exit Handler
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION 
	
--    Define Exit Handler
	  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	  BEGIN AUTONOMOUS TRANSACTION 	
	   
-- Do Nothing. Exception Handled to ensure SP does not get terminated 
	
 	  END;
 	  
-- Insert record into error table			                             
		    INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_ACCT_CONTR_XFER_EH"
				       (REC_TY_ID,
						CONTR_ID,
						ACCT_NUM,
						EVNT_ID,
						EVNT_TY,
						EVNT_EFF_DT,
						OLD_ACCT_NUM,
						REFERENCE_EFFECTIVE_DATE,
						REFERENCE_EXPIRY_DATE,
						CYCL_ID,
						INSERT_TS,
						SP_TV_ORDER_TS,
						SP_TV_CUST_TS,
						SRC_TS,
						ERROR_CODE,
						TECHNICAL_MESSAGE,
						ERROR_CREATE_TS)
				 values(C_XFER.REC_TY_ID,
						C_XFER.CONTR_ID,
						C_XFER.ACCT_NUM,
						C_XFER.EVNT_ID,
						C_XFER.EVNT_TY,
						C_XFER.EVNT_EFF_DT,
						C_XFER.OLD_ACCT_NUM,
						C_XFER.REFERENCE_EFFECTIVE_DATE,
						C_XFER.REFERENCE_EXPIRY_DATE,
						C_XFER.CYCL_ID,
						LV_CUR_UTC,
						C_XFER.SP_TV_ORDER_TS,
						C_XFER.SP_TV_CUST_TS,
						C_XFER.SRC_TS,
						::SQL_ERROR_CODE,
						::SQL_ERROR_MESSAGE,
						LV_CUR_UTC);
						
						LV_ERROR_FLAG := 'Y';
				
    END;
	
			   BEGIN AUTONOMOUS TRANSACTION	
-- 						Insert Records into the target NDB table
						INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_ACCT_CONTR_XFER"
					   (REC_TY_ID,
						CONTR_ID,
						ACCT_NUM,
						EVNT_ID,
						EVNT_TY,
						EVNT_EFF_DT,
						OLD_ACCT_NUM,
						REFERENCE_EFFECTIVE_DATE,
						REFERENCE_EXPIRY_DATE,
						CYCL_ID,
						INSERT_TS,
						SRC_TS)
				  VALUES(C_XFER.REC_TY_ID,
						C_XFER.CONTR_ID,
						C_XFER.ACCT_NUM,
						C_XFER.EVNT_ID,
						C_XFER.EVNT_TY,
						C_XFER.EVNT_EFF_DT,
						C_XFER.OLD_ACCT_NUM,
						C_XFER.REFERENCE_EFFECTIVE_DATE,
						C_XFER.REFERENCE_EXPIRY_DATE,
						C_XFER.CYCL_ID,
						:LV_CUR_UTC,
						C_XFER.SRC_TS);
								
			 END;
		
--         Insert PK of successfully processed Records into Local Temp Tables 
--         for Updating NDB_TS in corresponding Landing Tables records 
		   INSERT INTO #UPDATE_TV_ACCT_CONTR_XFER
					   ("CONTR_ID",
					    "ACCT_NUM",
					    "EVNT_ID",
					    "EVNT_EFF_DT",
					    "OLD_ACCT_NUM") 
			    VALUES (C_XFER.CONTR_ID,
						C_XFER.ACCT_NUM,
						C_XFER.EVNT_ID,
						C_XFER.EVNT_EFF_DT,
						C_XFER.OLD_ACCT_NUM);
		   					   	    		
		   INSERT INTO #UPDATE_EH_DELETION
					   ("CONTR_ID",
					    "ACCT_NUM",
					    "EVNT_ID",
					    "EVNT_TY",
					    "EVNT_EFF_DT",
					    "OLD_ACCT_NUM" ) 
			    VALUES (C_XFER.CONTR_ID,
						C_XFER.ACCT_NUM,
						C_XFER.EVNT_ID,
						C_XFER.EVNT_TY,
						C_XFER.EVNT_EFF_DT,
						C_XFER.OLD_ACCT_NUM);
		
     END FOR;					   			    

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 
-- Update Landing Table IFRS_R1.LAND::TV_ACCT_CONTR_XFER
            UPDATE "LAND"."IFRS_R1.LAND::TV_ACCT_CONTR_XFER" A
              FROM "LAND"."IFRS_R1.LAND::TV_ACCT_CONTR_XFER" A 
        INNER JOIN #UPDATE_TV_ACCT_CONTR_XFER B 
                ON  A.CONTR_ID                  =     B.CONTR_ID
			   AND A.ACCT_NUM                   =     B.ACCT_NUM
			   AND A.EVNT_ID                    =     B.EVNT_ID
			   AND A.EVNT_EFF_DT                =     B.EVNT_EFF_DT
			   AND A.OLD_ACCT_NUM               =     B.OLD_ACCT_NUM
               SET SP_TV_CUST_TS                =	  LV_CUR_UTC
             WHERE A.SP_TV_CUST_TS IS NULL;

--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------
-- Update NDB EH table TV_SUBSCRIBER_HIST_EH
           UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_ACCT_CONTR_XFER_EH" A
             FROM "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_ACCT_CONTR_XFER_EH" A
       INNER JOIN #UPDATE_EH_DELETION B
               ON  A.CONTR_ID                 =     B.CONTR_ID
			  AND A.ACCT_NUM                  =     B.ACCT_NUM
			  AND A.EVNT_ID                   =     B.EVNT_ID
			  AND A.EVNT_TY                   =     B.EVNT_TY
			  AND A.EVNT_EFF_DT               =     B.EVNT_EFF_DT
			  AND A.OLD_ACCT_NUM              =     B.OLD_ACCT_NUM
              SET (DELETE_DATE, DELETED)      =     (CURRENT_DATE, 1);

--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 
--  STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
--  executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

     OP_STATUS := LC_ERROR_TEXT;
			
    ELSE

  	 OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;	
 
		
	
   

