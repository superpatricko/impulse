PROCEDURE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::SP_MDM_TV_FIBE_SAT" 
	(IN IP_CYCL_ID NVARCHAR(3),
	OUT OP_STATUS  NVARCHAR(100))  
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
    AS
    
BEGIN
--------------------------------------------------------------------------------------------------
-- Procedure Title : SP_MDM_TV_FIBE_SAT
-- Created By      : BC_EZ08922       
-- Create Date     : 03-28-2017
-- Description     : Data Inserted using Calculation View - CA_MDM_FIBE_SAT
--                   To NDB Table - NDB_BELLTV::TV_MDM_FIBE_SAT Using this stored procedure.
-- Project         : Bell Canada
-- Release         : R1 / IFRS
--------------------------------------------------------------------------------------------------
--   M O D I F I C A T I O N   H I S T O R Y
--------------------------------------------------------------------------------------------------
-- Date        | User ID          | Modification History/Release
--------------------------------------------------------------------------------------------------
-- 08-28-2017  | BC_EZ08922       | 
--------------------------------------------------------------------------------------------------
-- Description Of the changes   : Version Check implimentation
--------------------------------------------------------------------------------------------------
-- Modification Number          : <Assign Some Number> 
-- Description of Changes Made> : <Description of Changes>       
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

DECLARE LC_ERROR_TEXT 		NVARCHAR(70) DEFAULT 'OUT STATUS IS 1 : INSERT/UPDATE FOR ONE OR MORE RECORD FAILED';
DECLARE LC_SUCCESS_TEXT 	NVARCHAR(70) DEFAULT 'OUT STATUS IS 0 : INSERT/UPDATE EXECUTION SUCCESSFUL';
DECLARE LV_ERROR_FLAG 		NVARCHAR(1) := 'N';
DECLARE LV_CUR_UTC 			TIMESTAMP := CURRENT_TIMESTAMP;
DECLARE ERROR_TAB 			TABLE (ERROR_CODE NVARCHAR(100));
DECLARE i					INTEGER;
DECLARE RECORD_COUNT		INTEGER;
DECLARE CURRENT_ERROR		NVARCHAR(100);

-- New variables for version sequence check
DECLARE LV_LOOP_ERROR_FLAG        INTEGER := 0;
DECLARE LV_PREV_COMPOSITE_PK		  NVARCHAR(20) := NULL;

--------------------------------------------------------------------------------------------------
-- Cursors Declaration
--------------------------------------------------------------------------------------------------

DECLARE CURSOR CUR_FIBE_SAT FOR
        SELECT "PROD_SHRT_NM",
	           "ERROR_STATUS",
	           "EXISTING_RECORD",
	           "CD_NM",
	           "ORDNG_OFFR_TY",
	           "ERROR_CODE",
	           "SRC_TS",
	           "REFERENCE_EFFECTIVE_DATE_PREV_DAY",
	           "CYCL_ID",
	           "SEQ_ID",
	           "CONVERSION_IND",
	           "EXECUTION_ID",
	           "REFERENCE_EXPIRY_DT",
	           "REFERENCE_EFFECTIVE_DT",
	           "COMPOSITE_PK"
	      FROM "_SYS_BIC"."IFRS_R1.BELLTV.NDB_BELLTV/CA_MDM_FIBE_SAT"
	           ('PLACEHOLDER' = ('$$IP_CYCL_ID$$','999'))
	           ORDER BY "CYCL_ID","SEQ_ID";
  
--------------------------------------------------------------------------------------------------
-- Global Variables Declaration
--------------------------------------------------------------------------------------------------

CREATE LOCAL TEMPORARY TABLE #UPDATE_TV_MDM_FIBE_SAT ("PROD_SHRT_NM" NVARCHAR(200),"CD_NM" NVARCHAR(40));
CREATE LOCAL TEMPORARY TABLE #UPDATE_EH_DELETION ("PROD_SHRT_NM" NVARCHAR(200),"CD_NM" NVARCHAR(40));
        	  
--------------------------------------------------------------------------------------------------
-- Cursors Loop
-------------------------------------------------------------------------------------------------- 
FOR C_MFS AS CUR_FIBE_SAT DO

-- Define Exit Handler

	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION
	
-- Define Exit Handler

	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN AUTONOMOUS TRANSACTION
	
	END; 
			
-- Insert record into error table

   INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_MDM_FIBE_SAT_EH"(
   	           ORDNG_OFFR_TY,
	           CD_NM,
               PROD_SHRT_NM,
	           CONVERSION_IND,
	           EXECUTION_ID,
	           INSERT_TS,
	           ERROR_CODE,
	           TECHNICAL_MESSAGE,
	           ERROR_CREATE_TS)
	   VALUES (C_MFS."ORDNG_OFFR_TY",
	           C_MFS."CD_NM",
	           C_MFS."PROD_SHRT_NM",
	           C_MFS."CONVERSION_IND",
	           C_MFS."EXECUTION_ID",
	           LV_CUR_UTC,
	           ::SQL_ERROR_CODE,
	           ::SQL_ERROR_MESSAGE,
	           LV_CUR_UTC);
	  
	  LV_ERROR_FLAG :='Y';
	  LV_LOOP_ERROR_FLAG := 1;

END;

-- FOR CLEARING THE VARIABLES

	IF (C_MFS."COMPOSITE_PK" != LV_PREV_COMPOSITE_PK OR LV_PREV_COMPOSITE_PK is null) THEN

		LV_LOOP_ERROR_FLAG := 0;
		LV_PREV_COMPOSITE_PK  := "C_MFS"."COMPOSITE_PK";
		
    END IF;
	  
-- Check the Error Status of the Record. If Record is with Error, then send to Error Table
	IF C_MFS.ERROR_STATUS = 1 THEN
	
-- Call the Stored Procedure to split the concatenated Error Messages into Error Rows
	CALL "NDB_COMMON"."IFRS_R1.COMMON_COMP.EH::SP_EH_SPLIT_ERRORS"(C_MFS."ERROR_CODE", ERROR_TAB, RECORD_COUNT);

-- Loop through the Error Records
	FOR i IN 1 .. :RECORD_COUNT DO
			
-- Fetch the Error Code
	CURRENT_ERROR = :ERROR_TAB."ERROR_CODE"[:i];
			
-- Insert record into error table

   INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_MDM_FIBE_SAT_EH"(
   	           ORDNG_OFFR_TY,
	           CD_NM,
               PROD_SHRT_NM,
	           CONVERSION_IND,
	           EXECUTION_ID,
	           INSERT_TS,
	           ERROR_CREATE_TS,
	           ERROR_CODE)
	   VALUES (C_MFS."ORDNG_OFFR_TY",
	           C_MFS."CD_NM",
	           C_MFS."PROD_SHRT_NM",
	           C_MFS."CONVERSION_IND",
	           C_MFS."EXECUTION_ID",
	           LV_CUR_UTC,
	           LV_CUR_UTC,
	           :CURRENT_ERROR);
	  

   END FOR;	
   
   	  LV_ERROR_FLAG :='Y';
      LV_LOOP_ERROR_FLAG := 1;
      
-- Processing for Successful Records
   ELSE 
         IF C_MFS.ERROR_STATUS = '0' THEN
	    
	        IF LV_LOOP_ERROR_FLAG = 1 THEN
    
    INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_MDM_FIBE_SAT_EH"(
   	           ORDNG_OFFR_TY,
	           CD_NM,
               PROD_SHRT_NM,
	           CONVERSION_IND,
	           EXECUTION_ID,
	           INSERT_TS,
	           ERROR_CREATE_TS,
	           ERROR_CODE)
	   VALUES (C_MFS."ORDNG_OFFR_TY",
	           C_MFS."CD_NM",
	           C_MFS."PROD_SHRT_NM",
	           C_MFS."CONVERSION_IND",
	           C_MFS."EXECUTION_ID",
	           LV_CUR_UTC,
	           LV_CUR_UTC,
	           'PREVIOUS VERSION IN ERROR');
	  
	 ELSE
-- If Record exists in the Target NDB Table

     IF C_MFS.EXISTING_RECORD = 'U' THEN
      
-- Update the target NDB table
              BEGIN AUTONOMOUS TRANSACTION    
	   UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_MDM_FIBE_SAT" NDB 
		  SET NDB."REFERENCE_EXPIRY_DT"           = C_MFS."REFERENCE_EFFECTIVE_DATE_PREV_DAY",
		  	  NDB.MODIFIED_TS                     = LV_CUR_UTC 
		WHERE NDB."PROD_SHRT_NM"                  = C_MFS."PROD_SHRT_NM" AND
		      NDB."CD_NM"                         = C_MFS."CD_NM" AND
		      NDB."REFERENCE_EXPIRY_DT"           = '9999-12-31';
		  
		  
-- Insert the new records having EXISTING_RECORD = 'U'

      INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_MDM_FIBE_SAT"(
                  ORDNG_OFFR_TY,
	              CD_NM,
                  PROD_SHRT_NM,
	              CONVERSION_IND,
	              EXECUTION_ID,
	              INSERT_TS,
	              REFERENCE_EFFECTIVE_DT,
	              REFERENCE_EXPIRY_DT)
	      VALUES (C_MFS."ORDNG_OFFR_TY",
	              C_MFS."CD_NM",
	              C_MFS."PROD_SHRT_NM",
	              C_MFS."CONVERSION_IND",
	              C_MFS."EXECUTION_ID",
	              LV_CUR_UTC,
	              C_MFS."REFERENCE_EFFECTIVE_DT",
	              C_MFS."REFERENCE_EXPIRY_DT");
	      END;
-- Insert PK of successfully processed Records into Local Temp Tables 
-- For Updating NDB_TS in corresponding Landing Tables records

	  INSERT INTO #UPDATE_TV_MDM_FIBE_SAT
				  ("PROD_SHRT_NM",
				   "CD_NM") 
		   VALUES (C_MFS."PROD_SHRT_NM",
				   C_MFS."CD_NM");
					   					   	    		
	   INSERT INTO #UPDATE_EH_DELETION
				   ("PROD_SHRT_NM",
				   "CD_NM") 
			VALUES (C_MFS."PROD_SHRT_NM",
					C_MFS."CD_NM");          
                    	
    ELSE
    
-- Insert Records into the target NDB table
       BEGIN AUTONOMOUS TRANSACTION
      INSERT INTO "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_MDM_FIBE_SAT"(
                   ORDNG_OFFR_TY,
	               CD_NM,
                   PROD_SHRT_NM,
	               CONVERSION_IND,
	               EXECUTION_ID,
	               INSERT_TS,
	               REFERENCE_EFFECTIVE_DT,
	               REFERENCE_EXPIRY_DT)
	       VALUES( C_MFS."ORDNG_OFFR_TY",
	               C_MFS."CD_NM",
	               C_MFS."PROD_SHRT_NM",
	               C_MFS."CONVERSION_IND",
	               C_MFS."EXECUTION_ID",
	               LV_CUR_UTC,
	               C_MFS."REFERENCE_EFFECTIVE_DT",
	               C_MFS."REFERENCE_EXPIRY_DT");
	    END;           
-- Insert PK of successfully processed Records into Local Temp Tables 
-- For Updating NDB_TS in corresponding Landing Tables records

		INSERT INTO #UPDATE_TV_MDM_FIBE_SAT
					("PROD_SHRT_NM",
					 "CD_NM") 
			 VALUES (C_MFS."PROD_SHRT_NM",
					 C_MFS."CD_NM");
					   					   	    		
		INSERT INTO #UPDATE_EH_DELETION
					("PROD_SHRT_NM",
					 "CD_NM") 
			 VALUES (C_MFS."PROD_SHRT_NM",
					 C_MFS."CD_NM");   
					    
             END IF;
  
	      END IF;
	     
	    END IF;
	  
	  END IF;
	  		
  END FOR;

--------------------------------------------------------------------------------------------------
-- Update Landing Tables
-------------------------------------------------------------------------------------------------- 

-- Update Landing Table IFRS_R1.LAND::MDM_SATELIT_BILL_CD

            UPDATE "LAND"."IFRS_R1.LAND::MDM_SATELIT_BILL_CD" A
 	          FROM "LAND"."IFRS_R1.LAND::MDM_SATELIT_BILL_CD" A
 	    INNER JOIN #UPDATE_TV_MDM_FIBE_SAT B 
 	            ON A.PROD_SHRT_NM             = B.PROD_SHRT_NM 
 	           AND A.CD_NM                    = B.CD_NM
 	           SET A.NDB_TS                   = LV_CUR_UTC
 	         WHERE A.NDB_TS IS NULL;

-- Update Landing Table IFRS_R1.LAND::MDM_SATELIT_ORDNG_CD
 
           UPDATE "LAND"."IFRS_R1.LAND::MDM_SATELIT_ORDNG_CD" A
 	         FROM "LAND"."IFRS_R1.LAND::MDM_SATELIT_ORDNG_CD" A
 	   INNER JOIN #UPDATE_TV_MDM_FIBE_SAT B 
 	           ON A.PROD_SHRT_NM              = B.PROD_SHRT_NM 
 	          SET A.NDB_TS                    = LV_CUR_UTC
 	        WHERE A.NDB_TS IS NULL;
 
-- Update Landing Table IFRS_R1.LAND::MDM_IPTV_BILL_CD
           
           UPDATE "LAND"."IFRS_R1.LAND::MDM_IPTV_BILL_CD" A
 	         FROM "LAND"."IFRS_R1.LAND::MDM_IPTV_BILL_CD" A
 	   INNER JOIN #UPDATE_TV_MDM_FIBE_SAT B 
 	           ON A.PROD_SHRT_NM              = B.PROD_SHRT_NM 
 	         AND  A.CD_NM                     = B.CD_NM
 	          SET A.NDB_TS                    = LV_CUR_UTC
 	        WHERE A.NDB_TS IS NULL;

-- Update Landing Table IFRS_R1.LAND::MDM_IPTV_ORDNG_CD
 	
           UPDATE "LAND"."IFRS_R1.LAND::MDM_IPTV_ORDNG_CD" A
 	         FROM "LAND"."IFRS_R1.LAND::MDM_IPTV_ORDNG_CD" A
 	   INNER JOIN #UPDATE_TV_MDM_FIBE_SAT B 
 	           ON A.PROD_SHRT_NM             = B.PROD_SHRT_NM 
 	          SET A.NDB_TS                   = LV_CUR_UTC
 	        WHERE A.NDB_TS IS NULL;
 	
--------------------------------------------------------------------------------------------------
-- Update Error Table
--------------------------------------------------------------------------------------------------

          UPDATE "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_MDM_FIBE_SAT_EH" A
            FROM "NDB_TV"."IFRS_R1.BELLTV.NDB_BELLTV::TV_MDM_FIBE_SAT_EH" A 
      INNER JOIN #UPDATE_EH_DELETION B
              ON A.PROD_SHRT_NM                = B.PROD_SHRT_NM 
 	         AND A.CD_NM                       = B.CD_NM
 	         SET (DELETE_DATE, DELETED)        = (CURRENT_DATE, 1);
 
--------------------------------------------------------------------------------------------------
-- Set Overall Status
-------------------------------------------------------------------------------------------------- 

-- STATUS 0: Send the success message to scheduling tool to confirm this procedure has been
-- executed successfully
    IF(LV_ERROR_FLAG = 'Y') THEN		

       OP_STATUS := LC_ERROR_TEXT; 
			
  ELSE

  	   OP_STATUS := LC_SUCCESS_TEXT; 	
				
	END IF;
		
END;